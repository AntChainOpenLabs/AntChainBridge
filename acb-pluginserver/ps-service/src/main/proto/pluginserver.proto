syntax = "proto3";

package com.alipay.antchain.bridge.pluginserver.service;

option java_multiple_files = true;
option java_package = "com.alipay.antchain.bridge.pluginserver.service";
option java_outer_classname = "PluginRpcServer";

// just empty
message Empty {}

service CrossChainService {
  // Relayer would call this interface to communicate with the `BBCService` object
  rpc bbcCall(CallBBCRequest) returns (Response) {}

  // handle heartbeat requests from relayers
  rpc heartbeat(Empty) returns (Response) {}

  // return if these blockchain products support or not
  rpc ifProductSupport(IfProductSupportRequest) returns (Response) {}

  // return if these blockchain domains alive or not
  rpc ifDomainAlive(IfDomainAliveRequest) returns (Response) {}
}

// heartbeat response
message HeartbeatResponse {
  repeated string products = 1;
  repeated string domains = 2;
}

message IfProductSupportRequest {
  repeated string products = 1;
}

message IfProductSupportResponse {
  // key : which product
  // value : support or not
  map<string, bool> results = 1;
}

message IfDomainAliveRequest {
  repeated string domains = 1;
}

message IfDomainAliveResponse {
  // key : which domain
  // value : alive or not
  map<string, bool> results = 1;
}

// wrapper for all responses
message Response {
  uint32 code = 1;
  string errorMsg = 2;
  oneof response {
    CallBBCResponse bbcResp = 3;
    HeartbeatResponse heartbeatResp = 4;
    IfProductSupportResponse ifProductSupportResp = 5;
    IfDomainAliveResponse ifDomainAliveResp = 6;
  }
}

// messages for `bbcCall` requests
message CallBBCRequest {
  // which kind of blockchain for plugin to load
  string product = 1;

  // which domain of the blockchain for the `BBCService` to connect with
  string domain = 2;

  // biz request for `BBCService`
  // basically, evey interface of `BBCService` has a request message defined here.
  oneof request {
    StartUpRequest startUpReq = 3;
    GetContextRequest getContextReq = 4;
    ShutdownRequest shutdownReq = 5;
    SetupAuthMessageContractRequest setupAuthMessageContractReq = 6;
    SetupSDPMessageContractRequest setupSDPMessageContractReq = 7;
    SetProtocolRequest setProtocolReq = 8;
    RelayAuthMessageRequest relayAuthMessageReq = 9;
    SetAmContractRequest setAmContractReq = 10;
    ReadCrossChainMessageReceiptRequest readCrossChainMessageReceiptReq = 11;
    ReadCrossChainMessagesByHeightRequest readCrossChainMessagesByHeightReq = 12;
    QuerySDPMessageSeqRequest querySDPMessageSeqReq = 13;
    QueryLatestHeightRequest queryLatestHeightReq = 14;
    SetLocalDomainRequest setLocalDomainReq = 15;
    ReadConsensusStateRequest readConsensusStateReq = 16;
    HasTpBtaRequest hasTpBtaReq = 17;
    GetTpBtaRequest getTpBtaReq = 18;
    GetSupportedPTCTypeRequest getSupportedPTCTypeReq = 19;
    GetPTCTrustRootRequest getPTCTrustRootReq = 20;
    HasPTCTrustRootRequest hasPTCTrustRootReq = 21;
    GetPTCVerifyAnchorRequest getPTCVerifyAnchorReq = 22;
    HasPTCVerifyAnchorRequest hasPTCVerifyAnchorReq = 23;
    SetupPTCContractRequest setupPTCContractReq = 24;
    UpdatePTCTrustRootRequest updatePTCTrustRootReq = 25;
    AddTpBtaRequest addTpBtaReq = 26;
    SetPtcContractRequest setPtcContractReq = 27;
    QueryValidatedBlockStateRequest queryValidatedBlockStateRequest = 28;
    RecvOffChainExceptionRequest recvOffChainExceptionRequest = 29;
    ReliableRetryRequest reliableRetryRequest = 30;
  }
}

message StartUpRequest {
  bytes rawContext = 1;
}

message GetContextRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message ShutdownRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message SetupAuthMessageContractRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message SetupSDPMessageContractRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message SetProtocolRequest {
  string protocolAddress = 1;
  string protocolType = 2;
}

message SetPtcContractRequest {
  string ptcContractAddress = 1;
}

message RelayAuthMessageRequest {
  bytes rawMessage = 1;
}

message SetAmContractRequest {
  string contractAddress = 1;
}

message ReadCrossChainMessageReceiptRequest {
  string txhash = 1;
}

message ReadCrossChainMessagesByHeightRequest {
  uint64 height = 1;
}

message QuerySDPMessageSeqRequest {
  string senderDomain = 1;
  string fromAddress = 2;
  string receiverDomain = 3;
  string toAddress = 4;
}

message QueryLatestHeightRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message SetLocalDomainRequest {
  string domain = 1;
}

message ReadConsensusStateRequest {
  string height = 1;
}

message HasTpBtaRequest {
  string tpbtaLane = 1;
  uint32 tpBtaVersion = 2;
}

message GetTpBtaRequest {
  string tpbtaLane = 1;
  uint32 tpBtaVersion = 2;
}

message GetSupportedPTCTypeRequest {
  // stay empty body for now, maybe fill some stuff in future
}

message GetPTCTrustRootRequest {
  bytes ptcOwnerOid = 1;
}

message HasPTCTrustRootRequest {
  bytes ptcOwnerOid = 1;
}

message GetPTCVerifyAnchorRequest {
  bytes ptcOwnerOid = 1;
  string verifyAnchorVersion = 2;
}

message HasPTCVerifyAnchorRequest {
  bytes ptcOwnerOid = 1;
  string verifyAnchorVersion = 2;
}

message SetupPTCContractRequest {
}

message UpdatePTCTrustRootRequest {
  bytes ptcTrustRoot = 1;
}

message AddTpBtaRequest {
  bytes tpBta = 1;
}

message QueryValidatedBlockStateRequest {
  string receiverDomain = 1;
}

message RecvOffChainExceptionRequest {
  string exceptionMsgAuthor = 1;
  bytes exceptionMsgPkg = 2;
}

message ReliableRetryRequest {
  bytes reliableCrossChainMessageData = 1;
}

// basic messages.
// same as project `antchain-bridge-commons`
message CrossChainMessageReceipt {
  string txhash = 1;
  bool confirmed = 2;
  bool successful = 3;
  string errorMsg = 4;
  uint64 txTimestamp = 5;
  bytes rawTx = 6;
}

enum CrossChainMessageType {
  AUTH_MSG = 0;
  DEVELOPER_DESIGN = 1;
}

message ProvableLedgerData {
  uint64 height = 1;
  bytes blockHash = 2;
  uint64 timestamp = 3;
  bytes ledgerData = 4;
  bytes proof = 5;
  bytes txHash = 6;
}

message CrossChainMessage {
  CrossChainMessageType type = 1;
  bytes message = 2;
  ProvableLedgerData provableData = 3;
}

// messages for `bbcCall` responses
message CallBBCResponse {
  oneof response {
    GetContextResponse getContextResp = 1;
    SetupAuthMessageContractResponse setupAMResp = 2;
    SetupSDPMessageContractResponse setupSDPResp = 3;
    ReadCrossChainMessageReceiptResponse readCrossChainMessageReceiptResp = 4;
    ReadCrossChainMessagesByHeightResponse readCrossChainMessagesByHeightResp = 5;
    QuerySDPMessageSeqResponse querySDPMsgSeqResp = 6;
    RelayAuthMessageResponse relayAuthMessageResponse = 7;
    QueryLatestHeightResponse queryLatestHeightResponse = 8;
    ReadConsensusStateResponse readConsensusStateResponse = 9;
    HasTpBtaResponse hasTpBtaResp = 10;
    GetTpBtaResponse getTpBtaResp = 11;
    GetSupportedPTCTypeResponse getSupportedPTCTypeResp = 12;
    GetPTCTrustRootResponse getPTCTrustRootResp = 13;
    HasPTCTrustRootResponse hasPTCTrustRootResp = 14;
    GetPTCVerifyAnchorResponse getPTCVerifyAnchorResp = 15;
    HasPTCVerifyAnchorResponse hasPTCVerifyAnchorResp = 16;
    SetupPtcContractResponse setupPtcContractResp = 17;
    QueryValidatedBlockStateResponse queryValidatedBlockStateResponse = 18;
    RecvOffChainExceptionResponse recvOffChainExceptionResponse = 19;
    ReliableRetryResponse reliableRetryResponse = 20;
  }
}

message GetContextResponse {
  bytes rawContext = 1;
}

enum ContractStatusEnum {
  INIT = 0;
  CONTRACT_DEPLOYED = 1;
  CONTRACT_READY = 2;
  CONTRACT_FREEZE = 3;
}

message AuthMessageContract {
  string contractAddress = 1;
  ContractStatusEnum status = 2;
}

message SetupAuthMessageContractResponse {
  AuthMessageContract amContract = 1;
}

message SDPMessageContract {
  string contractAddress = 1;
  ContractStatusEnum status = 2;
}

message SetupSDPMessageContractResponse {
  SDPMessageContract sdpContract = 1;
}

message PtcContract {
  string contractAddress = 1;
  ContractStatusEnum status = 2;
}

message SetupPtcContractResponse {
  PtcContract ptcContract = 1;
}

message ReadCrossChainMessageReceiptResponse {
  CrossChainMessageReceipt receipt = 1;
}

message ReadCrossChainMessagesByHeightResponse {
  repeated CrossChainMessage messageList = 1;
}

message QuerySDPMessageSeqResponse {
  uint64 sequence = 1;
}

message RelayAuthMessageResponse {
  CrossChainMessageReceipt receipt = 1;
}

message QueryLatestHeightResponse {
  uint64 height = 1;
}

message ReadConsensusStateResponse {
  bytes consensusState = 1;
}

message HasTpBtaResponse {
  bool result = 1;
}

message GetTpBtaResponse {
  bytes tpBta = 1;
}

message GetSupportedPTCTypeResponse {
  repeated string ptcTypes = 1;
}

message GetPTCTrustRootResponse {
  bytes ptcTrustRoot = 1;
}

message HasPTCTrustRootResponse {
  bool result = 1;
}

message GetPTCVerifyAnchorResponse {
  bytes ptcVerifyAnchor = 1;
}

message HasPTCVerifyAnchorResponse {
  bool result = 1;
}

message QueryValidatedBlockStateResponse {
  bytes blockStateData = 1;
}

message RecvOffChainExceptionResponse {
  CrossChainMessageReceipt receipt = 1;
}

message ReliableRetryResponse {
  CrossChainMessageReceipt receipt = 1;
}