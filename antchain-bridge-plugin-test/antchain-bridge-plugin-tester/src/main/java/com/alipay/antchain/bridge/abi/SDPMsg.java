package com.alipay.antchain.bridge.abi;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class SDPMsg extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_AMADDRESS = "amAddress";

    public static final String FUNC_GETAMADDRESS = "getAmAddress";

    public static final String FUNC_GETLOCALDOMAIN = "getLocalDomain";

    public static final String FUNC_LOCALDOMAINHASH = "localDomainHash";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_QUERYSDPMESSAGESEQ = "querySDPMessageSeq";

    public static final String FUNC_RECVMESSAGE = "recvMessage";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SENDMESSAGE = "sendMessage";

    public static final String FUNC_SENDMESSAGEV2 = "sendMessageV2";

    public static final String FUNC_SENDUNORDEREDMESSAGE = "sendUnorderedMessage";

    public static final String FUNC_SENDUNORDEREDMESSAGEV2 = "sendUnorderedMessageV2";

    public static final String FUNC_SETAMCONTRACT = "setAmContract";

    public static final String FUNC_SETLOCALDOMAIN = "setLocalDomain";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECEIVEMESSAGEV2_EVENT = new Event("ReceiveMessageV2",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event RECEIVEMESSAGE_EVENT = new Event("receiveMessage",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected SDPMsg(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SDPMsg(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SDPMsg(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SDPMsg(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<ReceiveMessageV2EventResponse> getReceiveMessageV2Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RECEIVEMESSAGEV2_EVENT, transactionReceipt);
        ArrayList<ReceiveMessageV2EventResponse> responses = new ArrayList<ReceiveMessageV2EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceiveMessageV2EventResponse typedResponse = new ReceiveMessageV2EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.messageId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.receiverDomain = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.atomicFlag = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceiveMessageV2EventResponse> receiveMessageV2EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceiveMessageV2EventResponse>() {
            @Override
            public ReceiveMessageV2EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEMESSAGEV2_EVENT, log);
                ReceiveMessageV2EventResponse typedResponse = new ReceiveMessageV2EventResponse();
                typedResponse.log = log;
                typedResponse.messageId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.receiverDomain = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.atomicFlag = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(9).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceiveMessageV2EventResponse> receiveMessageV2EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEMESSAGEV2_EVENT));
        return receiveMessageV2EventFlowable(filter);
    }

    public static List<ReceiveMessageEventResponse> getReceiveMessageEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RECEIVEMESSAGE_EVENT, transactionReceipt);
        ArrayList<ReceiveMessageEventResponse> responses = new ArrayList<ReceiveMessageEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceiveMessageEventResponse typedResponse = new ReceiveMessageEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceiveMessageEventResponse> receiveMessageEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceiveMessageEventResponse>() {
            @Override
            public ReceiveMessageEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEMESSAGE_EVENT, log);
                ReceiveMessageEventResponse typedResponse = new ReceiveMessageEventResponse();
                typedResponse.log = log;
                typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceiveMessageEventResponse> receiveMessageEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEMESSAGE_EVENT));
        return receiveMessageEventFlowable(filter);
    }

    public RemoteFunctionCall<String> amAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AMADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getAmAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAMADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getLocalDomain() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLOCALDOMAIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> localDomainHash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOCALDOMAINHASH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> querySDPMessageSeq(String senderDomain, byte[] senderID, String receiverDomain, byte[] receiverID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUERYSDPMESSAGESEQ,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(senderDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(senderID),
                        new org.web3j.abi.datatypes.Utf8String(receiverDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(receiverID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> recvMessage(String senderDomain, byte[] senderID, byte[] pkg) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECVMESSAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(senderDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(senderID),
                        new org.web3j.abi.datatypes.DynamicBytes(pkg)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDMESSAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(receiverDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(receiverID),
                        new org.web3j.abi.datatypes.DynamicBytes(message)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDMESSAGEV2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(receiverDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(receiverID),
                        new org.web3j.abi.datatypes.Bool(atomic),
                        new org.web3j.abi.datatypes.DynamicBytes(message)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendUnorderedMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDUNORDEREDMESSAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(receiverDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(receiverID),
                        new org.web3j.abi.datatypes.DynamicBytes(message)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendUnorderedMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDUNORDEREDMESSAGEV2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(receiverDomain),
                        new org.web3j.abi.datatypes.generated.Bytes32(receiverID),
                        new org.web3j.abi.datatypes.Bool(atomic),
                        new org.web3j.abi.datatypes.DynamicBytes(message)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAmContract(String newAmContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAMCONTRACT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newAmContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLocalDomain(String domain) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLOCALDOMAIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(domain)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SDPMsg load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SDPMsg(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SDPMsg load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SDPMsg(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SDPMsg load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SDPMsg(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SDPMsg load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SDPMsg(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SDPMsg> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SDPMsg.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SDPMsg> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SDPMsg.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SDPMsg> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SDPMsg.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SDPMsg> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SDPMsg.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class ReceiveMessageV2EventResponse extends BaseEventResponse {
        public byte[] messageId;

        public String senderDomain;

        public byte[] senderID;

        public String receiverDomain;

        public String receiverID;

        public BigInteger sequence;

        public BigInteger nonce;

        public BigInteger atomicFlag;

        public Boolean result;

        public String errMsg;
    }

    public static class ReceiveMessageEventResponse extends BaseEventResponse {
        public String senderDomain;

        public byte[] senderID;

        public String receiverID;

        public BigInteger sequence;

        public Boolean result;

        public String errMsg;
    }
}
