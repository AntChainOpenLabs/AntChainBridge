package main

import (
	"chaincodepb"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/gogo/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/core/chaincode/shim/shimtest"
	comm "github.com/hyperledger/fabric/protos/common"
	"github.com/hyperledger/fabric/protos/msp"
	pb "github.com/hyperledger/fabric/protos/peer"
	"oraclelogic"
	"strings"
	"testing"
)

var (
	txid = "123"

	MYCHAIN_DOMAIN    = "odats.mychain01027.com"
	ORACLE_SERVICE_ID = "BAAS_MVP_PUBLIC_TEST_UDAG"
	MYCHAIN_PARSER    = "mychain_0.10"

	// verified_udns -> domain_info
	MYCHAIN_UDNS = "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"
	// oracle -> properties -> mrenclave -> base64decode
	SGX_CLUSTER_MRENCLAVE = "994d46a81c44d30f09b7114b68cdd9a4e3a87a3e2429488ad3bfeb3413c17a20"
	// oracle_entity -> tee_evidence
	SGX_NODE_AVR = ""
	// parameter passing to recvPkgFromRelayer
	RECVPKGFROMRELAYER = "000000035b315d0000082300001d0800000400d50000000000cf000000010040000000376561343264653337353663353431666562326666623665353838636361653834633636613261643963646335613062333133323065626636313265353662350200790000007564616720756461673a2f2f6f646174732e6d79636861696e30313032372e636f6d2f6630316135303133323230366632626430356164613765343835396464653466643237663936333864316237303231626139366434363961303430633536383836653133386666656333362f52656365697074732f300300040000000000000007000400000000000000080007000000535543434553530500f90400000000f30400000000ed0400007b22526573756c74223a302c2247617355736564223a34383237382c224f7574707574223a22222c224f6666736574223a302c224c6f67456e7472696573223a5b7b2246726f6d223a2237636130313732383530633533303635303436626565616333636465633366653932313533326462666562646637656665623563333364303139636437373938222c22546f223a2264656661613133333631383937323239343331303034663464613263346436373962336666353364306337343763343764343734353535623135636436663636222c22546f70696373223a5b2263616c6c5f636f6e7472616374225d2c224c6f6744617461223a22227d2c7b2246726f6d223a2236323064376139373536616562643131613465623165363436393039303664393365653066303934623038353932396636393034336130343430303561323235222c22546f223a2262623935356133353131303236306366373136613562343336396664663035396666353139343732343333336131373532666638393964613930356131326336222c22546f70696373223a5b2237396237353136623162376136613339666234623762323265383636376364333734346535633237343235323932663861396634396431303432633063363531225d2c224c6f6744617461223ad5d7d0000200000001f51b9c52598752712fd1f13ba3bd9c93c209665477c61ef760a92eb85ddfe610600000200000971394218f7d3f0854515467d26a3cdace3f32cd73bbd9506ddff7cddb71b48ce00216ceb825242809e71795ac5c2f11e40211b9f7dbceb852fefb2a87e299046319ac67d1bf7932b0429f5db52f6cdb7f8a980a326e15f4a5cab7f53e9b2f7aa246e0776f18a77985d3615b4cbaa2da154014c1683c175403f555c5034fecfe650aa69df8729658a0fe3cc7c1c0c6cb27404dcb2425279726050239545bafbcdf9df1f639348a2215571d9cfb99db3c8f0837f283a408c3cd3aacee6718b4d566388b5b13eb68f09bd9d97d39d6da4f1802a9e53d395c34c18993328e7699ae7c8a5df5813c99a7d33886e2e999378a6bce258a5fbf9dd3bdc1ddcf10e84dcc8a3f3b87f9d999798637a185f444b4f4a44ef94b62c2ca4ba5a8dadb86c744a8791c1795bbdc77f696036fe832fd7020b7de46d0d63a6d6e20de3682b03df0cc7849c90158490f413672a6495beaa7cedbff209effe833010799e21421d09091d417198c984a006fdd5c3901d9c8e1bef85e1033a08be6c2acaa689ddcd9de44ca79a474936f508f0557541a84c426cfc57217b0be4cabd4884ff83f324e8821df5ca7a2488a2a247b2232609823f2aee4cb4de2eb0ad3a577170247c8b4fe17d4048705f36a05e27113086607da91b447a12d37c5c4a43a15309078684471bf1f6d927e667dbd91b0bb2f67f8e95aad525e20149b504efeb5a94e8234955da"
	//RECVPKGFROMRELAYER = "00000442322ce0000880700000400ff0000000000f90000000100000000000200e30000007564616720756461673a2f2f746573742e7768682e746565636861696e2e615f4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141412f6630316135303133323230623662396637666564343533623439353336633337356232343238356363653335396634653238623736346534323030343936653231383534313833616466372f52656365697074732f30030004000000000000000700040000000000000008000000000005004105000000003b0500000000350500007b22526573756c74223a302c2247617355736564223a323131323430322c224f7574707574223a22222c224f6666736574223a302c224c6f67456e7472696573223a5b7b2246726f6d223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f70696373223a5b2263616c6c5f636f6e7472616374225d2c224c6f6744617461223a22227d2c7b2246726f6d223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f70696373223a5b22353336353734353336353665363435333635373137353635366536333635222cc223331225d2c224c6f6744617461223a2234373065353566386637663534623563333730386162616365343961393836393465663631326633303036323732376138393133316637663936227d2c7b2246726f6d223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f223a2230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22546f70696373223a5b22373536653635366536333732373937303734222c22353336353665363434313735373436383464363537333733363136373635222c2238386539356166376464646339383535663637373936373163656163633864623131653065626264633665663234323562306635323832656663376539323761222c2233306539646166336238663232356438333131303865346131323238363161633836626639306338653962396362663663326466633834333834353764386462225d2c224c6f6744617461223a2234373065353566386637663534623563333730386162616365343961393836393465663631326633303036323732376138393133316637663936227d5d7d000020000000167d4d40674ac0034ce5778f7f71eb80ea9e1623df1281a8ded2a4e92dda173d060000010000ab5226a90167a1512055701bd6a618f3872071e72e2ac0746e084640caffd8bfb76e504dbb1913ce0f48d22cc2090bc22178c8b6e7c36bdca1f4524845f24c04e3d9da222d72d167fa0972a67094791ef2be81e64303911a35d0ea54856ddeb32e29af6df7d0df2a7da0f1c9f98e2d86ea18d01d631fb07d6729fea76881bb8c2e66cba83ff6f7530808b9af900af724040ccfdf7ab9efe7ed8a32fc2925bc8c4f4aa29ec8050449a7c303ddfe45a015ae9694c048b970c8559a4246cddc6ea1c34b3ffd66149a838fc78f7dff6306066d779a03e29596ad694d54727157da3dbec6c9f8ab5c4e61e398f998f256d409e5deca5865c1ef57fc68a98c2c57cf74"
)

func InvokeChaincode(t *testing.T, stub *shimtest.MockStub, args [][]byte, sp *pb.SignedProposal) pb.Response {
	res := stub.MockInvokeWithSignedProposal(txid, args, sp)
	if res.Status != shim.OK {
		fmt.Printf("invokeChaincode fn %s failed, msg: %s\n", args[0], res.Message)
		return res
	}
	return res
}

func doInit(t *testing.T, stub *shimtest.MockStub, args [][]byte, sp *pb.SignedProposal) {
	stub.TxID = txid
	res := InvokeChaincode(t, stub, args, sp)
	// res := stub.MockInit("1", args)
	if res.Status != shim.OK {
		fmt.Println("chaincode init failed")
		t.FailNow()
	}
}

func MockSignedProposal(ccname string, sp *pb.SignedProposal) {
	var ccid pb.ChaincodeID
	ccid.Name = ccname

	var chext pb.ChaincodeHeaderExtension
	chext.ChaincodeId = &ccid
	bt, _ := proto.Marshal(&chext)

	var chhr comm.ChannelHeader
	chhr.Extension = bt
	bt, _ = proto.Marshal(&chhr)

	var hr comm.Header
	hr.ChannelHeader = bt
	bt, _ = proto.Marshal(&hr)

	var pp pb.Proposal
	pp.Header = bt
	bt, _ = proto.Marshal(&pp)

	sp.ProposalBytes = bt
}

func Test_Integration(t *testing.T) {
	crosscc := new(CrossChain)
	stub := shimtest.NewMockStub("crosschain", crosscc)

	bizcc_name := "bizcc"
	crosscc_name := "crosscc"

	var crosscc_sp pb.SignedProposal
	MockSignedProposal(crosscc_name, &crosscc_sp)
	var bizcc_sp pb.SignedProposal
	MockSignedProposal(bizcc_name, &bizcc_sp)

	bizcc := new(CrossChainTest)
	stubbiz := shimtest.NewMockStub(bizcc_name, bizcc)

	stub.MockPeerChaincode(bizcc_name, stubbiz, "")
	stubbiz.MockPeerChaincode(crosscc_name, stub, "")

	cert := "-----BEGIN CERTIFICATE-----\nMIICjzCCAjWgAwIBAgIUVHR3Y4gykapStwdAEwY8POZJyYwwCgYIKoZIzj0EAwIwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTkwNjE3MDk1MzAwWhcNMjAwNjE2MDk1ODAwWjBCMTAwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMBIGA1UECxMLZGVwYXJ0bWVudDExDjAMBgNVBAMTBXVzZXIxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyk8ZD3Pa3QkfqRkRXhqINLkFB4gO05iDk6IiUr8YxkRf7CFyZ/4Q7yfxJuGtj7ja0v62HDjKjTk4GtByRVo0BKOB1zCB1DAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU4Mo/HEjC/z2gRpa0YQUu6s66bzYwKwYDVR0jBCQwIoAgscw0w/LQz4B4aPo6GhGHTSBBMIRf2O6zbS5ZRNd2dxwwaAYIKgMEBQYHCAEEXHsiYXR0cnMiOnsiaGYuQWZmaWxpYXRpb24iOiJvcmcxLmRlcGFydG1lbnQxIiwiaGYuRW5yb2xsbWVudElEIjoidXNlcjEiLCJoZi5UeXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQChD3K9EDlkRmKJPWS/tvQUKl32HHsyh1ESEh9Zc4BAoAIgNaBr4XHaLc2uQZJ+S/EBvztOczag2hekEtqJU21hpuk=\n-----END CERTIFICATE-----\n"
	fakeCert := "-----BEGIN CERTIFICATE-----\nMIICTjCCAfWgAwIBAgIUArdFaN6TDO1h2x7eY0nF9MDaZCowCgYIKoZIzj0EAwIwajELMAkGA1UEBhMCQ04xETAPBgNVBAgTCFpoZWppYW5nMREwDwYDVQQHEwhIYW5nemhvdTENMAsGA1UEChMEb3JnMDEmMCQGA1UEAxMdb3JnMCBDbGllbnQgSW50ZXJtZWRpYXRlIENlcnQwHhcNMTkwNzExMDcwNTAwWhcNMjAwNzEwMDcxMDAwWjAkMQ8wDQYDVQQLEwZjbGllbnQxETAPBgNVBAMTCHVzZXJvcmcxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9mssLj1ozolhdV+cfrqIEd3dfGhscTOP3EhjRg39OqxHmTYGILOO/TS7kiW1Q/zhiKPeL7pxH5AF1LZ0U8W+MKOBvjCBuzAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUhTDn0WNutsKFm2k2S9yD7KBdhKwwHwYDVR0jBBgwFoAUDjPsY9xRxy3Xj3cSCTBEpzhA0DAwWwYIKgMEBQYHCAEET3siYXR0cnMiOnsiaGYuQWZmaWxpYXRpb24iOiIiLCJoZi5FbnJvbGxtZW50SUQiOiJ1c2Vyb3JnMSIsImhmLlR5cGUiOiJjbGllbnQifX0wCgYIKoZIzj0EAwIDRwAwRAIgA0sd/kl37iHTyijmk/+m2/yO8VIkpLIH0kC6uLlPpWoCIDW3FEVrseoM2A1CFIR+ku3AaBovj0hmUIBFzV3o+p9m\n-----END CERTIFICATE-----"
	var creator msp.SerializedIdentity
	creator.IdBytes = []byte(cert)
	creator.Mspid = ""
	bt, _ := proto.Marshal(&creator)
	stub.Creator = bt

	var fakecreator msp.SerializedIdentity
	fakecreator.IdBytes = []byte(fakeCert)
	fakecreator.Mspid = ""
	bt2, _ := proto.Marshal(&fakecreator)

	doInit(t, stub, [][]byte{[]byte("Init")}, &crosscc_sp)

	var checkSetAdminArgs = [][]byte{
		[]byte("hasNotSetAdmin"),
	}
	result := InvokeChaincode(t, stub, checkSetAdminArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	var setAdminArgs = [][]byte{
		[]byte("setAdmin"),
		[]byte(cert),
	}
	result = InvokeChaincode(t, stub, setAdminArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 再次检查hasNotSetAdmin
	result = InvokeChaincode(t, stub, checkSetAdminArgs, &crosscc_sp)
	if shim.OK == result.Status { // setProtocol
		t.FailNow()
	}

	// 更新cert 为fakeCert
	var setAdminArgs2 = [][]byte{
		[]byte("setAdmin"),
		[]byte(fakeCert),
	}
	result = InvokeChaincode(t, stub, setAdminArgs2, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	// 尝试用cert修改admin，会失败
	result = InvokeChaincode(t, stub, setAdminArgs, &crosscc_sp)
	if shim.OK == result.Status { // setProtocol
		t.FailNow()
	}
	// 更新回原来的cert
	stub.Creator = bt2 // 使用fakeCert作为creator
	result = InvokeChaincode(t, stub, setAdminArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	stub.Creator = bt // 换回使用cert作为creator

	//////////////// 配置oracle service ////////////////
	var batchDeployServiceArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("batchDeployService"),
		[]byte("TEEClusterOracle_01"), // addSGXOracleCluster
		[]byte("TEEClusterOracle_01"),
		[]byte("6666"),
		[]byte("dev ias"),
		[]byte("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqXot4OZuphR8nudFrAFiaGxxkgma/Es/BA+tbeCTUR106AL1ENcWA4FX3K+E9BBL0/7X5rj5nIgX/R/1ubhkKWw9gfqPG3KeAtIdcv/uTO1yXv50vqaPvE1CRChvzdS/ZEBqQ5oVvLTPZ3VEicQjlytKgN9cLnxbwtuvLUK7eyRPfJW/ksddOzP8VBBniolYnRCD2jrMRZ8nBM2ZWYwnXnwYeOAHV+W9tOhAImwRwKF/95yAsVwd21ryHMJBcGH70qLagZ7Ttyt++qO/6+KAXJuKwZqjRlEtSEz8gZQeFfVYgcwSfo96oSMAzVr7V0L6HSDLRnpb6xxmbPdqNol4tQIDAQAB"),
		[]byte("-----BEGIN%20CERTIFICATE-----%0AMIIEoTCCAwmgAwIBAgIJANEHdl0yo7CWMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV%0ABAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV%0ABAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0%0AYXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwHhcNMTYxMTIyMDkzNjU4WhcNMjYxMTIw%0AMDkzNjU4WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1Nh%0AbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEtMCsGA1UEAwwk%0ASW50ZWwgU0dYIEF0dGVzdGF0aW9uIFJlcG9ydCBTaWduaW5nMIIBIjANBgkqhkiG%0A9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqXot4OZuphR8nudFrAFiaGxxkgma/Es/BA%2Bt%0AbeCTUR106AL1ENcWA4FX3K%2BE9BBL0/7X5rj5nIgX/R/1ubhkKWw9gfqPG3KeAtId%0Acv/uTO1yXv50vqaPvE1CRChvzdS/ZEBqQ5oVvLTPZ3VEicQjlytKgN9cLnxbwtuv%0ALUK7eyRPfJW/ksddOzP8VBBniolYnRCD2jrMRZ8nBM2ZWYwnXnwYeOAHV%2BW9tOhA%0AImwRwKF/95yAsVwd21ryHMJBcGH70qLagZ7Ttyt%2B%2BqO/6%2BKAXJuKwZqjRlEtSEz8%0AgZQeFfVYgcwSfo96oSMAzVr7V0L6HSDLRnpb6xxmbPdqNol4tQIDAQABo4GkMIGh%0AMB8GA1UdIwQYMBaAFHhDe3amfrzQr35CN%2Bs1fDuHAVE8MA4GA1UdDwEB/wQEAwIG%0AwDAMBgNVHRMBAf8EAjAAMGAGA1UdHwRZMFcwVaBToFGGT2h0dHA6Ly90cnVzdGVk%0Ac2VydmljZXMuaW50ZWwuY29tL2NvbnRlbnQvQ1JML1NHWC9BdHRlc3RhdGlvblJl%0AcG9ydFNpZ25pbmdDQS5jcmwwDQYJKoZIhvcNAQELBQADggGBAGcIthtcK9IVRz4r%0ARq%2BZKE%2B7k50/OxUsmW8aavOzKb0iCx07YQ9rzi5nU73tME2yGRLzhSViFs/LpFa9%0AlpQL6JL1aQwmDR74TxYGBAIi5f4I5TJoCCEqRHz91kpG6Uvyn2tLmnIdJbPE4vYv%0AWLrtXXfFBSSPD4Afn7%2B3/XUggAlc7oCTizOfbbtOFlYA4g5KcYgS1J2ZAeMQqbUd%0AZseZCcaZZZn65tdqee8UXZlDvx0%2BNdO0LR%2B5pFy%2BjuM0wWbu59MvzcmTXbjsi7HY%0A6zd53Yq5K244fwFHRQ8eOB0IWB%2B4PfM7FeAApZvlfqlKOlLcZL2uyVmzRkyR5yW7%0A2uo9mehX44CiPJ2fse9Y6eQtcfEhMPkmHXI01sN%2BKwPbpA39%2BxOsStjhP9N1Y1a2%0AtQAVo%2ByVgLgV2Hws73Fc0o3wC78qPEA%2Bv2aRs/Be3ZFDgDyghc/1fgU%2B7C%2BP6kbq%0Ad4poyb6IW8KCJbxfMJvkordNOgOUUxndPHEi/tb/U7uLjLOgPA%3D%3D%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIFSzCCA7OgAwIBAgIJANEHdl0yo7CUMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV%0ABAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV%0ABAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0%0AYXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwIBcNMTYxMTE0MTUzNzMxWhgPMjA0OTEy%0AMzEyMzU5NTlaMH4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwL%0AU2FudGEgQ2xhcmExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQD%0ADCdJbnRlbCBTR1ggQXR0ZXN0YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwggGiMA0G%0ACSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCfPGR%2BtXc8u1EtJzLA10Feu1Wg%2Bp7e%0ALmSRmeaCHbkQ1TF3Nwl3RmpqXkeGzNLd69QUnWovYyVSndEMyYc3sHecGgfinEeh%0ArgBJSEdsSJ9FpaFdesjsxqzGRa20PYdnnfWcCTvFoulpbFR4VBuXnnVLVzkUvlXT%0AL/TAnd8nIZk0zZkFJ7P5LtePvykkar7LcSQO85wtcQe0R1Raf/sQ6wYKaKmFgCGe%0ANpEJUmg4ktal4qgIAxk%2BQHUxQE42sxViN5mqglB0QJdUot/o9a/V/mMeH8KvOAiQ%0AbyinkNndn%2BBgk5sSV5DFgF0DffVqmVMblt5p3jPtImzBIH0QQrXJq39AT8cRwP5H%0AafuVeLHcDsRp6hol4P%2BZFIhu8mmbI1u0hH3W/0C2BuYXB5PC%2B5izFFh/nP0lc2Lf%0A6rELO9LZdnOhpL1ExFOq9H/B8tPQ84T3Sgb4nAifDabNt/zu6MmCGo5U8lwEFtGM%0ARoOaX4AS%2B909x00lYnmtwsDVWv9vBiJCXRsCAwEAAaOByTCBxjBgBgNVHR8EWTBX%0AMFWgU6BRhk9odHRwOi8vdHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9jb250ZW50%0AL0NSTC9TR1gvQXR0ZXN0YXRpb25SZXBvcnRTaWduaW5nQ0EuY3JsMB0GA1UdDgQW%0ABBR4Q3t2pn680K9%2BQjfrNXw7hwFRPDAfBgNVHSMEGDAWgBR4Q3t2pn680K9%2BQjfr%0ANXw7hwFRPDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkq%0AhkiG9w0BAQsFAAOCAYEAeF8tYMXICvQqeXYQITkV2oLJsp6J4JAqJabHWxYJHGir%0AIEqucRiJSSx%2BHjIJEUVaj8E0QjEud6Y5lNmXlcjqRXaCPOqK0eGRz6hi%2BripMtPZ%0AsFNaBwLQVV905SDjAzDzNIDnrcnXyB4gcDFCvwDFKKgLRjOB/WAqgscDUoGq5ZVi%0AzLUzTqiQPmULAQaB9c6Oti6snEFJiCQ67JLyW/E83/frzCmO5Ru6WjU4tmsmy8Ra%0AUd4APK0wZTGtfPXU7w%2BIBdG5Ez0kE1qzxGQaL4gINJ1zMyleDnbuS8UicjJijvqA%0A152Sq049ESDz%2B1rRGc2NVEqh1KaGXmtXvqxXcTB%2BLjy5Bw2ke0v8iGngFBPqCTVB%0A3op5KBG3RjbF6RRSzwzuWfL7QErNC8WEy5yDVARzTA5%2BxmBc388v9Dm21HGfcC8O%0ADD%2BgT9sSpssq0ascmvH49MOgjt1yoysLtdCtJW/9FZpoOypaHx0R%2BmJTLwPXVMrv%0ADaVzWh5aiEx%2BidkSGMnX%0A-----END%20CERTIFICATE-----%0A"),
		[]byte(SGX_CLUSTER_MRENCLAVE), // <-- mrEnclave
		[]byte("false"),
		[]byte(""),
		[]byte("TEEClusterOracle_01"), // registerSGXOracleNode
		[]byte("TEEClusterEntity_01"),
		[]byte("TEEClusterEntity_01"),
		[]byte("TEEClusterEntity_01"),
		[]byte(SGX_NODE_AVR),      // <-- AVR
		[]byte(ORACLE_SERVICE_ID), // addOracleService
		[]byte(ORACLE_SERVICE_ID),
		[]byte("use for test udag"),
		[]byte("TEEClusterOracle_01"),
		[]byte("UDAG"),
		[]byte("BLACKLIST"),
		[]byte("OPEN"),
	}

	result = InvokeChaincode(t, stub, batchDeployServiceArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//////////////// 检查配置是否生效 ////////////////
	var hasOracleArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("hasOracle"),
		[]byte("TEEClusterOracle_01"), // oracle biz id
	}

	result = InvokeChaincode(t, stub, hasOracleArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	var hasOracleNodeArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("hasOracleNode"),
		[]byte("TEEClusterOracle_01"), // oracle biz id
		[]byte("TEEClusterEntity_01"), // oracle node biz id
	}

	result = InvokeChaincode(t, stub, hasOracleNodeArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	////// creator改为其他证书，尝试调用AdminManage
	stub.Creator = bt2
	result = InvokeChaincode(t, stub, hasOracleArgs, &crosscc_sp)
	if shim.OK == result.Status { // setProtocol
		t.FailNow()
	}
	stub.Creator = bt // 修改回正确的creator

	var hasOracleSerivceArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("hasOracleService"),
		[]byte(ORACLE_SERVICE_ID), // oracle biz id
	}

	result = InvokeChaincode(t, stub, hasOracleSerivceArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	var queryOracleArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("queryOracleBasicInfo"),
		[]byte("TEEClusterOracle_01"),
	}

	result = InvokeChaincode(t, stub, queryOracleArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	info := chaincodepb.OracleBasicInfo{}
	_ = json.Unmarshal(result.Payload, &info)
	if info.IfExists != true {
		t.FailNow()
	}

	//////////////// 注册UDNS ////////////////
	var registerUDNSDomainArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("registerUDNSDomain"),
		[]byte("TEEClusterOracle_01"),
		[]byte("TEEClusterEntity_01"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte(MYCHAIN_UDNS), // <- udns
	}

	result = InvokeChaincode(t, stub, registerUDNSDomainArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//////////////// 检查注册UDNS ////////////////
	var hasUDNSDomainArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("hasUDNSDomain"),
		[]byte("TEEClusterOracle_01"),
		[]byte("TEEClusterEntity_01"),
		[]byte(MYCHAIN_DOMAIN),
	}

	result = InvokeChaincode(t, stub, hasUDNSDomainArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//////////////// 配置接收myachain消息的地址 ////////////////
	var getMyChainDomainAMClientArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("getMyChainDomainAMClient"),
		[]byte(MYCHAIN_DOMAIN),
	}

	result = InvokeChaincode(t, stub, getMyChainDomainAMClientArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	if string(result.Payload) != "\000" {
		t.FailNow()
	}

	var setMyChainDomainAMClientArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("setMyChainDomainAMClient"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("bb955a35110260cf716a5b4369fdf059ff5194724333a1752ff899da905a12c6"),
		[]byte("51aba7bbea3eb91f38a4eb7da522171afeb6040b82710b92ac0e6ccaca217fef"),
	}

	result = InvokeChaincode(t, stub, setMyChainDomainAMClientArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	result = InvokeChaincode(t, stub, getMyChainDomainAMClientArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	if string(result.Payload) != "bb955a35110260cf716a5b4369fdf059ff5194724333a1752ff899da905a12c6\00051aba7bbea3eb91f38a4eb7da522171afeb6040b82710b92ac0e6ccaca217fef" {
		t.FailNow()
	}

	amclients := strings.Split(string(result.Payload), string('\000'))
	if len(amclients) != 2 {
		t.FailNow()
	}
	if amclients[0] != "bb955a35110260cf716a5b4369fdf059ff5194724333a1752ff899da905a12c6" {
		t.FailNow()
	}
	if amclients[1] != "51aba7bbea3eb91f38a4eb7da522171afeb6040b82710b92ac0e6ccaca217fef" {
		t.FailNow()
	}

	//////////////// 发送消息 ////////////////

	// 检查初始序列号
	bizcc_name_hash := sha256.Sum256([]byte(bizcc_name))
	var querySendP2PMsgSeqArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("querySendP2PMsgSeq"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
		[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
	}
	result = InvokeChaincode(t, stub, querySendP2PMsgSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("querySendP2PMsgSeq seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":0}" {
		t.FailNow()
	}

	// 发送一次消息
	msgnounce := "nounce1"
	var sendMessageArgs = [][]byte{
		[]byte("testSendMessage"),
		[]byte(crosscc_name),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
		[]byte("hello world from fabric"),
		[]byte(msgnounce),
	}

	result = InvokeChaincode(t, stubbiz, sendMessageArgs, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 发送序列号应该加1
	result = InvokeChaincode(t, stub, querySendP2PMsgSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("querySendP2PMsgSeq seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":1}" {
		t.FailNow()
	}

	{
		key := oraclelogic.K_CROSSCHAIN_MSG_PREFIX + txid + "_" + msgnounce
		am, err := stub.GetState(key)
		if err != nil {
			t.FailNow()
		}
		if am == nil {
			t.FailNow()
		}
	}

	// 再发一次消息
	result = InvokeChaincode(t, stubbiz, sendMessageArgs, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//////////////// 接收消息 ////////////////

	// 检查初始序列号
	var setExpectedDomainSeqArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("setExpectedDomain"),
		[]byte("odats.aliyun.com"),
	}
	result = InvokeChaincode(t, stub, setExpectedDomainSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("setExpectedDomain result %s\n\n", result.Payload)

	// 检查初始序列号
	var queryP2PMsgSeqArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("queryRecvP2PMsgSeq"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("defaa13361897229431004f4da2c4d679b3ff53d0c747c47d474555b15cd6f66"),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
	}
	result = InvokeChaincode(t, stub, queryP2PMsgSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":0}" {
		t.FailNow()
	}

	// 查询chaincode反查表
	var queryChaincodeArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("querySha256Invert"),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
	}
	result = InvokeChaincode(t, stub, queryChaincodeArgs, &crosscc_sp)
	if shim.OK == result.Status { // setProtocol
		t.FailNow()
	}

	// 注册chaincode反查表
	var registerChaincodeArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("registerSha256Invert"),
		[]byte(bizcc_name),
	}
	result = InvokeChaincode(t, stub, registerChaincodeArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 检查domain所属oracle service id
	var getDomainServiceIdArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("getDomainServiceId"),
		[]byte(MYCHAIN_DOMAIN),
	}
	result = InvokeChaincode(t, stub, getDomainServiceIdArgs, &crosscc_sp)
	if shim.OK != result.Status || result.Payload != nil {
		t.FailNow()
	}

	// 设置domain所属oracle service id
	var setDomainServiceIdArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("setDomainServiceId"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte(ORACLE_SERVICE_ID),
	}
	result = InvokeChaincode(t, stub, setDomainServiceIdArgs, &crosscc_sp)
	if shim.OK != result.Status {
		t.FailNow()
	}

	result = InvokeChaincode(t, stub, getDomainServiceIdArgs, &crosscc_sp)
	if shim.OK != result.Status {
		t.FailNow()
	}
	if string(result.Payload) != ORACLE_SERVICE_ID {
		t.FailNow()
	}

	// 新测试，设置domain
	var setMyChainDomainAMClientArgs2 = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("setMyChainDomainAMClient"),
		[]byte("test.whh.teechain.a_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
		[]byte(""),
		[]byte("701e5b9a3ef109c84f9906304caf7ba58aca86c740671c524e5196f33a0b45e8"),
	}

	result = InvokeChaincode(t, stub, setMyChainDomainAMClientArgs2, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 设置domain parser
	var setDomainParserArgs = [][]byte{
		[]byte("setDomainParser"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte(MYCHAIN_PARSER),
	}

	result = InvokeChaincode(t, stub, setDomainParserArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 接收消息
	var recvMessageArgs = [][]byte{
		[]byte("recvMessage"),
		[]byte(ORACLE_SERVICE_ID),
		[]byte(RECVPKGFROMRELAYER),
	}
	fmt.Println("TEST RECV MESSAGE")
	result = InvokeChaincode(t, stub, recvMessageArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//  接收消息后，序列号应该加1
	result = InvokeChaincode(t, stub, queryP2PMsgSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":1}" {
		t.FailNow()
	}

	// 提交拒绝消息
	msgnounce = "nounce2"
	var recvRejectMessageArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("rejectP2PMessage"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("defaa13361897229431004f4da2c4d679b3ff53d0c747c47d474555b15cd6f66"),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
		[]byte("1"),
	}

	result = InvokeChaincode(t, stub, recvRejectMessageArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	//  接收消息后，序列号应该加1
	result = InvokeChaincode(t, stub, queryP2PMsgSeqArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":2}" {
		t.FailNow()
	}

	//  查询无关序列的序列号
	var queryP2PMsgSeqArgs2 = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("queryRecvP2PMsgSeq"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1efaa13361897229431004f4da2c4d679b3ff53d0c747c47d474555b15cd6f66"),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
	}
	result = InvokeChaincode(t, stub, queryP2PMsgSeqArgs2, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":0}" {
		t.FailNow()
	}

	//  查询无关序列的序列号
	var setP2PMsgSeqArgs2 = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("setRecvP2PMsgSeq"),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1efaa13361897229431004f4da2c4d679b3ff53d0c747c47d474555b15cd6f66"),
		[]byte(hex.EncodeToString(bizcc_name_hash[:])),
		[]byte("66"),
	}
	result = InvokeChaincode(t, stub, setP2PMsgSeqArgs2, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":66}" {
		t.FailNow()
	}

	result = InvokeChaincode(t, stub, queryP2PMsgSeqArgs2, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("queryP2PMsgSeqArgs seq no:%s\n\n", result.Payload)
	if string(result.Payload) != "{\"result\":66}" {
		t.FailNow()
	}

	//  查询最新消息
	var getLastMsgArgs = [][]byte{
		[]byte("getLastMsg"),
	}
	result = InvokeChaincode(t, stubbiz, getLastMsgArgs, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	fmt.Printf("getLastMsg:%s\n\n", result.Payload)

	// 发送无序消息
	msgnounce = "nounce_unordered_1"
	var sendUnorderedMessageArgs = [][]byte{
		[]byte("testSendUnorderedMessage"),
		[]byte(crosscc_name),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
		[]byte("hello world from fabric"),
		[]byte(msgnounce),
	}

	result = InvokeChaincode(t, stubbiz, sendUnorderedMessageArgs, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	msgnounce = "nounce_unordered_1"
	var sendUnorderedMessageArgsMulti = [][]byte{
		[]byte("testSendUnorderedMessageMulti"),
		[]byte(crosscc_name),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
		[]byte("hello world from fabric"),
		[]byte(msgnounce),
	}

	result = InvokeChaincode(t, stubbiz, sendUnorderedMessageArgsMulti, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	var sendBatchUnorderedMessageArgs = [][]byte{
		[]byte("testSendBatchUnorderedMessage"),
		[]byte(crosscc_name),
		[]byte(MYCHAIN_DOMAIN),
		[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
		[]byte("hello world from fabric 1"),
		[]byte("hello world from fabric 2"),
		[]byte("hello world from fabric 3"),
	}

	result = InvokeChaincode(t, stubbiz, sendBatchUnorderedMessageArgs, &bizcc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
}

func TestParseAMandP2PUnorderedMessage(t *testing.T) {
	//msgnounce = "nounce_unordered_1"
	//var sendUnorderedMessageArgs = [][]byte{
	//	[]byte("testSendUnorderedMessage"),
	//	[]byte(crosscc_name),
	//	[]byte(MYCHAIN_DOMAIN),
	//	[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
	//	[]byte("hello world from fabric"),
	//	[]byte(msgnounce),
	//}
	// ampkg是上面产生的am消息，从bizcc发送给odats.mychain01027.com的1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba
	am := "00000016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d5e072ba6f646174732e6d79636861696e30313032372e636f6d000000000000ffffffff1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6a000000000000000000000000000000000000000000000000000000000000001768656c6c6f20776f726c642066726f6d2066616272696300000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000eb09b3c59f85ecf36b441b91f25813e9618460768d989c4185a32848b106544e00000001"
	packet, _ := hex.DecodeString(am)
	id, p2pmsg, re := oraclelogic.TestRecvAuthMessage(packet)
	if id == nil || p2pmsg == nil || re.Status != shim.OK {
		t.FailNow()
	}

	sender := sha256.Sum256([]byte("bizcc"))
	if !oraclelogic.IsSameByte32(oraclelogic.CopySliceToByte32(id), sender) {
		t.FailNow()
	}

	destDomain, content, receiver, seq_no, ret2 := oraclelogic.TestParseP2PMessage(p2pmsg)
	if ret2.Status != shim.OK {
		t.FailNow()
	}

	if string(destDomain) != MYCHAIN_DOMAIN {
		t.FailNow()
	}

	if string(content) != "hello world from fabric" {
		t.FailNow()
	}

	recv, _ := hex.DecodeString("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba")
	if !oraclelogic.IsSameByte32(oraclelogic.CopySliceToByte32(recv), receiver) {
		t.FailNow()
	}

	// 序号为K_UNORDERED_MSG_SEQ
	if seq_no != oraclelogic.K_UNORDERED_MSG_SEQ {
		t.FailNow()
	}
}

func TestParseAMandP2POrderedMessage(t *testing.T) {
	//msgnounce = "nounce_unordered_1"
	//var sendUnorderedMessageArgs = [][]byte{
	//	[]byte("testSendMessage"),
	//	[]byte(crosscc_name),
	//	[]byte(MYCHAIN_DOMAIN),
	//	[]byte("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba"),
	//	[]byte("hello world from fabric"),
	//	[]byte(msgnounce),
	//}
	// ampkg是上面产生的am消息，从bizcc发送给odats.mychain01027.com的1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba
	am := "00000016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d5e072ba6f646174732e6d79636861696e30313032372e636f6d000000000000000000011e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6a000000000000000000000000000000000000000000000000000000000000001768656c6c6f20776f726c642066726f6d2066616272696300000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000eb09b3c59f85ecf36b441b91f25813e9618460768d989c4185a32848b106544e00000001"
	packet, _ := hex.DecodeString(am)
	id, p2pmsg, re := oraclelogic.TestRecvAuthMessage(packet)
	if id == nil || p2pmsg == nil || re.Status != shim.OK {
		t.FailNow()
	}

	sender := sha256.Sum256([]byte("bizcc"))
	if !oraclelogic.IsSameByte32(oraclelogic.CopySliceToByte32(id), sender) {
		t.FailNow()
	}

	destDomain, content, receiver, seq_no, ret2 := oraclelogic.TestParseP2PMessage(p2pmsg)
	if ret2.Status != shim.OK {
		t.FailNow()
	}

	if string(destDomain) != MYCHAIN_DOMAIN {
		t.FailNow()
	}

	if string(content) != "hello world from fabric" {
		t.FailNow()
	}

	recv, _ := hex.DecodeString("1e3c241e99e85c00a07169766be72199cfeaaf33f483bd18a307cb6ad5e072ba")
	if !oraclelogic.IsSameByte32(oraclelogic.CopySliceToByte32(recv), receiver) {
		t.FailNow()
	}

	// 序号为1
	if seq_no != 1 {
		t.FailNow()
	}
}

func Test_CallbackBizChaincode(t *testing.T) {
	crosscc := new(CrossChain)
	stub := shimtest.NewMockStub("crosschain", crosscc)

	bizcc_name := "bizcc"
	crosscc_name := "crosscc"

	var crosscc_sp pb.SignedProposal
	MockSignedProposal(crosscc_name, &crosscc_sp)
	var bizcc_sp pb.SignedProposal
	MockSignedProposal(bizcc_name, &bizcc_sp)

	bizcc := new(CrossChainTest)
	stubbiz := shimtest.NewMockStub(bizcc_name, bizcc)

	stub.MockPeerChaincode(bizcc_name, stubbiz, "")
	stubbiz.MockPeerChaincode(crosscc_name, stub, "")

	cert := "-----BEGIN CERTIFICATE-----\nMIICjzCCAjWgAwIBAgIUVHR3Y4gykapStwdAEwY8POZJyYwwCgYIKoZIzj0EAwIwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTkwNjE3MDk1MzAwWhcNMjAwNjE2MDk1ODAwWjBCMTAwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMBIGA1UECxMLZGVwYXJ0bWVudDExDjAMBgNVBAMTBXVzZXIxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyk8ZD3Pa3QkfqRkRXhqINLkFB4gO05iDk6IiUr8YxkRf7CFyZ/4Q7yfxJuGtj7ja0v62HDjKjTk4GtByRVo0BKOB1zCB1DAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU4Mo/HEjC/z2gRpa0YQUu6s66bzYwKwYDVR0jBCQwIoAgscw0w/LQz4B4aPo6GhGHTSBBMIRf2O6zbS5ZRNd2dxwwaAYIKgMEBQYHCAEEXHsiYXR0cnMiOnsiaGYuQWZmaWxpYXRpb24iOiJvcmcxLmRlcGFydG1lbnQxIiwiaGYuRW5yb2xsbWVudElEIjoidXNlcjEiLCJoZi5UeXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQChD3K9EDlkRmKJPWS/tvQUKl32HHsyh1ESEh9Zc4BAoAIgNaBr4XHaLc2uQZJ+S/EBvztOczag2hekEtqJU21hpuk=\n-----END CERTIFICATE-----\n"
	var creator msp.SerializedIdentity
	creator.IdBytes = []byte(cert)
	creator.Mspid = ""
	bt, _ := proto.Marshal(&creator)
	stub.Creator = bt

	doInit(t, stub, [][]byte{[]byte("Init")}, &crosscc_sp)

	var setAdminArgs = [][]byte{
		[]byte("setAdmin"),
		[]byte(cert),
	}
	result := InvokeChaincode(t, stub, setAdminArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}
	// 注册chaincode反查表
	var registerChaincodeArgs = [][]byte{
		[]byte("oracleAdminManage"),
		[]byte("registerSha256Invert"),
		[]byte(bizcc_name),
	}
	result = InvokeChaincode(t, stub, registerChaincodeArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	// 开始测试
	srcDomain := "from.com"
	sender := sha256.Sum256([]byte("mocksender"))
	receiver := sha256.Sum256([]byte("bizcc"))
	content_ordered := []byte("hello world ordered")
	content_unordered := []byte("hello world unordered")

	var msgs oraclelogic.RecvAuthMessages
	// 追加ordered消息
	msg := oraclelogic.RecvAuthMessage{srcDomain, sender,
		content_ordered, receiver, oraclelogic.K_MSG_TYPE_ORDERED}
	messages := append(msgs.Message, msg)
	msgs.Message = messages

	// 追加unordered消息
	msg = oraclelogic.RecvAuthMessage{srcDomain, sender,
		content_unordered, receiver, oraclelogic.K_MSG_TYPE_UNORDERED}
	messages = append(msgs.Message, msg)
	msgs.Message = messages

	msgsStr, _ := json.Marshal(msgs)

	var testInvokeBizArgs = [][]byte{
		[]byte("testCallbackBizChaincode"),
		[]byte(msgsStr),
	}
	result = InvokeChaincode(t, stub, testInvokeBizArgs, &crosscc_sp)
	if shim.OK != result.Status { // setProtocol
		t.FailNow()
	}

	//  查询最新有序消息
	var getLastMsgArgs = [][]byte{
		[]byte("getLastMsg"),
	}
	result = InvokeChaincode(t, stubbiz, getLastMsgArgs, &bizcc_sp)
	if shim.OK != result.Status || !strings.Contains(string(result.Payload), string(content_ordered)) { // setProtocol
		t.FailNow()
	}
	fmt.Printf("getLastMsg:%s\n\n", result.Payload)

	//  查询最新无序消息
	var getLastUnorderedMsgArgs = [][]byte{
		[]byte("getLastUnorderedMsg"),
	}
	result = InvokeChaincode(t, stubbiz, getLastUnorderedMsgArgs, &bizcc_sp)
	if shim.OK != result.Status || !strings.Contains(string(result.Payload), string(content_unordered)) { // setProtocol
		t.FailNow()
	}
	fmt.Printf("getLastUnorderedMsg:%s\n\n", result.Payload)

}

//func Test_InitMarshal(t *testing.T) {
//	a := oraclelogic.OracleEvent{}
//	s := oraclelogic.AuthMessage{}
//	s.Content = "Content"
//	s.Collection = "Collection"
//
//	a.Message = &s
//
//	b, _ := json.Marshal(a)
//	for i := uint32(0); i < 10000 ; i++ {
//		str, _ := json.Marshal(a)
//		if string(b) != string(str) {
//			t.FailNow()
//		}
//	}
//}

//func Test_InitBiz2(t *testing.T) {
//	bz := new(CrossChain)
//	stub := shim.NewMockStub("crosschain", bz)
//
//	cert := "-----BEGIN CERTIFICATE-----\nMIICjzCCAjWgAwIBAgIUVHR3Y4gykapStwdAEwY8POZJyYwwCgYIKoZIzj0EAwIwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTkwNjE3MDk1MzAwWhcNMjAwNjE2MDk1ODAwWjBCMTAwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMBIGA1UECxMLZGVwYXJ0bWVudDExDjAMBgNVBAMTBXVzZXIxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyk8ZD3Pa3QkfqRkRXhqINLkFB4gO05iDk6IiUr8YxkRf7CFyZ/4Q7yfxJuGtj7ja0v62HDjKjTk4GtByRVo0BKOB1zCB1DAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU4Mo/HEjC/z2gRpa0YQUu6s66bzYwKwYDVR0jBCQwIoAgscw0w/LQz4B4aPo6GhGHTSBBMIRf2O6zbS5ZRNd2dxwwaAYIKgMEBQYHCAEEXHsiYXR0cnMiOnsiaGYuQWZmaWxpYXRpb24iOiJvcmcxLmRlcGFydG1lbnQxIiwiaGYuRW5yb2xsbWVudElEIjoidXNlcjEiLCJoZi5UeXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQChD3K9EDlkRmKJPWS/tvQUKl32HHsyh1ESEh9Zc4BAoAIgNaBr4XHaLc2uQZJ+S/EBvztOczag2hekEtqJU21hpuk=\n-----END CERTIFICATE-----\n"
//
//
//	doInit(t, stub, [][]byte{[]byte("Init"), []byte(cert)})
//
//	var hasOracleArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("hasOracle"),
//		[]byte("TEEClusterOracle_01"), // oracle biz id
//	}
//
//	result := InvokeChaincode(t, stub, hasOracleArgs)
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var addSGXOracleClusterArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("addSGXOracleCluster"),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("6666"),
//		[]byte("dev ias"),
//		[]byte("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqXot4OZuphR8nudFrAFiaGxxkgma/Es/BA+tbeCTUR106AL1ENcWA4FX3K+E9BBL0/7X5rj5nIgX/R/1ubhkKWw9gfqPG3KeAtIdcv/uTO1yXv50vqaPvE1CRChvzdS/ZEBqQ5oVvLTPZ3VEicQjlytKgN9cLnxbwtuvLUK7eyRPfJW/ksddOzP8VBBniolYnRCD2jrMRZ8nBM2ZWYwnXnwYeOAHV+W9tOhAImwRwKF/95yAsVwd21ryHMJBcGH70qLagZ7Ttyt++qO/6+KAXJuKwZqjRlEtSEz8gZQeFfVYgcwSfo96oSMAzVr7V0L6HSDLRnpb6xxmbPdqNol4tQIDAQAB"),
//		[]byte("-----BEGIN%20CERTIFICATE-----%0AMIIEoTCCAwmgAwIBAgIJANEHdl0yo7CWMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV%0ABAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV%0ABAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0%0AYXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwHhcNMTYxMTIyMDkzNjU4WhcNMjYxMTIw%0AMDkzNjU4WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1Nh%0AbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEtMCsGA1UEAwwk%0ASW50ZWwgU0dYIEF0dGVzdGF0aW9uIFJlcG9ydCBTaWduaW5nMIIBIjANBgkqhkiG%0A9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqXot4OZuphR8nudFrAFiaGxxkgma/Es/BA%2Bt%0AbeCTUR106AL1ENcWA4FX3K%2BE9BBL0/7X5rj5nIgX/R/1ubhkKWw9gfqPG3KeAtId%0Acv/uTO1yXv50vqaPvE1CRChvzdS/ZEBqQ5oVvLTPZ3VEicQjlytKgN9cLnxbwtuv%0ALUK7eyRPfJW/ksddOzP8VBBniolYnRCD2jrMRZ8nBM2ZWYwnXnwYeOAHV%2BW9tOhA%0AImwRwKF/95yAsVwd21ryHMJBcGH70qLagZ7Ttyt%2B%2BqO/6%2BKAXJuKwZqjRlEtSEz8%0AgZQeFfVYgcwSfo96oSMAzVr7V0L6HSDLRnpb6xxmbPdqNol4tQIDAQABo4GkMIGh%0AMB8GA1UdIwQYMBaAFHhDe3amfrzQr35CN%2Bs1fDuHAVE8MA4GA1UdDwEB/wQEAwIG%0AwDAMBgNVHRMBAf8EAjAAMGAGA1UdHwRZMFcwVaBToFGGT2h0dHA6Ly90cnVzdGVk%0Ac2VydmljZXMuaW50ZWwuY29tL2NvbnRlbnQvQ1JML1NHWC9BdHRlc3RhdGlvblJl%0AcG9ydFNpZ25pbmdDQS5jcmwwDQYJKoZIhvcNAQELBQADggGBAGcIthtcK9IVRz4r%0ARq%2BZKE%2B7k50/OxUsmW8aavOzKb0iCx07YQ9rzi5nU73tME2yGRLzhSViFs/LpFa9%0AlpQL6JL1aQwmDR74TxYGBAIi5f4I5TJoCCEqRHz91kpG6Uvyn2tLmnIdJbPE4vYv%0AWLrtXXfFBSSPD4Afn7%2B3/XUggAlc7oCTizOfbbtOFlYA4g5KcYgS1J2ZAeMQqbUd%0AZseZCcaZZZn65tdqee8UXZlDvx0%2BNdO0LR%2B5pFy%2BjuM0wWbu59MvzcmTXbjsi7HY%0A6zd53Yq5K244fwFHRQ8eOB0IWB%2B4PfM7FeAApZvlfqlKOlLcZL2uyVmzRkyR5yW7%0A2uo9mehX44CiPJ2fse9Y6eQtcfEhMPkmHXI01sN%2BKwPbpA39%2BxOsStjhP9N1Y1a2%0AtQAVo%2ByVgLgV2Hws73Fc0o3wC78qPEA%2Bv2aRs/Be3ZFDgDyghc/1fgU%2B7C%2BP6kbq%0Ad4poyb6IW8KCJbxfMJvkordNOgOUUxndPHEi/tb/U7uLjLOgPA%3D%3D%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIFSzCCA7OgAwIBAgIJANEHdl0yo7CUMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV%0ABAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV%0ABAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0%0AYXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwIBcNMTYxMTE0MTUzNzMxWhgPMjA0OTEy%0AMzEyMzU5NTlaMH4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwL%0AU2FudGEgQ2xhcmExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQD%0ADCdJbnRlbCBTR1ggQXR0ZXN0YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwggGiMA0G%0ACSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCfPGR%2BtXc8u1EtJzLA10Feu1Wg%2Bp7e%0ALmSRmeaCHbkQ1TF3Nwl3RmpqXkeGzNLd69QUnWovYyVSndEMyYc3sHecGgfinEeh%0ArgBJSEdsSJ9FpaFdesjsxqzGRa20PYdnnfWcCTvFoulpbFR4VBuXnnVLVzkUvlXT%0AL/TAnd8nIZk0zZkFJ7P5LtePvykkar7LcSQO85wtcQe0R1Raf/sQ6wYKaKmFgCGe%0ANpEJUmg4ktal4qgIAxk%2BQHUxQE42sxViN5mqglB0QJdUot/o9a/V/mMeH8KvOAiQ%0AbyinkNndn%2BBgk5sSV5DFgF0DffVqmVMblt5p3jPtImzBIH0QQrXJq39AT8cRwP5H%0AafuVeLHcDsRp6hol4P%2BZFIhu8mmbI1u0hH3W/0C2BuYXB5PC%2B5izFFh/nP0lc2Lf%0A6rELO9LZdnOhpL1ExFOq9H/B8tPQ84T3Sgb4nAifDabNt/zu6MmCGo5U8lwEFtGM%0ARoOaX4AS%2B909x00lYnmtwsDVWv9vBiJCXRsCAwEAAaOByTCBxjBgBgNVHR8EWTBX%0AMFWgU6BRhk9odHRwOi8vdHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9jb250ZW50%0AL0NSTC9TR1gvQXR0ZXN0YXRpb25SZXBvcnRTaWduaW5nQ0EuY3JsMB0GA1UdDgQW%0ABBR4Q3t2pn680K9%2BQjfrNXw7hwFRPDAfBgNVHSMEGDAWgBR4Q3t2pn680K9%2BQjfr%0ANXw7hwFRPDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkq%0AhkiG9w0BAQsFAAOCAYEAeF8tYMXICvQqeXYQITkV2oLJsp6J4JAqJabHWxYJHGir%0AIEqucRiJSSx%2BHjIJEUVaj8E0QjEud6Y5lNmXlcjqRXaCPOqK0eGRz6hi%2BripMtPZ%0AsFNaBwLQVV905SDjAzDzNIDnrcnXyB4gcDFCvwDFKKgLRjOB/WAqgscDUoGq5ZVi%0AzLUzTqiQPmULAQaB9c6Oti6snEFJiCQ67JLyW/E83/frzCmO5Ru6WjU4tmsmy8Ra%0AUd4APK0wZTGtfPXU7w%2BIBdG5Ez0kE1qzxGQaL4gINJ1zMyleDnbuS8UicjJijvqA%0A152Sq049ESDz%2B1rRGc2NVEqh1KaGXmtXvqxXcTB%2BLjy5Bw2ke0v8iGngFBPqCTVB%0A3op5KBG3RjbF6RRSzwzuWfL7QErNC8WEy5yDVARzTA5%2BxmBc388v9Dm21HGfcC8O%0ADD%2BgT9sSpssq0ascmvH49MOgjt1yoysLtdCtJW/9FZpoOypaHx0R%2BmJTLwPXVMrv%0ADaVzWh5aiEx%2BidkSGMnX%0A-----END%20CERTIFICATE-----%0A"),
//		[]byte("b5eaa3bba788ec2b8535286fa06254b434c84f48bf8f7076ff5485c11809921c"),
//		[]byte("false"),
//		[]byte(""),
//	}
//
//	result = InvokeChaincode(t, stub, addSGXOracleClusterArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//
//	var queryOracleArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("queryOracleBasicInfo"),
//		[]byte("TEEClusterOracle_01"),
//	}
//
//	result = InvokeChaincode(t, stub, queryOracleArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//	info := chaincodepb.OracleBasicInfo{}
//	_ = json.Unmarshal(result.Payload, &info)
//	if info.IfExists != true {
//		t.FailNow()
//	}
//
//
//	var registerSGXOracleNodeArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("registerSGXOracleNode"),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("TEEClusterEntity_01"),
//		[]byte("TEEClusterEntity_01"),
//		[]byte("TEEClusterEntity_01"),
//		[]byte(""),
//	}
//
//	result = InvokeChaincode(t, stub, registerSGXOracleNodeArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var registerUDNSDomainArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("registerUDNSDomain"),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("TEEClusterEntity_01"),
//		[]byte("9fc4d562.mychain010.com"),
//		[]byte("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"),
//	}
//
//	result = InvokeChaincode(t, stub,  registerUDNSDomainArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var hasUDNSDomainArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("hasUDNSDomain"),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("TEEClusterEntity_01"),
//		[]byte("9fc4d562.mychain010.com"),
//	}
//
//	result = InvokeChaincode(t, stub,  hasUDNSDomainArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var addOracleServicArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("addOracleService"),
//		[]byte(ORACLE_SERVICE_ID),
//		[]byte(ORACLE_SERVICE_ID),
//		[]byte(ORACLE_SERVICE_ID),
//		[]byte("TEEClusterOracle_01"),
//		[]byte("UDAG"),
//		[]byte("BLACKLIST"),
//		[]byte("OPEN"),
//	}
//
//	result = InvokeChaincode(t, stub,  addOracleServicArgs)
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var sendMessageArgs = [][]byte{
//		[]byte("sendMessage"),
//	}
//
//	result = InvokeChaincode(t, stub,  sendMessageArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var setMyChainDomainAMClientArgs = [][]byte{
//		[]byte("oracleAdminManage"),
//		[]byte("setMyChainDomainAMClient"),
//		[]byte("9fc4d562.mychain010.com"),
//		[]byte("8781eea0b8cae59ce8e3c9dfbaf94ed4d744199928063f99d21e30103cf5d699"),
//		[]byte(""),
//	}
//
//	result = InvokeChaincode(t, stub,  setMyChainDomainAMClientArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//	var recvMessageArgs = [][]byte{
//		[]byte("recvMessage"),
//		[]byte(ORACLE_SERVICE_ID),
//		[]byte("AADeBwAABADWAAAAAADQAAAAAQBAAAAAN2VhNDJkZTM3NTZjNTQxZmViMmZmYjZlNTg4Y2NhZTg0YzY2YTJhZDljZGM1YTBiMzEzMjBlYmY2MTJlNTZiNQIAegAAAHVkYWcgdWRhZzovLzlmYzRkNTYyLm15Y2hhaW4wMTAuY29tL2YwMWE1MDEzMjIwNzhhN2YxYjQ4ZTEzNTdiZTdmOThmOTVlNDdhNDQzNWY3N2MyNGI5YmI0YjAwNzliNjcyNDVlN2QxYmNhZTdiZi9SZWNlaXB0cy8wAwAEAAAAAAAAAAcABAAAAAAAAAAIAAcAAABTVUNDRVNTBQC5BAAAAACzBAAAAACtBAAAeyJSZXN1bHQiOjAsIkdhc1VzZWQiOjQ2NzYyLCJPdXRwdXQiOiIiLCJPZmZzZXQiOjAsIkxvZ0VudHJpZXMiOlt7IkZyb20iOiI3Y2EwMTcyODUwYzUzMDY1MDQ2YmVlYWMzY2RlYzNmZTkyMTUzMmRiZmViZGY3ZWZlYjVjMzNkMDE5Y2Q3Nzk4IiwiVG8iOiJmMGQ3YmFhNzA3NzgyZmFkOTdjZTFhNDM4NDI0MjRjNDdiOGZjYzU0OTM3NGVlYjI2MzYzNjNkNTQ3YTE5MzkxIiwiVG9waWNzIjpbImNhbGxfY29udHJhY3QiXSwiTG9nRGF0YSI6IiJ9LHsiRnJvbSI6IjlhZmZlOTZkMWI5MDYxYzFlM2U4MjE0MjUwMWE1NWE1YzQ4OGM0ZmUwYmFiNGFhMWY2MjUzZDZlYjBmZTYwNjEiLCJUbyI6Ijg3ODFlZWEwYjhjYWU1OWNlOGUzYzlkZmJhZjk0ZWQ0ZDc0NDE5OTkyODA2M2Y5OWQyMWUzMDEwM2NmNWQ2OTkiLCJUb3BpY3MiOlsiNzliNzUxNmIxYjdhNmEzOWZiNGI3YjIyZTg2NjdjZDM3NDRlNWMyNzQyNTI5MmY4YTlmNDlkMTA0MmMwYzY1MSJdLCJMb2dEYXRhIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDgwMDAwMDAwZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNzQ2NTczNzQyZTY2NjE2MjcyNjk2MzJlNjM2ZjZkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjY4NjkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE0MDAwMDAwMDBmMGQ3YmFhNzA3NzgyZmFkOTdjZTFhNDM4NDI0MjRjNDdiOGZjYzU0OTM3NGVlYjI2MzYzNjNkNTQ3YTE5MzkxMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifV19AAAgAAAAzOOP/h0DBGRcO7m2CTd89hpzQWnSqiSEl6Dy6Yx/AQ0GAAACAAAdO3CEroIodfF8om4R9KRhYQLD6U9AewksC5Fblj28n51AS4QymlFAFrh7IrtaJktd3WEd9nh+jwBJvoN19ANaK7spkrjiVW96nFkmiY8QZ7mrzbf1YT3iKJSsUoMSWoPalj+OnHoNVdiw5JQaW8/rSK1fhdEYlcoNAju0+SPI396AfQC5SHmpahGZpLTjIbb1d9zEJU6vr02ycoUpZMzATFn4/lh8oko5h5kYNP6b/Rgx+2I0BqKkjXHI7ClN8CwtDhTShqBOHOR742/OjCKc+oJB5/+kiIgMfhKJuKgNyIyDHz6y+4br2CkMiREzsQ//WhZ14T9rF9GHiMlOkgxFt7ibf+lITbma0b0EXxXb/ayFXWchr8lCy4SvFDoGTcr6CiRxVdYs8HDYN1cRAfEr2t7C5wQ69iYqpWWB2yEMz7rOUM4z3r+z+Ctx9taIod6e069Ornm7rRFjBuzQXSUHohObhyCzjnp4LjM9HJOMOZ5+Zb/5Exuy4fHBGv6v/Sj92mIneaQ/oEP2NS57MF8Wq8sddJqUC7YUK5Ecmi6gALXeChHxH24ALlJHWzSKLDlSoAW8QX2Kw5PFhCM7OkdbKZSKMIY7zaAsCEVFNtRFpD7fdUpGHJoEBqNwqgM6FNVGM0WbjA9ndh0GYfg4UaDVSunqtH8PhU88KVSD0A/iHw=="),
//		[]byte("[1]"),
//		[]byte(""),
//	}
//
//	result = InvokeChaincode(t, stub,  recvMessageArgs )
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//
//}
//
//
//func Test_InitBiz3(t *testing.T) {
//	bz := new(CrossChain)
//	stub := shim.NewMockStub("crosschain", bz)
//
//	cert := "-----BEGIN CERTIFICATE-----\nMIICjzCCAjWgAwIBAgIUVHR3Y4gykapStwdAEwY8POZJyYwwCgYIKoZIzj0EAwIwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTkwNjE3MDk1MzAwWhcNMjAwNjE2MDk1ODAwWjBCMTAwDQYDVQQLEwZjbGllbnQwCwYDVQQLEwRvcmcxMBIGA1UECxMLZGVwYXJ0bWVudDExDjAMBgNVBAMTBXVzZXIxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyk8ZD3Pa3QkfqRkRXhqINLkFB4gO05iDk6IiUr8YxkRf7CFyZ/4Q7yfxJuGtj7ja0v62HDjKjTk4GtByRVo0BKOB1zCB1DAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU4Mo/HEjC/z2gRpa0YQUu6s66bzYwKwYDVR0jBCQwIoAgscw0w/LQz4B4aPo6GhGHTSBBMIRf2O6zbS5ZRNd2dxwwaAYIKgMEBQYHCAEEXHsiYXR0cnMiOnsiaGYuQWZmaWxpYXRpb24iOiJvcmcxLmRlcGFydG1lbnQxIiwiaGYuRW5yb2xsbWVudElEIjoidXNlcjEiLCJoZi5UeXBlIjoiY2xpZW50In19MAoGCCqGSM49BAMCA0gAMEUCIQChD3K9EDlkRmKJPWS/tvQUKl32HHsyh1ESEh9Zc4BAoAIgNaBr4XHaLc2uQZJ+S/EBvztOczag2hekEtqJU21hpuk=\n-----END CERTIFICATE-----\n"
//
//	doInit(t, stub, [][]byte{[]byte("Init"), []byte(cert)})
//
//	var hasOracleArgs = [][]byte{
//		[]byte("recvMessage"),
//		[]byte(ORACLE_SERVICE_ID),
//		[]byte("000000035b315d000007e40000de0700000400d60000000000d00000000100400000003765613432646533373536633534316665623266666236653538386363616538346336366132616439636463356130623331333230656266363132653536623502007a0000007564616720756461673a2f2f39666334643536322e6d79636861696e3031302e636f6d2f6630316135303133323230393234386563663337363761336432386337393937303838343862333632653335626239623233303562306538353532663562376261643531366665393130382f52656365697074732f300300040000000000000007000400000000000000080007000000535543434553530500b90400000000b30400000000ad0400007b22526573756c74223a302c2247617355736564223a34363736322c224f7574707574223a22222c224f6666736574223a302c224c6f67456e7472696573223a5b7b2246726f6d223a2237636130313732383530633533303635303436626565616333636465633366653932313533326462666562646637656665623563333364303139636437373938222c22546f223a2239653932626332613264346562326439326237326638303061343533623337393336366331303532383831393265343136323665343261393538636237663630222c22546f70696373223a5b2263616c6c5f636f6e7472616374225d2c224c6f6744617461223a22227d2c7b2246726f6d223a2236653238656233613532646266396438656161623539343532656464353961386235316633326534363266303832343030653030336664643035396439646536222c22546f223a2262323835326433396462643866386466363363323930383932666433303436633262666532376638343139646530333039346335653937343265303864366462222c22546f70696373223a5b2237396237353136623162376136613339666234623762323265383636376364333734346535633237343235323932663861396634396431303432633063363531225d2c224c6f6744617461223ad5d7d000020000000c88ca681ca6dc46927c4f8afa0bd51cb025c29ee16fc8061b48e5ed7dc8f2b4f06000002000010b9a1995ddc1bd3bd2fec2aca839e59372941778b083108364d2d31af4242bcbef0461af7424ffff2ed69b9ef0ded504d7b614707e365ba07359ebd5e426adeafab4e882720f9484b85b3f761bb01a8de54899480b261ca81d58125e6a0a2375c9e949eb570ad5c42d172cea11652c91d75f46f9db1b4991b5156154e6816dd915a2e9dd36953090e55a4e042a3694c2f285e999e051c1846409cb7273e1c064733b510c6bc52ddd590de0129b0c36391705f72cc84de44282e3e305f870b8773b01e256773a3bfba6343f892e2838fc50b9570936fd4adcf127db08da9d67bdcf06975d25924b462bf132a6a7e28403f774ab9bb919686b25d365c0927d223fa4005bdbb32ee0b3076ace342418a4648bcb170b5b20617ae5bef8208d136981534a7f2f1c9cf2d8286dabc12dcc39e864047442ba3ef96cecd8e14d91b2e87ac89e56219cc15bf3cf4c5b723584f44f804acfcc7de4dfd06f33f2af5ba36324731b03b64cf474dc0e5dec727f30356000019b7b565ab3477eb82a7f91cfd5836cb2566490d727b9c3e40a3c1a4a9ede4d8f2375c135b30d80eb5445114a2075318dbca0ee33e7c431196c5dbc569aaf61d1279906c99c03d1613d40622e93b405f8fc2e0ba89b7896c76c0550c9d19c8a57f0f601ec13fa01b04c860b8962b689e5acecf5627a5371e1aa01cf3def7aaad627a82006a26aece98862f6ae290"),
//		[]byte(""),
//	}
//
//	result := InvokeChaincode(t, stub, hasOracleArgs)
//	if shim.OK != result.Status { // setProtocol
//		t.FailNow()
//	}
//
//}
