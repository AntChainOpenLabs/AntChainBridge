package com.alipay.antchain.bridge.plugins.fiscobcos.abi;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.eventsub.EventSubCallback;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AuthMsg extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5b600060208251611ea2919061288b565b905060208251611eb2919061289f565b15611ec55780611ec1816127e6565b9150505b80611ecf816127e6565b9150610c8190506020826128b3565b909101600319810180519290915252565b60008160088114611ffc5760108114612005576018811461200e5760208114612017576028811461202057603081146120295760388114612032576040811461203b5760488114612044576050811461204d5760588114612056576060811461205f57606881146120685760708114612071576078811461207a5760808114612083576088811461208c5760908114612095576098811461209e5760a081146120a75760a881146120b05760b081146120b95760b881146120c25760c081146120cb5760c881146120d45760d081146120dd5760d881146120e65760e081146120ef5760e881146120f85760f081146121015760f8811461210a5761010081146121135760209150612118565b60019150612118565b60029150612118565b60039150612118565b60049150612118565b60059150612118565b60069150612118565b60079150612118565b60089150612118565b60099150612118565b600a9150612118565b600b9150612118565b600c9150612118565b600d9150612118565b600e9150612118565b600f9150612118565b60109150612118565b60119150612118565b60129150612118565b60139150612118565b60149150612118565b60159150612118565b60169150612118565b60179150612118565b60189150612118565b60199150612118565b601a9150612118565b601b9150612118565b601c9150612118565b601d9150612118565b601e9150612118565b601f9150612118565b602091505b50919050565b60006020835161212e919061288b565b9050600060208451612140919061289f565b11156121545780612150816127e6565b9150505b60010160005b818110156104af576020810284015183860152601f199094019360010161215a565b8151612189848284611ede565b61219460048561285e565b93508063ffffffff168410156122075760405162461bcd60e51b815260206004820152603260248201527f7661724279746573546f42797465733a206f6666736574206c657373207468616044820152710dc40e8d0ca40d2dce0eae840d8cadccee8d60731b6064820152608401610298565b61221763ffffffff82168561285e565b935080158015612226576104af565b8483018051601f84168015602002818801018581018215602002838601015b8183101561225d578251815260209283019201612245565b5050509152505050505050565b825160609061227983856127b8565b111561228457600080fd5b60008267ffffffffffffffff81111561229f5761229f61258f565b6040519080825280601f01601f1916602001820160405280156122c9576020820181803683370190505b509050602080820190868601016122e182828761245a565b509095945050505050565b8082015160208104600101601f821615612304576001015b6020029392505050565b81830151600060208204600101601f831615612328576001015b5b8082101561234d578585015160208302850152602086039550600182019150612329565b505050505050565b606060006123638484015190565b63ffffffff16905061237660048561285e565b9350838111156123e15760405162461bcd60e51b815260206004820152603060248201527f6279746573546f56617242797465733a206f6666736574206c6573732074686160448201526f6e206c656e677468206f6620626f647960801b6064820152608401610298565b6123eb818561285e565b935060608115801561240857604051915060208201604052611812565b6040519150601f8316801560200281840101848101888315602002848a0101015b81831015612441578051835260209283019201612429565b5050848452601f01601f19166040525050949350505050565b6020811061249257815183526124716020846127b8565b925061247e6020836127b8565b915061248b60208261285e565b905061245a565b8061249c57505050565b600060016124ab83602061285e565b6124b7906101006129b6565b6124c1919061285e565b925184518416931916929092179092525050565b6040805160a080820183526060608080840182815284528451928301855282820182815290830191909152815260006020828101829052938201529091820190815260006020820152606060409091015290565b803563ffffffff8116811461253d57600080fd5b919050565b60006020828403121561255457600080fd5b610c9382612529565b80356001600160a01b038116811461253d57600080fd5b60006020828403121561258657600080fd5b610c938261255d565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126125b657600080fd5b813567ffffffffffffffff808211156125d1576125d161258f565b604051601f8301601f19908116603f011681019082821181831017156125f9576125f961258f565b8160405283815286602085880101111561261257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561264457600080fd5b813567ffffffffffffffff81111561265b57600080fd5b610d3b848285016125a5565b6000806040838503121561267a57600080fd5b6126838361255d565b9150602083013567ffffffffffffffff81111561269f57600080fd5b6126ab858286016125a5565b9150509250929050565b600080604083850312156126c857600080fd5b6126d18361255d565b91506126df60208401612529565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000815180845260005b8181101561274357602081850181015186830182015201612727565b81811115612755576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610c93602083018461271d565b604081526000612790604083018561271d565b82810360208401526118db818561271d565b634e487b7160e01b600052601160045260246000fd5b600082198211156127cb576127cb6127a2565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156127fa576127fa6127a2565b5060010190565b606081526000612814606083018661271d565b846020840152828103604084015261282c818561271d565b9695505050505050565b600063ffffffff808316818516808303821115612855576128556127a2565b01949350505050565b600082821015612870576128706127a2565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261289a5761289a612875565b500490565b6000826128ae576128ae612875565b500690565b60008160001904831182151516156128cd576128cd6127a2565b500290565b600181815b8085111561290d5781600019048211156128f3576128f36127a2565b8085161561290057918102915b93841c93908002906128d7565b509250929050565b60008261292457506001610c81565b8161293157506000610c81565b816001811461294757600281146129515761296d565b6001915050610c81565b60ff841115612962576129626127a2565b50506001821b610c81565b5060208310610133831016604e8410600b8410161715612990575081810a610c81565b61299a83836128d2565b80600019048211156129ae576129ae6127a2565b029392505050565b6000610c93838361291556fea26469706673582212207783156a68415b7de766030cb5220a21c16b0e67d1e8aaeb099b91b95ce3e1a364736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","ffffffff93909316928401929092525060608201529392505050565b600060208251611ebc91906128a7565b905060208251611ecc91906128bb565b15611edf5780611edb81612802565b9150505b80611ee981612802565b9150610c9190506020826128cf565b909101600319810180519290915252565b60008160088114612016576010811461201f57601881146120285760208114612031576028811461203a5760308114612043576038811461204c5760408114612055576048811461205e5760508114612067576058811461207057606081146120795760688114612082576070811461208b5760788114612094576080811461209d57608881146120a657609081146120af57609881146120b85760a081146120c15760a881146120ca5760b081146120d35760b881146120dc5760c081146120e55760c881146120ee5760d081146120f75760d881146121005760e081146121095760e881146121125760f0811461211b5760f8811461212457610100811461212d5760209150612132565b60019150612132565b60029150612132565b60039150612132565b60049150612132565b60059150612132565b60069150612132565b60079150612132565b60089150612132565b60099150612132565b600a9150612132565b600b9150612132565b600c9150612132565b600d9150612132565b600e9150612132565b600f9150612132565b60109150612132565b60119150612132565b60129150612132565b60139150612132565b60149150612132565b60159150612132565b60169150612132565b60179150612132565b60189150612132565b60199150612132565b601a9150612132565b601b9150612132565b601c9150612132565b601d9150612132565b601e9150612132565b601f9150612132565b602091505b50919050565b60006020835161214891906128a7565b905060006020845161215a91906128bb565b111561216e578061216a81612802565b9150505b60010160005b818110156104c9576020810284015183860152601f1990940193600101612174565b81516121a3848284611ef8565b6121ae60048561287a565b93508063ffffffff1684101561222257604051636381e58960e11b815260206004820152603260248201527f7661724279746573546f42797465733a206f6666736574206c657373207468616044820152710dc40e8d0ca40d2dce0eae840d8cadccee8d60731b6064820152608401610299565b61223263ffffffff82168561287a565b935080158015612241576104c9565b8483018051601f84168015602002818801018581018215602002838601015b81831015612278578251815260209283019201612260565b5050509152505050505050565b825160609061229483856127d4565b111561229f57600080fd5b60008267ffffffffffffffff8111156122ba576122ba61257c565b6040519080825280601f01601f1916602001820160405280156122e4576020820181803683370190505b509050602080820190868601016122fc828287612476565b509095945050505050565b8082015160208104600101601f82161561231f576001015b6020029392505050565b81830151600060208204600101601f831615612343576001015b5b80821015612368578585015160208302850152602086039550600182019150612344565b505050505050565b6060600061237e8484015190565b63ffffffff16905061239160048561287a565b9350838111156123fd57604051636381e58960e11b815260206004820152603060248201527f6279746573546f56617242797465733a206f6666736574206c6573732074686160448201526f6e206c656e677468206f6620626f647960801b6064820152608401610299565b612407818561287a565b93506060811580156124245760405191506020820160405261182a565b6040519150601f8316801560200281840101848101888315602002848a0101015b8183101561245d578051835260209283019201612445565b5050848452601f01601f19166040525050949350505050565b602081106124ae578151835261248d6020846127d4565b925061249a6020836127d4565b91506124a760208261287a565b9050612476565b806124b857505050565b600060016124c783602061287a565b6124d3906101006129d2565b6124dd919061287a565b925184518416931916929092179092525050565b6040805160a080820183526060608080840182815284528451928301855282820182815290830191909152815260006020828101829052938201529091820190815260006020820152606060409091015290565b80356001600160a01b038116811461255c57600080fd5b919050565b60006020828403121561257357600080fd5b610ca382612545565b63b95aa35560e01b600052604160045260246000fd5b600082601f8301126125a357600080fd5b813567ffffffffffffffff808211156125be576125be61257c565b604051601f8301601f19908116603f011681019082821181831017156125e6576125e661257c565b816040528381528660208588010111156125ff57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561263157600080fd5b813567ffffffffffffffff81111561264857600080fd5b610d4c84828501612592565b803563ffffffff8116811461255c57600080fd5b6000806040838503121561267b57600080fd5b61268483612545565b915061269260208401612654565b90509250929050565b600080604083850312156126ae57600080fd5b6126b783612545565b9150602083013567ffffffffffffffff8111156126d357600080fd5b6126df85828601612592565b9150509250929050565b6000602082840312156126fb57600080fd5b610ca382612654565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000815180845260005b8181101561275f57602081850181015186830182015201612743565b81811115612771576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610ca36020830184612739565b6040815260006127ac6040830185612739565b82810360208401526118f38185612739565b63b95aa35560e01b600052601160045260246000fd5b600082198211156127e7576127e76127be565b500190565b63b95aa35560e01b600052603260045260246000fd5b6000600019821415612816576128166127be565b5060010190565b6060815260006128306060830186612739565b84602084015282810360408401526128488185612739565b9695505050505050565b600063ffffffff808316818516808303821115612871576128716127be565b01949350505050565b60008282101561288c5761288c6127be565b500390565b63b95aa35560e01b600052601260045260246000fd5b6000826128b6576128b6612891565b500490565b6000826128ca576128ca612891565b500690565b60008160001904831182151516156128e9576128e96127be565b500290565b600181815b8085111561292957816000190482111561290f5761290f6127be565b8085161561291c57918102915b93841c93908002906128f3565b509250929050565b60008261294057506001610c91565b8161294d57506000610c91565b8160018114612963576002811461296d57612989565b6001915050610c91565b60ff84111561297e5761297e6127be565b50506001821b610c91565b5060208310610133831016604e8410600b84101617156129ac575081810a610c91565b6129b683836128ee565b80600019048211156129ca576129ca6127be565b029392505050565b6000610ca3838361293156fea2646970667358221220619f7551c6a7e1874997b8c0bddfebf111f1b0a390e190c6469984796261299564736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"SendAuthMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"name\":\"SubProtocolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sendDomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rawMsg\",\"type\":\"bytes\"}],\"name\":\"recvAuthMessage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"protocolRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ptcHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"recvFromProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"recvPkgFromRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ptcHubAddr\",\"type\":\"address\"}],\"name\":\"setPtcHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subProtocols\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETPROTOCOL = "getProtocol";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROTOCOLROUTES = "protocolRoutes";

    public static final String FUNC_PTCHUBADDR = "ptcHubAddr";

    public static final String FUNC_RECVFROMPROTOCOL = "recvFromProtocol";

    public static final String FUNC_RECVPKGFROMRELAYER = "recvPkgFromRelayer";

    public static final String FUNC_RELAYER = "relayer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETPROTOCOL = "setProtocol";

    public static final String FUNC_SETPTCHUB = "setPtcHub";

    public static final String FUNC_SETRELAYER = "setRelayer";

    public static final String FUNC_SUBPROTOCOLS = "subProtocols";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SENDAUTHMESSAGE_EVENT = new Event("SendAuthMessage", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SUBPROTOCOLUPDATE_EVENT = new Event("SubProtocolUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event RECVAUTHMESSAGE_EVENT = new Event("recvAuthMessage", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    protected AuthMsg(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInitializedEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(INITIALIZED_EVENT);
        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeInitializedEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(INITIALIZED_EVENT);
        subscribeEvent(topic0,callback);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnershipTransferredEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeOwnershipTransferredEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(topic0,callback);
    }

    public List<SendAuthMessageEventResponse> getSendAuthMessageEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SENDAUTHMESSAGE_EVENT, transactionReceipt);
        ArrayList<SendAuthMessageEventResponse> responses = new ArrayList<SendAuthMessageEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendAuthMessageEventResponse typedResponse = new SendAuthMessageEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pkg = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSendAuthMessageEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(SENDAUTHMESSAGE_EVENT);
        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeSendAuthMessageEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(SENDAUTHMESSAGE_EVENT);
        subscribeEvent(topic0,callback);
    }

    public List<SubProtocolUpdateEventResponse> getSubProtocolUpdateEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUBPROTOCOLUPDATE_EVENT, transactionReceipt);
        ArrayList<SubProtocolUpdateEventResponse> responses = new ArrayList<SubProtocolUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubProtocolUpdateEventResponse typedResponse = new SubProtocolUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.protocolType = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.protocolAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSubProtocolUpdateEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(SUBPROTOCOLUPDATE_EVENT);
        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeSubProtocolUpdateEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(SUBPROTOCOLUPDATE_EVENT);
        subscribeEvent(topic0,callback);
    }

    public List<RecvAuthMessageEventResponse> getRecvAuthMessageEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECVAUTHMESSAGE_EVENT, transactionReceipt);
        ArrayList<RecvAuthMessageEventResponse> responses = new ArrayList<RecvAuthMessageEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RecvAuthMessageEventResponse typedResponse = new RecvAuthMessageEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sendDomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.rawMsg = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRecvAuthMessageEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(RECVAUTHMESSAGE_EVENT);
        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeRecvAuthMessageEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(RECVAUTHMESSAGE_EVENT);
        subscribeEvent(topic0,callback);
    }

    public String getProtocol(BigInteger protocolType) throws ContractException {
        final Function function = new Function(FUNC_GETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Function getMethodGetProtocolRawFunction(BigInteger protocolType) throws
            ContractException {
        final Function function = new Function(FUNC_GETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return function;
    }

    public TransactionReceipt init() {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodInitRawFunction() throws ContractException {
        final Function function = new Function(FUNC_INIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForInit() {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String init(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Function getMethodOwnerRawFunction() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return function;
    }

    public String protocolRoutes(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_PROTOCOLROUTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Function getMethodProtocolRoutesRawFunction(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_PROTOCOLROUTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return function;
    }

    public String ptcHubAddr() throws ContractException {
        final Function function = new Function(FUNC_PTCHUBADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Function getMethodPtcHubAddrRawFunction() throws ContractException {
        final Function function = new Function(FUNC_PTCHUBADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return function;
    }

    public TransactionReceipt recvFromProtocol(String senderID, byte[] message) {
        final Function function = new Function(
                FUNC_RECVFROMPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(senderID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodRecvFromProtocolRawFunction(String senderID, byte[] message) throws
            ContractException {
        final Function function = new Function(FUNC_RECVFROMPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(senderID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(message)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForRecvFromProtocol(String senderID, byte[] message) {
        final Function function = new Function(
                FUNC_RECVFROMPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(senderID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String recvFromProtocol(String senderID, byte[] message, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECVFROMPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(senderID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, byte[]> getRecvFromProtocolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECVFROMPROTOCOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public TransactionReceipt recvPkgFromRelayer(byte[] pkg) {
        final Function function = new Function(
                FUNC_RECVPKGFROMRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodRecvPkgFromRelayerRawFunction(byte[] pkg) throws ContractException {
        final Function function = new Function(FUNC_RECVPKGFROMRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(pkg)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForRecvPkgFromRelayer(byte[] pkg) {
        final Function function = new Function(
                FUNC_RECVPKGFROMRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String recvPkgFromRelayer(byte[] pkg, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECVPKGFROMRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<byte[]> getRecvPkgFromRelayerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECVPKGFROMRELAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String relayer() throws ContractException {
        final Function function = new Function(FUNC_RELAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Function getMethodRelayerRawFunction() throws ContractException {
        final Function function = new Function(FUNC_RELAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return function;
    }

    public TransactionReceipt renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodRenounceOwnershipRawFunction() throws ContractException {
        final Function function = new Function(FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForRenounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String renounceOwnership(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt setProtocol(String protocolAddress, BigInteger protocolType) {
        final Function function = new Function(
                FUNC_SETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(protocolAddress), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodSetProtocolRawFunction(String protocolAddress, BigInteger protocolType)
            throws ContractException {
        final Function function = new Function(FUNC_SETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(protocolAddress), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForSetProtocol(String protocolAddress,
            BigInteger protocolType) {
        final Function function = new Function(
                FUNC_SETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(protocolAddress), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setProtocol(String protocolAddress, BigInteger protocolType,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPROTOCOL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(protocolAddress), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(protocolType)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, BigInteger> getSetProtocolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPROTOCOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setPtcHub(String _ptcHubAddr) {
        final Function function = new Function(
                FUNC_SETPTCHUB, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_ptcHubAddr)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodSetPtcHubRawFunction(String _ptcHubAddr) throws ContractException {
        final Function function = new Function(FUNC_SETPTCHUB, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_ptcHubAddr)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForSetPtcHub(String _ptcHubAddr) {
        final Function function = new Function(
                FUNC_SETPTCHUB, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_ptcHubAddr)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setPtcHub(String _ptcHubAddr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPTCHUB, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_ptcHubAddr)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetPtcHubInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPTCHUB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setRelayer(String relayerAddress) {
        final Function function = new Function(
                FUNC_SETRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(relayerAddress)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodSetRelayerRawFunction(String relayerAddress) throws ContractException {
        final Function function = new Function(FUNC_SETRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(relayerAddress)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForSetRelayer(String relayerAddress) {
        final Function function = new Function(
                FUNC_SETRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(relayerAddress)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String setRelayer(String relayerAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRELAYER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(relayerAddress)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetRelayerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRELAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, Boolean> subProtocols(String param0) throws ContractException {
        final Function function = new Function(FUNC_SUBPROTOCOLS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, Boolean>(
                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue());
    }

    public Function getMethodSubProtocolsRawFunction(String param0) throws ContractException {
        final Function function = new Function(FUNC_SUBPROTOCOLS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bool>() {}));
        return function;
    }

    public TransactionReceipt transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodTransferOwnershipRawFunction(String newOwner) throws
            ContractException {
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForTransferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String transferOwnership(String newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public static AuthMsg load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AuthMsg(contractAddress, client, credential);
    }

    public static AuthMsg deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(AuthMsg.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse {
        public TransactionReceipt.Logs log;

        public String previousOwner;

        public String newOwner;
    }

    public static class SendAuthMessageEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] pkg;
    }

    public static class SubProtocolUpdateEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger protocolType;

        public String protocolAddress;
    }

    public static class RecvAuthMessageEventResponse {
        public TransactionReceipt.Logs log;

        public String sendDomain;

        public byte[] rawMsg;
    }
}
