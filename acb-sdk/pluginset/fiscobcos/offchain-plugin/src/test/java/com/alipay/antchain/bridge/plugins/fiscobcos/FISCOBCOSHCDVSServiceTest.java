/*
 * Copyright 2023 Ant Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alipay.antchain.bridge.plugins.fiscobcos;

import cn.hutool.core.util.*;
import cn.hutool.crypto.PemUtil;
import com.alibaba.fastjson.JSONObject;
import com.alipay.antchain.bridge.commons.core.am.AuthMessageFactory;
import com.alipay.antchain.bridge.commons.core.base.*;
import com.alipay.antchain.bridge.commons.core.bta.BlockchainTrustAnchorFactory;
import com.alipay.antchain.bridge.commons.core.bta.IBlockchainTrustAnchor;
import com.alipay.antchain.bridge.commons.utils.crypto.SignAlgoEnum;
import lombok.extern.slf4j.Slf4j;
import org.fisco.bcos.sdk.v3.utils.Numeric;
import org.junit.Test;
import org.slf4j.Logger;

import java.io.ByteArrayInputStream;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

@Slf4j
public class FISCOBCOSHCDVSServiceTest {
    // 链域名
    private static final String CHAIN_DOMAIN = "test.domain";

    // AM合约地址 (使用656号区块中交易中的to地址)
    private static final String AM_CONTRACT = "0xdaad0341c4d5c75583a977e86d6430d247ac0605";

    // 域名所有者公钥 (示例公钥)
    public static final byte[] RAW_PUBLIC_KEY = PemUtil.readPem(new ByteArrayInputStream(
                    ("-----BEGIN PUBLIC KEY-----\n" +
                            "MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEULzSDPM4mhRkGpCiVirHZTWfzuZ/PfO6\n" +
                            "+/RfVgGpZxs4EUQZhw5SnYWIwK99KxDPNxtYG7OEiWDA7+EKZUWBIw==\n" +
                            "-----END PUBLIC KEY-----").getBytes(StandardCharsets.UTF_8)
            )
    );

    // 对象身份
    private static final ObjectIdentity oid = new X509PubkeyInfoObjectIdentity(RAW_PUBLIC_KEY);

    // BTA实例
    private static IBlockchainTrustAnchor BTA;

    // 锚定共识状态 (区块号为1的区块)
    private static final ConsensusState ANCHOR_CS = ConsensusState.decode(
            HexUtil.decodeHex(
                    "00009c050000000002000000010002000100000001030020000000765a9357b06f6c3b74cdf3e1da70f759d682561b3a1e9b586dcacde605095a8904002000000091a3ce4fdeeaf7a9ec60a7f50f6a2a8b5a870336d910682bb961fad5db1fe8430500080000007a481194950100000600fe0000007b227265636569707473526f6f74223a22307834666133646666343863666531303165343836353266313935623566373630363639636539333364333336663030303231346366653637373130326364643230222c227472616e73616374696f6e73526f6f74223a22307830346532663633643862343363333634363339626132623863623935633237663137663534386265353666656463623531356263663765656163663830623237222c227374617465526f6f74223a22307836636133386235393963633364313836376234333035376537613433356366356138323031663639346339303234396232323166333237643838623062386133227d0700240200007b227365616c65724c697374223a5b2230783432303136313833396563383034646363353237383065303864616261313563316266333238646338353632653461346464393536396666336563323136356330356136653939393430343734653066336434633438333936623364386536626237613762383439633962323565333538326230643131376134613031373132222c2230783736343538366237616338393731376565363634323038316137636666646564663837396339353938326561663839333939633564353134666363373364363639353631653934656361343130373934323433326362386565643936316363386538633665336139646330653566363531353062643939316538366562353864222c2230786362623132643730353462363161653962303238316431633963336363616538353230613639383463326263316461666161663736636631383631323739353034656638633633376430363937303533386239623161313161643734323033313237346163393537306335613333636139613337633137623066646661653439222c2230786539376561636330376432353230343032646439386336633737663434613731356132353761343263373239303561316233343231613739663966373631343735646436366365323232653666653033373934373566636434666531383061633763366232336663343032376533396435346537356565636334373264313439225d7d0800ff0100007b227369676e617475726573223a5b7b227365616c6572496e646578223a302c227369676e6174757265223a22307864316639663539663636373038383638306133613964333663663239386363303362613233623831656536653263353631656334373266396634646638633138323961366331643663396538303131643235313331633431393635356564646335623833356631626639666330363365383738393231633532376231303035383030227d2c7b227365616c6572496e646578223a312c227369676e6174757265223a22307865646666663335656138613838303839643638363735613165396564353935363462333164373565323138316435326464656130313363343466376666653937346533613038313032326337393833613835613639303930396663386666623831613862663837306233653361333831333963303339643836326137633834353031227d2c7b227365616c6572496e646578223a322c227369676e6174757265223a22307863623839616535316136653265353164383964666165346166363336653663653562626166653031356362653562316662626163373936353933613033313962336436393530386639333538336266316134623138636536393865323736643863613063653962646266396563623036316335333334643366323165343639623031227d5d7d"
            )
    );

    // 区块655的共识状态 (消息父区块)
    private static final ConsensusState PARENT_CS_WHERE_MSG1 = ConsensusState.decode(
            HexUtil.decodeHex(
                    "00009d0500000000020000000100020002000000028f03002000000005497e56d031da003277b3e3b8c5e4a482159fd7c86602ec7d59739300c33b43040020000000d3d2a45c3bfbecbbad80442ad1ab7f6fe3c6e9a434fcc16242267e378d98b63b050008000000f4f5e610960100000600fe0000007b227265636569707473526f6f74223a22307836663335333961386561346438346461376464323731626537353537386361646664653634313636393138666235306563633138383435636638653630303235222c227472616e73616374696f6e73526f6f74223a22307832373362343737613164313863636362343562316331396462646462383238303965343831326362376136623562303339313962373763643438646165376230222c227374617465526f6f74223a22307836313363666236356235313437616438636634376330313937373439613064646663666230316464636139616561306639643061393664316137333363346565227d0700240200007b227365616c65724c697374223a5b2230783432303136313833396563383034646363353237383065303864616261313563316266333238646338353632653461346464393536396666336563323136356330356136653939393430343734653066336434633438333936623364386536626237613762383439633962323565333538326230643131376134613031373132222c2230783736343538366237616338393731376565363634323038316137636666646564663837396339353938326561663839333939633564353134666363373364363639353631653934656361343130373934323433326362386565643936316363386538633665336139646330653566363531353062643939316538366562353864222c2230786362623132643730353462363161653962303238316431633963336363616538353230613639383463326263316461666161663736636631383631323739353034656638633633376430363937303533386239623161313161643734323033313237346163393537306335613333636139613337633137623066646661653439222c2230786539376561636330376432353230343032646439386336633737663434613731356132353761343263373239303561316233343231613739663966373631343735646436366365323232653666653033373934373566636434666531383061633763366232336663343032376533396435346537356565636334373264313439225d7d0800ff0100007b227369676e617475726573223a5b7b227365616c6572496e646578223a302c227369676e6174757265223a22307865326163636534646131363332613764303163396564353035663039653435663430633766373332316561363765656139366234393730663530643830383866343738613334636137366332363238393365336461663035313834376139333336356231633061336666613364323933393734353766373161303464386662633031227d2c7b227365616c6572496e646578223a312c227369676e6174757265223a22307832366133366661663831653439653364373064656565386432653231396564326161316234626561303565353036386565653933383331636537616230653530363037326361636362393739343931366263633566663761643964633639306432653462626535613630633665333364613262323461666434663561616162653031227d2c7b227365616c6572496e646578223a322c227369676e6174757265223a22307832643065386166616363363664636665613633396465616234633631376436613034373364323331323137386236333733626161326337316637616138386538303337643261613336336437336134336533353263303438356238353461306235376364373334363532303736393634373336616663363939653230613639633030227d5d7d"
            )
    );

    // 区块656的共识状态 (消息所在区块)
    private static final ConsensusState CS_WHERE_MSG1 = ConsensusState.decode(
            HexUtil.decodeHex(
                    "00009d05000000000200000001000200020000000290030020000000d877a31748e6e8fa941675ba144eb37727d25d0130c291a323940095090a8a1c04002000000005497e56d031da003277b3e3b8c5e4a482159fd7c86602ec7d59739300c33b4305000800000006f8e610960100000600fe0000007b227265636569707473526f6f74223a22307831396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637222c227472616e73616374696f6e73526f6f74223a22307838623136383061306435303964303437393732613766326631366566613666613163313638396462643637323135623264323833633635613130613431613062222c227374617465526f6f74223a22307834616230393063336536636563316233366631653231383636373661643532383034346166656336383461383235353162323133363036666132393430303932227d0700240200007b227365616c65724c697374223a5b2230783432303136313833396563383034646363353237383065303864616261313563316266333238646338353632653461346464393536396666336563323136356330356136653939393430343734653066336434633438333936623364386536626237613762383439633962323565333538326230643131376134613031373132222c2230783736343538366237616338393731376565363634323038316137636666646564663837396339353938326561663839333939633564353134666363373364363639353631653934656361343130373934323433326362386565643936316363386538633665336139646330653566363531353062643939316538366562353864222c2230786362623132643730353462363161653962303238316431633963336363616538353230613639383463326263316461666161663736636631383631323739353034656638633633376430363937303533386239623161313161643734323033313237346163393537306335613333636139613337633137623066646661653439222c2230786539376561636330376432353230343032646439386336633737663434613731356132353761343263373239303561316233343231613739663966373631343735646436366365323232653666653033373934373566636434666531383061633763366232336663343032376533396435346537356565636334373264313439225d7d0800ff0100007b227369676e617475726573223a5b7b227365616c6572496e646578223a302c227369676e6174757265223a22307833306530393462633534643433303563636365316236633766363965363163613366383630313536363465303130646666633765313230376134313362343864373761633464643765663664343037376530653539666465343331666531383536346266353036613664386266363339366462643634333237383237393130363031227d2c7b227365616c6572496e646578223a312c227369676e6174757265223a22307830663334636533626434353430636136323664373663303030643939633833353233306437336362643032616163383237353738353564633464363730666437353532663063633034363463393865356366383064623061653731623765636166373663396531613032326139343566396630303665636532313763636563323030227d2c7b227365616c6572496e646578223a332c227369676e6174757265223a22307864366237663063346334336231373462663235303662636234323261376165363663643466343732313532383065393365393731393538616631316239643933376363306261393733663961303038363632626661303561323863643231653132386364393331313566353764666536316133393935613731663765343733643031227d5d7d"
            )
    );

    // 跨链消息
    private static final CrossChainMessage MSG1 = CrossChainMessage.decode(
            HexUtil.decodeHex("00009d0c0000000001000000000100080100000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009f0f736a72656d6f7465446f6d61696e00000000000000000000000000000000ffffffff1fe2b14ee218a2f8612be99679b1638d600f696722cc16cdcb7c51b0000000000000000000000000000000000000000000000000000000000000001a556e6f72646572656443726f7373436861696e4d65737361676500000000000000000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000daad0341c4d5c75583a977e86d6430d247ac0605000000010200820b000000007c0b00000000020000000290010020000000d877a31748e6e8fa941675ba144eb37727d25d0130c291a323940095090a8a1c02000800000006f8e610960100000300100a00007b22626c6f636b4e756d626572223a3635362c22636865636b73756d436f6e747261637441646472657373223a22222c22636f6e747261637441646472657373223a22222c226566666563746976654761735072696365223a22222c22657874726144617461223a22222c2266726f6d223a22307836616535393932343765333166393563336436363366363032633338656533366663346266356432222c2267617355736564223a223534303935222c2268617368223a22307831396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637222c22696e707574223a223078633163656363356130303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303630316665326231346565323138613266383631326265393936373962313633386436303066363936373232636331366364636237633531623039663066373336613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030613030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303063373236353664366637343635343436663664363136393665303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030316135353665366637323634363537323635363434333732366637333733343336383631363936653464363537333733363136373635303030303030303030303030222c226c6f67456e7472696573223a5b7b2261646472657373223a2231663265393065303964393362336339333235383462383965656433393765633139623937323535222c2264617461223ac22746f70696373223a5b22307837396237353136623162376136613339666234623762323265383636376364333734346535633237343235323932663861396634396431303432633063363531225d7d2c7b2261646472657373223a2264616164303334316334643563373535383361393737653836643634333064323437616330363035222c2264617461223ac22746f70696373223a5b22307862626538336438343539633330356366353166323432356239336536393364636661616636306632323736363438366230393833633930356239386561643430225d7d5d2c226d657373616765223a22222c226f7574707574223a223078222c227265636569707450726f6f66223a5b5d2c22737461747573223a302c227374617475734f4b223a747275652c22746f223a22307864616164303334316334643563373535383361393737653836643634333064323437616330363035222c227472616e73616374696f6e48617368223a22307838623136383061306435303964303437393732613766326631366566613666613163313638396462643637323135623264323833633635613130613431613062222c227472616e73616374696f6e50726f6f66223a5b5d2c2274785265636569707450726f6f66223a5b2231396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637225d2c2276657273696f6e223a307d0400fe0000007b227265636569707473526f6f74223a22307831396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637222c227265636569707448617368223a22307831396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637222c2274785265636569707450726f6f66223a5b2231396261623038623062376133633938376462343833323433326465633064373063363336386534303339626166336637623662393662393065323766303637225d7d0500200000008b1680a0d509d047972a7f2f16efa6fa1c1689dbd67215b2d283c65a10a41a0b")
    );

    // HCDVS服务实例
    private static final FISCOBCOSHCDVSService FISCOBCOS_HCDVS_SERVICE = new FISCOBCOSHCDVSService();

    static {
        // 1. 初始化BTA
        byte[] rawAmContractAddr = HexUtil.decodeHex(StrUtil.removePrefix(AM_CONTRACT, "0x"));
        byte[] padding = new byte[32 - rawAmContractAddr.length];
        Arrays.fill(padding, (byte) 0);
        byte[] amContractAddrBytes32 = ArrayUtil.addAll(padding, rawAmContractAddr);

        // BTA的SubjectIdentity
        JSONObject btaSubjectIdentity = new JSONObject();

        // 添加共识节点信息（通过控制台getSealerList获取）
        JSONObject consensusInfo = new JSONObject();
        consensusInfo.put("sealerList", Arrays.asList(
                "0x420161839ec804dcc52780e08daba15c1bf328dc8562e4a4dd9569ff3ec2165c05a6e99940474e0f3d4c48396b3d8e6bb7a7b849c9b25e3582b0d117a4a01712",
                "0x764586b7ac89717ee6642081a7cffdedf879c95982eaf89399c5d514fcc73d669561e94eca4107942432cb8eed961cc8e8c6e3a9dc0e5f65150bd991e86eb58d",
                "0xcbb12d7054b61ae9b0281d1c9c3ccae8520a6984c2bc1dafaaf76cf1861279504ef8c637d06970538b9b1a11ad742031274ac9570c5a33ca9a37c17b0fdfae49",
                "0xe97eacc07d2520402dd98c6c77f44a715a257a42c72905a1b3421a79f9f761475dd66ce222e6fe0379475fcd4fe180ac7c6b23fc4027e39d54e75eecc472d149"
        ));
        btaSubjectIdentity.put("consensusNodeInfo", consensusInfo);
        btaSubjectIdentity.put("amContract", AM_CONTRACT);

        // 创建BTA
        BTA = BlockchainTrustAnchorFactory.createBTAv1(
                CHAIN_DOMAIN,
                "fiscobcos",
                1,
                RAW_PUBLIC_KEY,
                SignAlgoEnum.SHA256_WITH_ECDSA,
                btaSubjectIdentity.toString().getBytes(),
                BigInteger.ONE,  // 初始锚定区块高度为1
                Numeric.hexStringToByteArray("0x765a9357b06f6c3b74cdf3e1da70f759d682561b3a1e9b586dcacde605095a89"), // 区块1的哈希值
                amContractAddrBytes32, // AM合约地址
                oid, // 区块链域名的所有者
                "".getBytes() // 扩展信息
        );


        // 2. 设置HCDVS日志
        java.lang.reflect.Method setLoggerMethod = ReflectUtil.getMethod(FISCOBCOSHCDVSService.class, "setLogger", Logger.class);
        setLoggerMethod.setAccessible(true);
        try {
            setLoggerMethod.invoke(FISCOBCOS_HCDVS_SERVICE, log);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void testHcdvsVerifyAnchorConsensusState() {
        var result = FISCOBCOS_HCDVS_SERVICE.verifyAnchorConsensusState(BTA, ANCHOR_CS);
        assertNotNull(result);
        assertTrue(result.isSuccess());
    }

    @Test
    public void testHcdvsVerifyConsensusState() {
        var result = FISCOBCOS_HCDVS_SERVICE.verifyConsensusState(CS_WHERE_MSG1, PARENT_CS_WHERE_MSG1);
        assertNotNull(result);
        assertTrue(result.isSuccess());
        assertTrue(ObjectUtil.isNotEmpty(CS_WHERE_MSG1.getConsensusNodeInfo()));
    }

    @Test
    public void testHcdvsVerifyCrossChainMessage() {
        CS_WHERE_MSG1.setDomain(new CrossChainDomain(CHAIN_DOMAIN));
        FISCOBCOS_HCDVS_SERVICE.verifyConsensusState(CS_WHERE_MSG1, PARENT_CS_WHERE_MSG1);
        var result = FISCOBCOS_HCDVS_SERVICE.verifyCrossChainMessage(MSG1, CS_WHERE_MSG1);
        assertNotNull(result);
        assertTrue(result.isSuccess());
    }


    @Test
    public void testParseMessageFromLedgerData() throws Exception {
        var raw = FISCOBCOS_HCDVS_SERVICE.parseMessageFromLedgerData(MSG1.getProvableData().getLedgerData());
        assertNotNull(raw);
        var am = AuthMessageFactory.createAuthMessage(raw);
        assertTrue(ObjectUtil.isNotEmpty(am.getPayload()));
    }

}