package com.alipay.antchain.bridge.plugins.bifchain;

import cn.bif.api.BIFSDK;
import cn.bif.common.JsonUtils;
import cn.bif.exception.EncException;
import cn.bif.model.request.*;
import cn.bif.model.response.*;
import cn.bif.module.encryption.key.PrivateKeyManager;
import cn.bif.utils.generator.response.Log;
import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.crypto.digest.DigestUtil;
import com.alibaba.fastjson.JSON;
import com.alipay.antchain.bridge.commons.bbc.AbstractBBCContext;
import com.alipay.antchain.bridge.commons.bbc.syscontract.AuthMessageContract;
import com.alipay.antchain.bridge.commons.bbc.syscontract.ContractStatusEnum;
import com.alipay.antchain.bridge.commons.bbc.syscontract.PTCContract;
import com.alipay.antchain.bridge.commons.bbc.syscontract.SDPContract;
import com.alipay.antchain.bridge.commons.bcdns.AbstractCrossChainCertificate;
import com.alipay.antchain.bridge.commons.bcdns.BCDNSTrustRootCredentialSubject;
import com.alipay.antchain.bridge.commons.bcdns.CrossChainCertificateFactory;
import com.alipay.antchain.bridge.commons.bcdns.PTCCredentialSubject;
import com.alipay.antchain.bridge.commons.core.base.*;
import com.alipay.antchain.bridge.commons.core.ptc.*;
import com.alipay.antchain.bridge.commons.core.rcc.ReliableCrossChainMessage;
import com.alipay.antchain.bridge.commons.utils.crypto.SignAlgoEnum;
import com.alipay.antchain.bridge.plugins.lib.BBCService;
import com.alipay.antchain.bridge.plugins.spi.bbc.AbstractBBCService;
import com.alipay.antchain.bridge.ptc.committee.types.basic.CommitteeEndorseProof;
import com.alipay.antchain.bridge.ptc.committee.types.basic.CommitteeNodeProof;
import com.alipay.antchain.bridge.ptc.committee.types.tpbta.CommitteeEndorseRoot;
import com.alipay.antchain.bridge.ptc.committee.types.tpbta.NodeEndorseInfo;
import com.alipay.antchain.bridge.ptc.committee.types.trustroot.CommitteeVerifyAnchor;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;
import lombok.Getter;

import java.io.IOException;
import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

@BBCService(products = "bifchain", pluginId = "plugin-simple-bifchain")
@Getter
public class BifchainBBCService extends AbstractBBCService {
    private BifchainConfig config;

    private BIFSDK sdk;

    private AbstractBBCContext bbcContext;

    private static final OkHttpClient client = new OkHttpClient();

    private static final String AUTH_BYTE_CODE = "608060405234801562000010575f80fd5b506200001c336200003e565b600180546001600160c01b03191633179055620000386200008d565b62000159565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f54600160c81b900460ff1615620000fb5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff600160c01b9091048116101562000157575f805460ff60c01b191660ff60c01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61291980620001675f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063a7566e7711610088578063e41fb51711610063578063e41fb51714610218578063e85df5f71461022b578063f2fde38b1461023e578063f4808c5414610251575f80fd5b8063a7566e77146101ea578063d2a3fff2146101fd578063e1c7392a14610210575f80fd5b8063715018a6116100c3578063715018a614610171578063747c7ffd146101795780638406c079146101c75780638da5cb5b146101da575f80fd5b8063189a0a15146100e95780636548e9bc14610134578063705c572c14610149575b5f80fd5b6101176100f736600461248f565b63ffffffff165f908152600360205260409020546001600160c01b031690565b6040516001600160c01b0390911681526020015b60405180910390f35b6101476101423660046124be565b610264565b005b61011761015736600461248f565b60036020525f90815260409020546001600160c01b031681565b6101476102b8565b6101ab6101873660046124be565b60026020525f908152604090205463ffffffff811690640100000000900460ff1682565b6040805163ffffffff909316835290151560208301520161012b565b600154610117906001600160c01b031681565b5f546001600160c01b0316610117565b6101476101f8366004612574565b6102ec565b61014761020b3660046124be565b6104a1565b6101476104ec565b6101476102263660046125a6565b61062a565b6101476102393660046125f1565b61072a565b61014761024c3660046124be565b610845565b600454610117906001600160c01b031681565b5f546001600160c01b031633146102965760405162461bcd60e51b815260040161028d90612622565b60405180910390fd5b600180546001600160c01b0319166001600160c01b0392909216919091179055565b5f546001600160c01b031633146102e15760405162461bcd60e51b815260040161028d90612622565b6102ea5f6108d8565b565b6001546001600160c01b031633146103505760405162461bcd60e51b815260206004820152602160248201527f417574684d73673a2073656e646572206e6f742076616c69642072656c6179656044820152603960f91b606482015260840161028d565b5f61035a82610927565b90505f61036a82602001516109f9565b90506060805f836060015151111561043e576004546001600160c01b03166103ca5760405162461bcd60e51b81526020600482015260136024820152721c1d18c81a1d58881b9bdd081cd95d081e595d606a1b604482015260640161028d565b600480546020860151604051632ae132ff60e11b81526001600160c01b03909216926355c265fe926103fd92910161269a565b5f604051808303815f87803b158015610414575f80fd5b505af1158015610426573d5f803e3d5ffd5b50505050602083015151518351519092509050610451565b61044b8460200151610afb565b90925090505b7f2b41cea8d63514764033a161efa4273751d3f20eda0ecd3c514fa43b99f38bb082826040516104829291906126ac565b60405180910390a161049a6104978383610b29565b50565b5050505050565b5f546001600160c01b031633146104ca5760405162461bcd60e51b815260040161028d90612622565b600480546001600160c01b0319166001600160c01b0392909216919091179055565b5f54600160c81b900460ff161580801561051257505f546001600160c01b90910460ff16105b806105325750303b15801561053257505f54600160c01b900460ff166001145b6105955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161028d565b5f805460ff60c01b1916600160c01b17905580156105c0575f805460ff60c81b1916600160c81b1790555b600180546001600160c01b031916331790556105e16105dc3390565b6108d8565b8015610497575f805460ff60c81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b335f90815260026020526040902054640100000000900460ff1661069f5760405162461bcd60e51b815260206004820152602660248201527f417574684d73673a2073656e646572206e6f742076616c6964207375622d70726044820152651bdd1bd8dbdb60d21b606482015260840161028d565b5f6040518060800160405280600163ffffffff1681526020016106c185610c4d565b8152335f908152600260209081526040918290205463ffffffff16908301520183905290507f79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c65161071082610c5f565b60405161071d919061269a565b60405180910390a1505050565b5f546001600160c01b031633146107535760405162461bcd60e51b815260040161028d90612622565b6001600160c01b0382165f9081526002602052604090208054640100000000900460ff16156107c45760405162461bcd60e51b815260206004820152601860248201527f417574684d73673a2070726f746f636f6c206578697374730000000000000000604482015260640161028d565b805463ffffffff831664ffffffffff1990911681176401000000001782555f8181526003602090815260409182902080546001600160c01b0388166001600160c01b0319909116811790915591519182527f1d5c04c569492046e8119073d290445582589ec4f52031b868ed74b2b7f7bfa8910160405180910390a2505050565b5f546001600160c01b0316331461086e5760405162461bcd60e51b815260040161028d90612622565b6001600160c01b0381166108d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161028d565b610497815b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152606080825260208201525f8061094982856004610cec565b90506109566004836126e4565b91505f610964600483015190565b90505f61097884878463ffffffff16610cec565b905061098a63ffffffff8316856126e4565b93505f61099985886004610cec565b90506109a66004866126e4565b94505f6109b4600483015190565b90505f6109c8878a8463ffffffff16610cec565b90506109da63ffffffff8316886126e4565b5060408051808201909152938452602084015250909695505050505050565b610a01612425565b610a09612425565b5f610a1384610d01565b90505f5b816020015151811015610af2575f82602001518281518110610a3b57610a3b6126f7565b60200260200101519050600561ffff16815f015161ffff1603610a7257610a6b610a66826040015190565b610ed6565b8452610adf565b805161ffff166101001901610a9e57610a94610a8f826040015190565b610f59565b6020850152610adf565b805161ffff1660ff1901610ac557610ab581611085565b63ffffffff166040850152610adf565b805161ffff166101fe1901610adf57604081015160608501525b5080610aea8161270b565b915050610a17565b50909392505050565b6060805f610b0884611098565b90505f610b188260200151611229565b608090920151959194509092505050565b604080516080810182525f8082526020820181905291810182905260608082015290610b548361131d565b60408082015163ffffffff165f908152600360205220549091506001600160c01b0316610bc35760405162461bcd60e51b815260206004820152601a60248201527f417574684d73673a206e6f2070726f746f636f6c206578697374000000000000604482015260640161028d565b60408082015163ffffffff165f908152600360209081529082902054908301516060840151925163c09b261b60e01b81526001600160c01b039092169263c09b261b92610c169289929091600401612723565b5f604051808303815f87803b158015610c2d575f80fd5b505af1158015610c3f573d5f803e3d5ffd5b509293505050505b92915050565b5f80610c58836113d2565b9392505050565b805160609063ffffffff16600103610c7a57610c47826113ff565b815163ffffffff16600203610c9257610c4782611570565b60405162461bcd60e51b815260206004820152602960248201527f656e636f6465417574684d6573736167653a20616d2076657273696f6e206e6f6044820152681d081cdd5c1c1bdc9d60ba1b606482015260840161028d565b6060610cf9848484611739565b949350505050565b604080518082019091525f815260606020820152600682511015610d675760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e677468000000000000000000604482015260640161028d565b604080518082019091525f8082526060602083015290610d8f610d8a85846117a8565b6117ce565b61ffff168152610da06006836126e4565b91505f825b8551811015610df957610dca610dc587610dc08460026126e4565b611868565b611890565b610dd5906006612757565b610de59063ffffffff16826126e4565b905081610df18161270b565b925050610da5565b5f8267ffffffffffffffff811115610e1357610e136124d7565b604051908082528060200260200182016040528015610e5f57816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081610e315790505b5090505f92505b8651851015610ec75760408051606080820183525f808352602083015291810191909152610e948887611981565b96509050808285610ea48161270b565b965081518110610eb657610eb66126f7565b602002602001018190525050610e66565b60208401525090949350505050565b6040805160208101909152606081526040805160208101909152606081525f610efe84610d01565b90505f5b816020015151811015610af2575f82602001518281518110610f2657610f266126f7565b6020908102919091010151805190915061ffff16610f4657604081015184525b5080610f518161270b565b915050610f02565b6040805160a0810182526060808201818152608083019190915281525f60208201819052918101919091526040805160a0810182526060808201818152608083019190915281525f60208201819052918101919091525f610fb984610d01565b90505f5b816020015151811015610af2575f82602001518281518110610fe157610fe16126f7565b6020908102919091010151805190915061ffff166110135761100c611007826040015190565b611ad5565b8452611072565b805161ffff165f1901611044575f61102c826040015190565b9050611039815182015190565b602086015250611072565b805161ffff1660011901611072575f61105e826040015190565b905061106b815182015190565b6040860152505b508061107d8161270b565b915050610fbd565b5f610c47610dc560048460400151015190565b6040805161010081018252606060c0820181815260e083018290528252602082018190525f928201839052808201819052608082015260a08101919091526040805161010081018252606060c0820181815260e083018290528252602082018190525f928201839052808201819052608082015260a081019190915260065b83518110156112225760408051606080820183525f8083526020830152918101919091526111458583611981565b815190935090915061ffff166003190161116d576111668160400151611b7e565b835261121c565b805161ffff166004190161118a576040810151602084015261121c565b805161ffff16600619016111b9576111a9610dc582604001515f611868565b63ffffffff16604084015261121c565b805161ffff16600719016111d6576040810151606084015261121c565b805161ffff16600819016111f3576040810151608084015261121c565b805161ffff166009190161121c57611212610d8a82604001515f6117a8565b61ffff1660a08401525b50611117565b5092915050565b6060600c82511161127c5760405162461bcd60e51b815260206004820152601b60248201527f696c6c6567616c206c656e677468206f66207564616720726573700000000000604482015260640161028d565b5f61128b610dc5846008611868565b905061129881600c612757565b63ffffffff168351101561130b5760405162461bcd60e51b815260206004820152603460248201527f6c656e677468206f6620756461672072657370206c657373207468616e20746860448201527365206c656e677468206f66206d736720626f647960601b606482015260840161028d565b610c58600c848363ffffffff16611739565b604080516080810182525f808252602082018190529181018290526060808201529061134883611c15565b90508063ffffffff1660010361136157610c5883611c21565b8063ffffffff1660020361137857610c5883611d3a565b60405162461bcd60e51b815260206004820152602960248201527f6465636f6465417574684d6573736167653a20616d2076657273696f6e206e6f6044820152681d081cdd5c1c1bdc9d60ba1b606482015260840161028d565b6040805160208082528183019092525f918291906020820181803683375050506020018390525090919050565b6060815f015163ffffffff166001146114655760405162461bcd60e51b815260206004820152602260248201527f656e636f6465417574684d65737361676556313a2077726f6e6720766572736960448201526137b760f11b606482015260840161028d565b5f6114738360600151611df0565b61147e9060046126e4565b6114899060206126e4565b6114949060046126e4565b90505f8167ffffffffffffffff8111156114b0576114b06124d7565b6040519080825280601f01601f1916602001820160405280156114da576020820181803683370190505b50845190915082906114ee90829084611e3b565b6114f86020611e4c565b6115029082612774565b602086810151828501529091506115199082612774565b905061152a81866040015184611e3b565b6115346020611e4c565b61153e9082612774565b905061154f8186606001518461207a565b61155c8560600151611df0565b6115669082612774565b5090949350505050565b6060815f015163ffffffff166002146115d65760405162461bcd60e51b815260206004820152602260248201527f656e636f6465417574684d65737361676556323a2077726f6e6720766572736960448201526137b760f11b606482015260840161028d565b63ffffffff82606001515111156116425760405162461bcd60e51b815260206004820152602a60248201527f656e636f6465417574684d65737361676556323a20626f6479206c656e677468604482015269081bdd995c9b1a5b5a5d60b21b606482015260840161028d565b5f826060015151600461165591906126e4565b6116609060046126e4565b61166b9060206126e4565b6116769060046126e4565b90505f8167ffffffffffffffff811115611692576116926124d7565b6040519080825280601f01601f1916602001820160405280156116bc576020820181803683370190505b50845190915082906116d090829084611e3b565b6116da6020611e4c565b6116e49082612774565b602086810151828501529091506116fb9082612774565b905061170c81866040015184611e3b565b6117166020611e4c565b6117209082612774565b9050611731818660600151846120d5565b509392505050565b606080821580156117555760405191506020820160405261179f565b6040519150601f8416801560200281840101858101888315602002848a0101015b8183101561178e578051835260209283019201611776565b5050858452601f01601f1916604052505b50949350505050565b81515f906117b78360026126e4565b11156117c1575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f8151811061180f5761180f6126f7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160018151811061183e5761183e6126f7565b60200101906001600160f81b03191690815f1a9053505f61185f825f6117a8565b95945050505050565b81515f906118778360046126e4565b1115611881575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f815181106118d1576118d16126f7565b60200101906001600160f81b03191690815f1a9053508160021a60f81b81600181518110611901576119016126f7565b60200101906001600160f81b03191690815f1a9053508160011a60f81b81600281518110611931576119316126f7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600381518110611960576119606126f7565b60200101906001600160f81b03191690815f1a9053505f61185f825f611868565b60408051606080820183525f8083526020830152918101919091525f828451116119f95760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b606482015260840161028d565b6006831015611a3b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b604482015260640161028d565b60408051606080820183525f808352602083015291810191909152611a63610d8a86866117a8565b61ffff168152611a746002856126e4565b9350611a83610dc58686611868565b63ffffffff166020820152611a996004856126e4565b9350611ab08585836020015163ffffffff166121bd565b60408201526020810151611aca9063ffffffff16856126e4565b909590945092505050565b604080518082019091526060808252602082015260408051808201909152606080825260208201525f611b0784610d01565b90505f5b816020015151811015610af2575f82602001518281518110611b2f57611b2f6126f7565b6020908102919091010151805190915061ffff16611b535760408101518452611b6b565b805161ffff165f1901611b6b57604081015160208501525b5080611b768161270b565b915050611b0b565b6040805180820190915260608082526020820152604080518082019091526060808252602082015260065b83518110156112225760408051606080820183525f808352602083015291810191909152611bd78583611981565b815190935090915061ffff165f1901611bf65760408101518352611c0f565b805161ffff1660011901611c0f57604081015160208401525b50611ba9565b5f610c47825183015190565b604080516080810182525f80825260208201819052918101919091526060808201525f611c4e6020611e4c565b8351611c5a9190612774565b90505f611c678285015190565b9050611c74602083612774565b91505f611c818386015190565b9050611c8d6020611e4c565b611c979084612774565b92505f611ca4848761223d565b67ffffffffffffffff811115611cbc57611cbc6124d7565b6040519080825280601f01601f191660200182016040528015611ce6576020820181803683370190505b509050611cf484878361225f565b611cfd81611df0565b611d079085612774565b506040805160808101825260018152602081019490945263ffffffff929092169183019190915260608201529392505050565b604080516080810182525f80825260208201819052918101919091526060808201525f611d676020611e4c565b8351611d739190612774565b90505f611d808285015190565b9050611d8d602083612774565b91505f611d9a8386015190565b9050611da66020611e4c565b611db09084612774565b92505f611dbd84876122a5565b6040805160808101825260028152602081019590955263ffffffff93909316928401929092525060608201529392505050565b5f60208251611dff919061279b565b905060208251611e0f91906127ae565b15611e225780611e1e8161270b565b9150505b80611e2c8161270b565b9150610c4790506020826127c1565b909101600319810180519290915252565b5f8160088114611f585760108114611f615760188114611f6a5760208114611f735760288114611f7c5760308114611f855760388114611f8e5760408114611f975760488114611fa05760508114611fa95760588114611fb25760608114611fbb5760688114611fc45760708114611fcd5760788114611fd65760808114611fdf5760888114611fe85760908114611ff15760988114611ffa5760a081146120035760a8811461200c5760b081146120155760b8811461201e5760c081146120275760c881146120305760d081146120395760d881146120425760e0811461204b5760e881146120545760f0811461205d5760f8811461206657610100811461206f5760209150612074565b60019150612074565b60029150612074565b60039150612074565b60049150612074565b60059150612074565b60069150612074565b60079150612074565b60089150612074565b60099150612074565b600a9150612074565b600b9150612074565b600c9150612074565b600d9150612074565b600e9150612074565b600f9150612074565b60109150612074565b60119150612074565b60129150612074565b60139150612074565b60149150612074565b60159150612074565b60169150612074565b60179150612074565b60189150612074565b60199150612074565b601a9150612074565b601b9150612074565b601c9150612074565b601d9150612074565b601e9150612074565b601f9150612074565b602091505b50919050565b5f60208351612089919061279b565b90505f6020845161209a91906127ae565b11156120ae57806120aa8161270b565b9150505b6001015f5b8181101561049a576020810284015183860152601f19909401936001016120b3565b81516120e2848284611e3b565b6120ed600485612774565b93508063ffffffff168410156121605760405162461bcd60e51b815260206004820152603260248201527f7661724279746573546f42797465733a206f6666736574206c657373207468616044820152710dc40e8d0ca40d2dce0eae840d8cadccee8d60731b606482015260840161028d565b61217063ffffffff821685612774565b935080158061049a578483018051601f84168015602002818801018581018215602002838601015b818310156121b0578251815260209283019201612198565b5050509152505050505050565b82516060906121cc83856126e4565b11156121d6575f80fd5b5f8267ffffffffffffffff8111156121f0576121f06124d7565b6040519080825280601f01601f19166020018201604052801561221a576020820181803683370190505b509050602080820190868601016122328282876123a9565b509095945050505050565b8082015160208104600101601f821615612255576001015b6020029392505050565b818301515f60208204600101601f831615612278576001015b5b8082101561229d578585015160208302850152602086039550600182019150612279565b505050505050565b60605f6122b28484015190565b63ffffffff1690506122c5600485612774565b9350838111156123305760405162461bcd60e51b815260206004820152603060248201527f6279746573546f56617242797465733a206f6666736574206c6573732074686160448201526f6e206c656e677468206f6620626f647960801b606482015260840161028d565b61233a8185612774565b93506060811580156123575760405191506020820160405261179f565b6040519150601f8316801560200281840101848101888315602002848a0101015b81831015612390578051835260209283019201612378565b5050848452601f01601f19166040525050949350505050565b602081106123e157815183526123c06020846126e4565b92506123cd6020836126e4565b91506123da602082612774565b90506123a9565b805f036123ed57505050565b5f60016123fb836020612774565b612407906101006128b8565b6124119190612774565b925184518416931916929092179092525050565b6040805160a08082018352606060808084018281528452845192830185528282018281529083019190915281525f602082810182905293820152909182019081525f6020820152606060409091015290565b803563ffffffff8116811461248a575f80fd5b919050565b5f6020828403121561249f575f80fd5b610c5882612477565b80356001600160c01b038116811461248a575f80fd5b5f602082840312156124ce575f80fd5b610c58826124a8565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126124fa575f80fd5b813567ffffffffffffffff80821115612515576125156124d7565b604051601f8301601f19908116603f0116810190828211818310171561253d5761253d6124d7565b81604052838152866020858801011115612555575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60208284031215612584575f80fd5b813567ffffffffffffffff81111561259a575f80fd5b610cf9848285016124eb565b5f80604083850312156125b7575f80fd5b6125c0836124a8565b9150602083013567ffffffffffffffff8111156125db575f80fd5b6125e7858286016124eb565b9150509250929050565b5f8060408385031215612602575f80fd5b61260b836124a8565b915061261960208401612477565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f81518084525f5b8181101561267b5760208185018101518683018201520161265f565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610c586020830184612657565b604081525f6126be6040830185612657565b828103602084015261185f8185612657565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610c4757610c476126d0565b634e487b7160e01b5f52603260045260245ffd5b5f6001820161271c5761271c6126d0565b5060010190565b606081525f6127356060830186612657565b846020840152828103604084015261274d8185612657565b9695505050505050565b63ffffffff818116838216019080821115611222576112226126d0565b81810381811115610c4757610c476126d0565b634e487b7160e01b5f52601260045260245ffd5b5f826127a9576127a9612787565b500490565b5f826127bc576127bc612787565b500690565b8082028115828204841417610c4757610c476126d0565b600181815b8085111561281257815f19048211156127f8576127f86126d0565b8085161561280557918102915b93841c93908002906127dd565b509250929050565b5f8261282857506001610c47565b8161283457505f610c47565b816001811461284a576002811461285457612870565b6001915050610c47565b60ff841115612865576128656126d0565b50506001821b610c47565b5060208310610133831016604e8410600b8410161715612893575081810a610c47565b61289d83836127d8565b805f19048211156128b0576128b06126d0565b029392505050565b5f610c58838361281a56fea26469706673582212209c69cd55ec68084d90919fb9db1696773b4c12f6b77aa8fc2193b55015b277a164736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";

    private static final String SDP_BYTE_CODE = "608060405234801562000010575f80fd5b506200001c336200002c565b620000266200007b565b62000147565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f54600160c81b900460ff1615620000e95760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff600160c01b9091048116101562000145575f805460ff60c01b191660ff60c01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61558680620001555f395ff3fe608060405234801561000f575f80fd5b5060043610610127575f3560e01c8063838a102c116100a9578063c09b261b1161006e578063c09b261b14610285578063c1cecc5a14610298578063e1c7392a146102ab578063f2fde38b146102b3578063f76f703b146102c6575f80fd5b8063838a102c146102055780638da5cb5b1461021857806391198fcd14610228578063a9d662af1461023b578063b5db295a1461024e575f80fd5b806360e8b9c9116100ef57806360e8b9c91461019f5780636e109afe146101b2578063715018a6146101c5578063762f3d6e146101cd5780638037d45e146101e0575f80fd5b806305ca8da61461012b5780630d9ae9e514610151578063203c2c85146101795780633ac6dfb11461018e57806356cb2d0214610196575b5f80fd5b61013e610139366004614a0f565b6102d9565b6040519081526020015b60405180910390f35b61016461015f366004614a95565b610479565b60405163ffffffff9091168152602001610148565b61018c610187366004614b10565b61052f565b005b60025461013e565b61013e60025481565b61018c6101ad366004614b57565b610847565b61013e6101c0366004614b7d565b6108e8565b61018c610ab5565b61013e6101db366004614b7d565b610ae9565b6001546001600160c01b03165b6040516001600160c01b039091168152602001610148565b61018c610213366004614c64565b610c26565b5f546001600160c01b03166101ed565b61013e610236366004614a0f565b610c7e565b6001546101ed906001600160c01b031681565b61026161025c366004614cf6565b610da4565b6040805193845260208401929092526001600160401b031690820152606001610148565b61018c610293366004614d34565b610e09565b61018c6102a6366004614d34565b610fe6565b61018c6110db565b61018c6102c1366004614b57565b611202565b61018c6102d4366004614d34565b611299565b5f6040805161012081018252600281525f60208083018290528351601f8b0182900482028101820185528a81529193830191908b908b90819084018382808284375f92019190915250505090825250602081018890526040018661033d575f610340565b60015b60ff16815260200161038a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152503392508c91506113de9050565b63ffffffff166001600160401b0316815260200163ffffffff8016815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509385525050604080516020818101909252928352909201525060025490915061040590829061143c565b6001546001600160c01b031663e41fb5173361042084611640565b6040518363ffffffff1660e01b815260040161043d929190614df4565b5f604051808303815f87803b158015610454575f80fd5b505af1158015610466573d5f803e3d5ffd5b5050505060200151979650505050505050565b5f6002548484604051602001610490929190614e1f565b60405160208183030381529060405280519060200120146104cc5760405162461bcd60e51b81526004016104c390614e2e565b60405180910390fd5b5f61050f88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508a92508791506118b19050565b5f9081526004602052604090205463ffffffff1698975050505050505050565b5f546001600160c01b031633146105585760405162461bcd60e51b81526004016104c390614e65565b610560614964565b6105a183838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250859392505061190d9050565b8060e0015160ff165f0361060e5760405162461bcd60e51b815260206004820152602e60248201527f5344505f4d53475f4552524f523a20746865206d6573736167652074696d656f60448201526d075744d65617375726520697320360941b60648201526084016104c3565b8060e0015160ff166002036107e65780610100015160065f836040015160405160200161063b9190614e9a565b6040516020818303038152906040528051906020012081526020019081526020015f20600301541115610778576020808201515f9081526007909152604090205460ff166106e85760405162461bcd60e51b815260206004820152603460248201527f5344505f4d53475f4552524f523a20657863657074696f6e206d657373616765604482015273081a185cda08191bd95cc81b9bdd08195e1a5cdd60621b60648201526084016104c3565b6106f184611ac5565b6001600160c01b031663f6d750e48260200151836040015184606001518560c001518660a001518761012001518861014001516040518863ffffffff1660e01b81526004016107469796959493929190614eb5565b5f604051808303815f87803b15801561075d575f80fd5b505af115801561076f573d5f803e3d5ffd5b50505050610841565b60405162461bcd60e51b815260206004820152603f60248201527f5344505f4d53475f4552524f523a20746865206d657373616765206973206e6f60448201527f742074696d656f757420776974682074696d656f75744d65617375726520320060648201526084016104c3565b60405162461bcd60e51b815260206004820152602a60248201527f5344505f4d53475f4552524f523a20756e737570706f727465642074696d656f6044820152697574206d65617375726560b01b60648201526084016104c3565b50505050565b5f546001600160c01b031633146108705760405162461bcd60e51b81526004016104c390614e65565b6001600160c01b0381166108c65760405162461bcd60e51b815260206004820152601b60248201527f5344504d73673a20696e76616c696420616d20636f6e7472616374000000000060448201526064016104c3565b600180546001600160c01b0319166001600160c01b0392909216919091179055565b5f6040805161016081018252600381525f60208083018290528351601f8d0182900482028101820185528c81528b949293928301918e908e90819084018382808284375f92019190915250505090825250602081018490526040018961094e575f610951565b60015b60ff1681526020016001600160401b03801681526020016109aa8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250339250889150611af79050565b63ffffffff1681526020018660ff16815260200185815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250506040805160208181019092529283529092015250600254909150610a1f908290611b2a565b6020808201515f908152600790915260409020805460ff19166001908117909155546001600160c01b031663e41fb51733610a5984611d8a565b6040518363ffffffff1660e01b8152600401610a76929190614df4565b5f604051808303815f87803b158015610a8d575f80fd5b505af1158015610a9f573d5f803e3d5ffd5b50505050602001519a9950505050505050505050565b5f546001600160c01b03163314610ade5760405162461bcd60e51b81526004016104c390614e65565b610ae75f61208c565b565b5f6040805161016081018252600381525f60208083018290528351601f8d0182900482028101820185528c81528b949293928301918e908e90819084018382808284375f920191909152505050908252506020810184905260400189610b4f575f610b52565b60015b60ff168152602001610b9c8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152503392508891506113de9050565b63ffffffff166001600160401b0316815260200163ffffffff801681526020018660ff16815260200185815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250506040805160208181019092529283529092015250600254909150610a1f908290611b2a565b5f546001600160c01b03163314610c4f5760405162461bcd60e51b81526004016104c390614e65565b80604051602001610c609190614e9a565b60408051601f19818403018152919052805160209091012060025550565b5f6040805161012081018252600281525f60208083018290528351601f8b0182900482028101820185528a81529193830191908b908b90819084018382808284375f920191909152505050908252506020810188905260400186610ce2575f610ce5565b60015b60ff1681526020016001600160401b0380168152602001610d3e8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152503392508c9150611af79050565b63ffffffff16815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509385525050604080516020818101909252928352909201525060025490915061040590829061143c565b5f805f8060065f8787604051602001610dbe929190614e1f565b60408051808303601f190181529181528151602092830120835290820192909252015f206002810154600382015460049092015490989197506001600160401b031695509350505050565b6001546001600160c01b03163314610e635760405162461bcd60e51b815260206004820152601d60248201527f5344504d73673a206e6f742076616c696420616d20636f6e747261637400000060448201526064016104c3565b5f610ea283838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506120db92505050565b90508063ffffffff16600103610ef857610ef386868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061213e92505050565b610fde565b8063ffffffff16600203610f4757610ef386868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506121e792505050565b8063ffffffff16600303610f9657610ef386868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061232c92505050565b60405162461bcd60e51b815260206004820152601760248201527f756e737570706f72746564207364702076657273696f6e00000000000000000060448201526064016104c3565b505050505050565b6040805160a06020601f88018190040282018101909252608081018681525f9282919089908990819085018382808284375f92019190915250505090825250602080820187905260408051601f870183900483028101830182528681529201919086908690819084018382808284375f9201919091525050509082525063ffffffff6020909101526001549091506001600160c01b031663e41fb5173361108c84612495565b6040518363ffffffff1660e01b81526004016110a9929190614df4565b5f604051808303815f87803b1580156110c0575f80fd5b505af11580156110d2573d5f803e3d5ffd5b50505050610fde565b5f54600160c81b900460ff161580801561110157505f546001600160c01b90910460ff16105b806111215750303b15801561112157505f54600160c01b900460ff166001145b6111845760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c3565b5f805460ff60c01b1916600160c01b17905580156111af575f805460ff60c81b1916600160c81b1790555b6111b83361208c565b80156111ff575f805460ff60c81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b5f546001600160c01b0316331461122b5760405162461bcd60e51b81526004016104c390614e65565b6001600160c01b0381166112905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c3565b6111ff8161208c565b6040805160a06020601f88018190040282018101909252608081018681525f9282919089908990819085018382808284375f92019190915250505090825250602080820187905260408051601f870183900483028101830182528681529201919086908690819084018382808284375f92019190915250505090825250604080516020601f8a018190048102820181019092528881529181019161135a918a908a90819084018382808284375f920191909152503392508a9150611af79050565b63ffffffff16905290505f61136e82612495565b60015460405163e41fb51760e01b81529192506001600160c01b03169063e41fb517906113a19033908590600401614df4565b5f604051808303815f87803b1580156113b8575f80fd5b505af11580156113ca573d5f803e3d5ffd5b5050505050505050505050565b5050505050565b5f806113eb8585856125ad565b5f818152600560205260408120805492935063ffffffff90921691829161141183614f36565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b815f015163ffffffff166002146114655760405162461bcd60e51b81526004016104c390614f58565b63ffffffff8260e0015151111561148e5760405162461bcd60e51b81526004016104c390614f8f565b5f8260e001515183604001515160796114a79190614fd6565b6114b19190614fd6565b90505f816001600160401b038111156114cc576114cc614c24565b6040519080825280601f01601f1916602001820160405280156114f6576020820181803683370190505b508451909150829061151e9082906115129063ff000000614fe9565b63ffffffff1690840152565b611528602061261b565b611532908261500d565b6040860151909150611545828285612849565b8051611552906004614fd6565b61155c908361500d565b606087015181850152915061157260208361500d565b915061158382876080015185612931565b61158e60018361500d565b915061159f828760a0015185612941565b6115a9604061261b565b6115b3908361500d565b91506115c4828760c0015185612952565b6115ce602061261b565b6115d8908361500d565b91506115e9828760e0015185612849565b60e0860151516115fa906004614fd6565b611604908361500d565b3381850152915061161660208361500d565b808401869052915061162960208361500d565b505081516020928301209490910193909352505050565b6060815f015163ffffffff1660021461166b5760405162461bcd60e51b81526004016104c390614f58565b63ffffffff8260e001515111156116945760405162461bcd60e51b81526004016104c390614f8f565b60208201516116b55760405162461bcd60e51b81526004016104c390615020565b60808201515f90600260ff90911611801561170e576101008401515160e0850151516040860151516116e8906059614fd6565b6116f29190614fd6565b6116fd906004614fd6565b6117079190614fd6565b9150611732565b60e084015151604085015151611725906059614fd6565b61172f9190614fd6565b91505b5f826001600160401b0381111561174b5761174b614c24565b6040519080825280601f01601f191660200182016040528015611775576020820181803683370190505b50855190915083906117919082906115129063ff000000614fe9565b61179b602061261b565b6117a5908261500d565b602087810151828501529091506117bc908261500d565b60408701519091506117cf828285612849565b80516117dc906004614fd6565b6117e6908361500d565b60608801518185015291506117fc60208361500d565b915061180d82886080015185612931565b61181860018361500d565b9150611829828860a0015185612941565b611833604061261b565b61183d908361500d565b915061184e828860c0015185612952565b611858602061261b565b611862908361500d565b9150611873828860e0015185612849565b60e087015151611884906004614fd6565b61188e908361500d565b915083156118a6576118a68288610100015185612849565b509095945050505050565b5f836040516020016118c39190614e9a565b60408051601f198184030181528282528051602091820120908301528101849052606081018390526080016040516020818303038152906040528051906020012090509392505050565b8051611918826120db565b63ffffffff16835261192a6020612963565b611934908261500d565b90506119408183015190565b602084015261194d602090565b61195a9060ff168261500d565b90505f6119678284612973565b60408501819052805190915061197e906004614fd6565b611988908361500d565b91506119948284015190565b60608501526119a460208361500d565b91506119b08284015190565b60ff1660808501526119c360018361500d565b91506119cf8284015190565b6001600160401b031660a08501526119e860088361500d565b91506119f48284015190565b63ffffffff1660c0850152611a0a60048361500d565b9150611a168284015190565b60ff1660e0850152611a2960018361500d565b91505f611a368385612973565b9050611a4181612a78565b6101008601528051611a54906004614fd6565b611a5e908461500d565b9250611a6a8385612973565b610120860181905251611a7e906004614fd6565b611a88908461500d565b9250600260ff16856080015160ff1611156113d757611aa78385612973565b610140860181905251611abb906004614fd6565b610fde908461500d565b6040805160208082528183019092525f91829190602082018180368337505050602081018490529050825b9392505050565b5f80611b048585856125ad565b5f818152600360205260408120805492935063ffffffff90921691829161141183614f36565b815f015163ffffffff16600314611b535760405162461bcd60e51b81526004016104c390614f58565b63ffffffff826101200151511115611b7d5760405162461bcd60e51b81526004016104c390614f8f565b5f611b8c836101000151612ad5565b90505f815184610120015151856040015151607e611baa9190614fd6565b611bb49190614fd6565b611bbe9190614fd6565b90505f816001600160401b03811115611bd957611bd9614c24565b6040519080825280601f01601f191660200182016040528015611c03576020820181803683370190505b5085519091508290611c25908290611c1f9063ff000000614fe9565b84612952565b611c2f602061261b565b611c39908261500d565b6040870151909150611c4c828285612849565b8051611c59906004614fd6565b611c63908361500d565b6060880151818501529150611c7960208361500d565b9150611c8a82886080015185612931565b611c9560018361500d565b9150611ca6828860a0015185612941565b611cb0604061261b565b611cba908361500d565b9150611ccb828860c0015185612952565b611cd5602061261b565b611cdf908361500d565b9150611cf0828860e0015185612931565b611cfb60018361500d565b9150611d08828685612849565b8451611d15906004614fd6565b611d1f908361500d565b9150611d318288610120015185612849565b61012087015151611d43906004614fd6565b611d4d908361500d565b33818501529150611d5f60208361500d565b8084018790529150611d7260208361500d565b50508151602092830120959091019490945250505050565b6060815f015163ffffffff16600314611db55760405162461bcd60e51b81526004016104c390614f58565b63ffffffff826101200151511115611ddf5760405162461bcd60e51b81526004016104c390614f8f565b6020820151611e005760405162461bcd60e51b81526004016104c390615020565b5f80600260ff16846080015160ff161190505f611e21856101000151612ad5565b90508115611e7a5761014085015151815161012087015151604088015151611e4a90605e614fd6565b611e549190614fd6565b611e5e9190614fd6565b611e69906004614fd6565b611e739190614fd6565b9250611eab565b805161012086015151604087015151611e9490605e614fd6565b611e9e9190614fd6565b611ea89190614fd6565b92505b5f836001600160401b03811115611ec457611ec4614c24565b6040519080825280601f01601f191660200182016040528015611eee576020820181803683370190505b5086519091508490611f0a908290611c1f9063ff000000614fe9565b611f14602061261b565b611f1e908261500d565b60208881015182850152909150611f35908261500d565b6040880151909150611f48828285612849565b8051611f55906004614fd6565b611f5f908361500d565b6060890151818501529150611f7560208361500d565b9150611f8682896080015185612931565b611f9160018361500d565b9150611fa2828960a0015185612941565b611fac604061261b565b611fb6908361500d565b9150611fc7828960c0015185612952565b611fd1602061261b565b611fdb908361500d565b9150611fec828960e0015185612931565b611ff760018361500d565b9150612004828585612849565b8351612011906004614fd6565b61201b908361500d565b915061202d8289610120015185612849565b6101208801515161203f906004614fd6565b612049908361500d565b91508415612080576120618289610140015185612849565b61014088015151612073906004614fd6565b61207d908361500d565b91505b50909695505050505050565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051601c81830101515f916001600160f81b03198083169003612134576040805160048082528183019092525f918291906020820181803683370190505095909201601d01516021860152505050600490910151919050565b5060019392505050565b6040805160808101825260608082525f6020830181905292820181905281019190915261216b8183612b6d565b60025481516040516121809190602001614e9a565b60405160208183030381529060405280519060200120146121b35760405162461bcd60e51b81526004016104c390614e2e565b63ffffffff8016816060015163ffffffff16036121db576121d685858584612cd8565b6113d7565b6113d785858584612d49565b60408051610120810182525f8082526020820181905260609282018390528282018190526080820181905260a0820181905260c082015260e081018290526101008101919091526122388183612f5e565b60025481604001516040516020016122509190614e9a565b60405160208183030381529060405280519060200120146122835760405162461bcd60e51b81526004016104c390614e2e565b608081015160ff16158061229e5750608081015160ff166001145b156122af576121d6858585846130af565b600260ff16816080015160ff16036122cd576121d6858585846131a5565b600360ff16816080015160ff16036122eb576121d68585858461328e565b60405162461bcd60e51b8152602060048201526016602482015275756e65787065637465642061746f6d696320666c616760501b60448201526064016104c3565b612334614964565b61233e818361190d565b60025481604001516040516020016123569190614e9a565b60405160208183030381529060405280519060200120146123b95760405162461bcd60e51b815260206004820152601f60248201527f5344505f4d73673a2077726f6e6720726563656976696e6720646f6d61696e0060448201526064016104c3565b608081015160ff1615806123d45750608081015160ff166001145b156123e5576121d685858584613376565b600260ff16816080015160ff1603612403576121d6858585846134b5565b600360ff16816080015160ff1603612421576121d6858585846135da565b600460ff16816080015160ff160361243f576121d6858585846136b0565b60405162461bcd60e51b815260206004820152602560248201527f5344505f4d53475f4552524f523a20756e65787065637465642061746f6d696360448201526420666c616760d81b60648201526084016104c3565b60605f6124a4835f015161386b565b6124b1846040015161386b565b6124bc906004614fd6565b6124c7906020614fd6565b6124d19190614fd6565b90505f816001600160401b038111156124ec576124ec614c24565b6040519080825280601f01601f191660200182016040528015612516576020820181803683370190505b508451909150829061252a908290846138b6565b84516125359061386b565b61253f908261500d565b60208681015182850152909150612556908261500d565b905061256781866060015184612952565b6125716020612963565b61257b908261500d565b905061258c818660400151846138b6565b612599856040015161386b565b6125a3908261500d565b5090949350505050565b5f806125b884613911565b905080856040516020016125cc9190614e9a565b60408051601f1981840301815282825280516020918201209083019390935281019190915260608101849052608001604051602081830303815290604052805190602001209150509392505050565b5f8160088114612727576010811461273057601881146127395760208114612742576028811461274b5760308114612754576038811461275d5760408114612766576048811461276f57605081146127785760588114612781576060811461278a5760688114612793576070811461279c57607881146127a557608081146127ae57608881146127b757609081146127c057609881146127c95760a081146127d25760a881146127db5760b081146127e45760b881146127ed5760c081146127f65760c881146127ff5760d081146128085760d881146128115760e0811461281a5760e881146128235760f0811461282c5760f8811461283557610100811461283e5760209150612843565b60019150612843565b60029150612843565b60039150612843565b60049150612843565b60059150612843565b60069150612843565b60079150612843565b60089150612843565b60099150612843565b600a9150612843565b600b9150612843565b600c9150612843565b600d9150612843565b600e9150612843565b600f9150612843565b60109150612843565b60119150612843565b60129150612843565b60139150612843565b60149150612843565b60159150612843565b60169150612843565b60179150612843565b60189150612843565b60199150612843565b601a9150612843565b601b9150612843565b601c9150612843565b601d9150612843565b601e9150612843565b601f9150612843565b602091505b50919050565b8151612856848284612952565b61286160048561500d565b93508063ffffffff168410156128d45760405162461bcd60e51b815260206004820152603260248201527f7661724279746573546f42797465733a206f6666736574206c657373207468616044820152710dc40e8d0ca40d2dce0eae840d8cadccee8d60731b60648201526084016104c3565b6128e463ffffffff82168561500d565b93508015806113d7578483018051601f84168015602002818801018581018215602002838601015b8183101561292457825181526020928301920161290c565b5050509152505050505050565b9091015f19810180519290915252565b909101600719810180519290915252565b909101600319810180519290915252565b5f61296d8261261b565b92915050565b60605f6129808484015190565b63ffffffff16905061299360048561500d565b9350838111156129fe5760405162461bcd60e51b815260206004820152603060248201527f6279746573546f56617242797465733a206f6666736574206c6573732074686160448201526f6e206c656e677468206f6620626f647960801b60648201526084016104c3565b612a08818561500d565b9350606081158015612a2557604051915060208201604052612a6f565b6040519150601f8316801560200281840101848101888315602002848a0101015b81831015612a5e578051835260209283019201612a46565b5050848452601f01601f1916604052505b50949350505050565b80515f9081816001600160401b03811115612a9557612a95614c24565b6040519080825280601f01601f191660200182016040528015612abf576020820181803683370190505b5084518152938201519190930151900392915050565b6040805160208082528183019092526060915f919060208201818036833750506040805160208082528183019092529293505f9291508082018180368337019050509050606084602084015260015b6020811015612a6f578060208501035181602085010351808203612b635760405193506020860151838501528284528260208501016040525050612a6f565b5050600101612b24565b80515f612b7a8284015190565b612b85906020614fe9565b90505f8163ffffffff166001600160401b03811115612ba657612ba6614c24565b6040519080825280601f01601f191660200182016040528015612bd0576020820181803683370190505b509050612bde83858361393e565b612be78161386b565b612bf1908461500d565b92505f612bfe8486015190565b9050612c0b60208561500d565b93505f612c188587015190565b9050612c24602061261b565b612c2e908661500d565b94505f612c3b8688015190565b612c46906020614fe9565b90505f8163ffffffff166001600160401b03811115612c6757612c67614c24565b6040519080825280601f01601f191660200182016040528015612c91576020820181803683370190505b509050612c9f87898361393e565b612ca88161386b565b612cb2908861500d565b5093885250602087019190915263ffffffff166060860152604090940193909352505050565b612ce18161397c565b6001600160c01b031663ff098be785858585604001516040518563ffffffff1660e01b8152600401612d169493929190615089565b5f604051808303815f87803b158015612d2d575f80fd5b505af1158015612d3f573d5f803e3d5ffd5b5050505050505050565b5f612d8e85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505050602085015186915061398a565b90508063ffffffff16826060015163ffffffff1614612def5760405162461bcd60e51b815260206004820152601a60248201527f5344504d73673a2073657175656e6365206e6f7420657175616c00000000000060448201526064016104c3565b5f60605f612dfc8561397c565b9050806001600160c01b03163b5f03612e46575f925060405180604001604052806014815260200173726563656976657220686173206e6f20636f646560601b8152509150612f11565b604080860151905163c09b261b60e01b81526001600160c01b0383169163c09b261b91612e7b918c918c918c91600401615089565b5f604051808303815f87803b158015612e92575f80fd5b505af1925050508015612ea3575060015b612f0c57612eaf6150bf565b806308c379a003612ed55750612ec36150d8565b80612ece5750612ed7565b9150612f11565b505b3d808015612f00576040519150601f19603f3d011682016040523d82523d5f602084013e612f05565b606091505b5050612f11565b600192505b7f5c739d2e6f1ca8bbfc6b71f12b702b9c87e02646edd83b3600d624abb67fab0488888884888888604051612f4c9796959493929190615155565b60405180910390a15050505050505050565b8051612f69826120db565b63ffffffff168352612f7b6020612963565b612f85908261500d565b9050612f918183015190565b6020840152612f9e602090565b612fab9060ff168261500d565b90505f612fb88284612973565b604085018190528051909150612fcf906004614fd6565b612fd9908361500d565b9150612fe58284015190565b6060850152612ff560208361500d565b91506130018284015190565b60ff16608085015261301460018361500d565b91506130208284015190565b6001600160401b031660a085015261303960088361500d565b91506130458284015190565b63ffffffff1660c085015261305b60048361500d565b91506130678284612973565b60e085018190525161307a906004614fd6565b613084908361500d565b9150600260ff16846080015160ff161115610841576130a38284612973565b61010085015250505050565b5f606063ffffffff80168360c0015163ffffffff160361310c576130d5868686866139bd565b6080850151919350915060ff166131075780826131055760405162461bcd60e51b81526004016104c391906151a4565b505b61311e565b61311886868686613af1565b90925090505b7fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d38360200151878787876040015161315589613ccb565b8960c001518a60a001518b608001518b8b60405161317d9b9a999897969594939291906151b6565b60405180910390a1600160ff16836080015160ff1603610fde57610fde838787878686613cd9565b6131ae81613ccb565b6001600160c01b031663e5512e9782602001518686868660c001518760a001518860e001516040518863ffffffff1660e01b81526004016131f5979695949392919061524d565b5f604051808303815f87803b15801561320c575f80fd5b505af115801561321e573d5f803e3d5ffd5b505050507fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d38160200151858585856040015161325987613ccb565b8760c001518860a00151896080015160016040516132809a99989796959493929190615299565b60405180910390a150505050565b61329781613ccb565b602082015160c083015160a084015160e0850151610100860151604051633db5d43960e21b81526001600160c01b03969096169563f6d750e4956132e59590948c948c948c94600401615339565b5f604051808303815f87803b1580156132fc575f80fd5b505af115801561330e573d5f803e3d5ffd5b505050507fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d38160200151858585856040015161334987613ccb565b60c088015160a089015160808a01516101008b01516040516132809a9998979695949392916001916151b6565b5f606063ffffffff80168360c0015163ffffffff16036133d35761339c86868686613d96565b6080850151919350915060ff166133ce5780826133cc5760405162461bcd60e51b81526004016104c391906151a4565b505b6133e5565b6133df86868686613e28565b90925090505b5f805160206155118339815191528360200151878787876040015161340989613ccb565b8960c001518a60a001518b608001518b8b6040516134319b9a999897969594939291906151b6565b60405180910390a17f1e96d53fcbc2c0ed72154f086de48aea9ca84a0d40467cb73978a982e621cad283602001518460e0015185610100015160405161348d9392919092835260ff919091166020830152604082015260600190565b60405180910390a1600160ff16836080015160ff1603610fde57610fde838787878686613f68565b6134be81613ccb565b6001600160c01b031663e5512e9782602001518686868660c001518760a001518861012001516040518863ffffffff1660e01b8152600401613506979695949392919061524d565b5f604051808303815f87803b15801561351d575f80fd5b505af115801561352f573d5f803e3d5ffd5b505050505f805160206155118339815191528160200151858585856040015161355787613ccb565b8760c001518860a001518960800151600160405161357e9a99989796959493929190615299565b60405180910390a17f1e96d53fcbc2c0ed72154f086de48aea9ca84a0d40467cb73978a982e621cad281602001518260e001518361010001516040516132809392919092835260ff919091166020830152604082015260600190565b6135e381613ccb565b602082015160c083015160a0840151610120850151610140860151604051633db5d43960e21b81526001600160c01b03969096169563f6d750e4956136329590948c948c948c94600401615339565b5f604051808303815f87803b158015613649575f80fd5b505af115801561365b573d5f803e3d5ffd5b505050505f805160206155118339815191528160200151858585856040015161368387613ccb565b60c088015160a089015160808a01516101408b015160405161357e9a9998979695949392916001916151b6565b5f6136bf826101200151614008565b9050806040015160065f87876040516020016136dc929190614e1f565b6040516020818303038152906040528051906020012081526020019081526020015f2060020181905550806080015160065f8787604051602001613721929190614e1f565b6040516020818303038152906040528051906020012081526020019081526020015f206004015f6101000a8154816001600160401b0302191690836001600160401b03160217905550806060015160065f8787604051602001613785929190614e1f565b6040516020818303038152906040528051906020012081526020019081526020015f20600301819055505f80516020615511833981519152826020015186868686604001516137d388613ccb565b60c089015160a08a015160808b01516101408c01516040516138009a9998979695949392916001916151b6565b60405180910390a17f1e96d53fcbc2c0ed72154f086de48aea9ca84a0d40467cb73978a982e621cad282602001518360e0015184610100015160405161385c9392919092835260ff919091166020830152604082015260600190565b60405180910390a15050505050565b5f6020825161387a91906153bc565b90506020825161388a91906153cf565b1561389d5780613899816153e2565b9150505b806138a7816153e2565b915061296d90506020826153fa565b5f602083516138c591906153bc565b90505f602084516138d691906153cf565b11156138ea57806138e6816153e2565b9150505b6001015f5b818110156113d7576020810284015183860152601f19909401936001016138ef565b6040805160208082528183019092525f918291906020820181803683375050506020018390525090919050565b818301515f60208204600101601f831615613957576001015b5b80821015610fde578585015160208302850152602086039550600182019150613958565b5f61296d8260200151611ac5565b5f806139978585856118b1565b5f818152600460205260408120805492935063ffffffff90921691829161141183614f36565b5f60605f60606139cc85613ccb565b6001600160c01b03163b5f03613a10575050604080518082019091526014815273726563656976657220686173206e6f20636f646560601b60208201525f90613ae4565b613a1985613ccb565b6001600160c01b031663ff098be78989898960e001516040518563ffffffff1660e01b8152600401613a4e9493929190615089565b5f604051808303815f87803b158015613a65575f80fd5b505af1925050508015613a76575060015b613adf57613a826150bf565b806308c379a003613aa85750613a966150d8565b80613aa15750613aaa565b9050613ae4565b505b3d808015613ad3576040519150601f19603f3d011682016040523d82523d5f602084013e613ad8565b606091505b5050613ae4565b600191505b9097909650945050505050565b5f60605f613b3987878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505050606087015188915061398a565b90508063ffffffff168460c0015163ffffffff1614613b9a5760405162461bcd60e51b815260206004820152601a60248201527f5344504d73673a2073657175656e6365206e6f7420657175616c00000000000060448201526064016104c3565b5f60605f613ba787613ccb565b9050806001600160c01b03163b5f03613bf1575f925060405180604001604052806014815260200173726563656976657220686173206e6f20636f646560601b8152509150613cbc565b60e087015160405163c09b261b60e01b81526001600160c01b0383169163c09b261b91613c26918e918e918e91600401615089565b5f604051808303815f87803b158015613c3d575f80fd5b505af1925050508015613c4e575060015b613cb757613c5a6150bf565b806308c379a003613c805750613c6e6150d8565b80613c795750613c82565b9150613cbc565b505b3d808015613cab576040519150601f19603f3d011682016040523d82523d5f602084013e613cb0565b606091505b5050613cbc565b600192505b50909890975095505050505050565b5f61296d8260600151611ac5565b5f613ce387613ccb565b905085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050505060408801526060870184905282613d32576003613d35565b60025b60ff16608088015282613d485781613d58565b60405180602001604052805f8152505b6101008801526001546001600160c01b031663e41fb51782613d798a611640565b6040518363ffffffff1660e01b81526004016113a1929190614df4565b5f60605f6060613da585613ccb565b6001600160c01b03163b5f03613de9575050604080518082019091526014815273726563656976657220686173206e6f20636f646560601b60208201525f90613ae4565b613df285613ccb565b6001600160c01b031663ff098be78989898961012001516040518563ffffffff1660e01b8152600401613a4e9493929190615089565b5f60605f613e7087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505050606087015188915061398a565b90508063ffffffff168460c0015163ffffffff1614613edb5760405162461bcd60e51b815260206004820152602160248201527f5344505f4d53475f4552524f523a2073657175656e6365206e6f7420657175616044820152601b60fa1b60648201526084016104c3565b5f60605f613ee887613ccb565b9050806001600160c01b03163b5f03613f32575f925060405180604001604052806014815260200173726563656976657220686173206e6f20636f646560601b8152509150613cbc565b61012087015160405163c09b261b60e01b81526001600160c01b0383169163c09b261b91613c26918e918e918e91600401615089565b5f613f7287613ccb565b905085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050505060408801526060870184905282613fc1576003613fc4565b60025b60ff16608088015282613fd75781613fe7565b60405180602001604052805f8152505b6101408801526001546001600160c01b031663e41fb51782613d798a611d8a565b6040805160a080820183525f808352606060208085018290528486018390528185018390526080808601849052865194850187528385529084018290529483018290528201819052928101839052909161406184614168565b90505f5b81602001515181101561415f575f8260200151828151811061408957614089615411565b60200260200101519050805f015161ffff165f036140b5576140aa8161433c565b61ffff16845261414c565b805161ffff166001036140d1576040810151602085015261414c565b805161ffff166002036140fd576140f360206140ee836040015190565b015190565b604085015261414c565b805161ffff166003036141275761411d614118826040015190565b612a78565b606085015261414c565b805161ffff1660040361414c5761413d8161434f565b6001600160401b031660808501525b5080614157816153e2565b915050614065565b50909392505050565b604080518082019091525f8152606060208201526006825110156141ce5760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e67746800000000000000000060448201526064016104c3565b604080518082019091525f80825260606020830152906141f66141f18584614367565b61438d565b61ffff168152614207600683614fd6565b91505f825b85518110156142605761423161422c87614227846002614fd6565b614427565b61444f565b61423c906006614fe9565b61424c9063ffffffff1682614fd6565b905081614258816153e2565b92505061420c565b5f826001600160401b0381111561427957614279614c24565b6040519080825280602002602001820160405280156142c557816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816142975790505b5090505f92505b865185101561432d5760408051606080820183525f8083526020830152918101919091526142fa8887614540565b9650905080828561430a816153e2565b96508151811061431c5761431c615411565b6020026020010181905250506142cc565b60208401525090949350505050565b5f61296d6141f160028460400151015190565b5f61296d61436260088460400151015190565b614698565b81515f90614376836002614fd6565b1115614380575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f815181106143ce576143ce615411565b60200101906001600160f81b03191690815f1a905350815f1a60f81b816001815181106143fd576143fd615411565b60200101906001600160f81b03191690815f1a9053505f61441e825f614367565b95945050505050565b81515f90614436836004614fd6565b1115614440575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f8151811061449057614490615411565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816001815181106144c0576144c0615411565b60200101906001600160f81b03191690815f1a9053508160011a60f81b816002815181106144f0576144f0615411565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160038151811061451f5761451f615411565b60200101906001600160f81b03191690815f1a9053505f61441e825f614427565b60408051606080820183525f8083526020830152918101919091525f828451116145b85760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b60648201526084016104c3565b60068310156145fa5760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b60448201526064016104c3565b60408051606080820183525f8083526020830152918101919091526146226141f18686614367565b61ffff168152614633600285614fd6565b935061464261422c8686614427565b63ffffffff166020820152614658600485614fd6565b935061466f8585836020015163ffffffff16614849565b604082015260208101516146899063ffffffff1685614fd6565b935091508290505b9250929050565b6040805160088082528183019092525f9160c084901b9183916020820181803683370190505090508160071a60f81b815f815181106146d9576146d9615411565b60200101906001600160f81b03191690815f1a9053508160061a60f81b8160018151811061470957614709615411565b60200101906001600160f81b03191690815f1a9053508160051a60f81b8160028151811061473957614739615411565b60200101906001600160f81b03191690815f1a9053508160041a60f81b8160038151811061476957614769615411565b60200101906001600160f81b03191690815f1a9053508160031a60f81b8160048151811061479957614799615411565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816005815181106147c9576147c9615411565b60200101906001600160f81b03191690815f1a9053508160011a60f81b816006815181106147f9576147f9615411565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160078151811061482857614828615411565b60200101906001600160f81b03191690815f1a9053505f61441e825f6148bd565b82516060906148588385614fd6565b1115614862575f80fd5b5f826001600160401b0381111561487b5761487b614c24565b6040519080825280601f01601f1916602001820160405280156148a5576020820181803683370190505b509050602080820190868601016118a68282876148e8565b81515f906148cc836008614fd6565b11156148d6575f80fd5b5001600801516001600160401b031690565b6020811061492057815183526148ff602084614fd6565b925061490c602083614fd6565b915061491960208261500d565b90506148e8565b805f0361492c57505050565b5f600161493a83602061500d565b61494690610100615505565b614950919061500d565b925184518416931916929092179092525050565b60408051610160810182525f8082526020820181905260609282018390528282018190526080820181905260a0820181905260c0820181905260e08201819052610100820152610120810182905261014081019190915290565b5f8083601f8401126149ce575f80fd5b5081356001600160401b038111156149e4575f80fd5b602083019150836020828501011115614691575f80fd5b80358015158114614a0a575f80fd5b919050565b5f805f805f8060808789031215614a24575f80fd5b86356001600160401b0380821115614a3a575f80fd5b614a468a838b016149be565b909850965060208901359550869150614a6160408a016149fb565b94506060890135915080821115614a76575f80fd5b50614a8389828a016149be565b979a9699509497509295939492505050565b5f805f805f8060808789031215614aaa575f80fd5b86356001600160401b0380821115614ac0575f80fd5b614acc8a838b016149be565b9098509650602089013595506040890135915080821115614aeb575f80fd5b50614af889828a016149be565b979a9699509497949695606090950135949350505050565b5f805f60408486031215614b22575f80fd5b8335925060208401356001600160401b03811115614b3e575f80fd5b614b4a868287016149be565b9497909650939450505050565b5f60208284031215614b67575f80fd5b81356001600160c01b0381168114611af0575f80fd5b5f805f805f805f8060c0898b031215614b94575f80fd5b88356001600160401b0380821115614baa575f80fd5b614bb68c838d016149be565b909a50985060208b01359750889150614bd160408c016149fb565b965060608b0135915080821115614be6575f80fd5b50614bf38b828c016149be565b909550935050608089013560ff81168114614c0c575f80fd5b8092505060a089013590509295985092959890939650565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f191681016001600160401b0381118282101715614c5d57614c5d614c24565b6040525050565b5f6020808385031215614c75575f80fd5b82356001600160401b0380821115614c8b575f80fd5b818501915085601f830112614c9e575f80fd5b813581811115614cb057614cb0614c24565b6040519150614cc8601f8201601f1916850183614c38565b8082528684828501011115614cdb575f80fd5b80848401858401375f90820190930192909252509392505050565b5f8060208385031215614d07575f80fd5b82356001600160401b03811115614d1c575f80fd5b614d28858286016149be565b90969095509350505050565b5f805f805f60608688031215614d48575f80fd5b85356001600160401b0380821115614d5e575f80fd5b614d6a89838a016149be565b9097509550602088013594506040880135915080821115614d89575f80fd5b50614d96888289016149be565b969995985093965092949392505050565b5f5b83811015614dc1578181015183820152602001614da9565b50505f910152565b5f8151808452614de0816020860160208601614da7565b601f01601f19169290920160200192915050565b6001600160c01b03831681526040602082018190525f90614e1790830184614dc9565b949350505050565b818382375f9101908152919050565b6020808252601e908201527f5344504d73673a2077726f6e6720726563656976696e6720646f6d61696e0000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f8251614eab818460208701614da7565b9190910192915050565b87815260e060208201525f614ecd60e0830189614dc9565b87604084015263ffffffff871660608401526001600160401b038616608084015282810360a0840152614f008186614dc9565b905082810360c0840152614f148185614dc9565b9a9950505050505050505050565b634e487b7160e01b5f52601160045260245ffd5b5f63ffffffff808316818103614f4e57614f4e614f22565b6001019392505050565b6020808252601f908201527f656e636f64655344504d6573736167653a2077726f6e672076657273696f6e00604082015260600190565b60208082526027908201527f656e636f64655344504d6573736167653a20626f6479206c656e677468206f76604082015266195c9b1a5b5a5d60ca1b606082015260800190565b8082018082111561296d5761296d614f22565b63ffffffff81811683821601908082111561500657615006614f22565b5092915050565b8181038181111561296d5761296d614f22565b60208082526021908201527f656e636f64655344504d6573736167653a207a65726f206d65737361676520696040820152601960fa1b606082015260800190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b606081525f61509c606083018688615061565b84602084015282810360408401526150b48185614dc9565b979650505050505050565b5f60033d11156150d55760045f803e505f5160e01c5b90565b5f60443d10156150e55790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561511457505050505090565b828501915081518181111561512c5750505050505090565b843d87010160208285010111156151465750505050505090565b6118a660208286010187614c38565b60c081525f61516860c08301898b615061565b602083018890526001600160c01b038716604084015263ffffffff86166060840152841515608084015282810360a0840152614f148185614dc9565b602081525f611af06020830184614dc9565b5f6101408d83528060208401526151d08184018d8f615061565b90508a604084015282810360608401526151ea818b614dc9565b6001600160c01b038a16608085015263ffffffff891660a08501526001600160401b03881660c085015260ff871660e0850152851515610100850152838103610120850152905061523b8185614dc9565b9e9d5050505050505050505050505050565b87815260c060208201525f61526660c08301888a615061565b86604084015263ffffffff861660608401526001600160401b038516608084015282810360a0840152614f148185614dc9565b5f6101408c83528060208401526152b38184018c8e615061565b905089604084015282810360608401526152cd818a614dc9565b6001600160c01b03989098166080840152505063ffffffff9490941660a08501526001600160401b039290921660c084015260ff1660e083015215156101008201528082036101209091015260078152667375636365737360c81b602082015260400195945050505050565b88815260e060208201525f61535260e08301898b615061565b87604084015263ffffffff871660608401526001600160401b038616608084015282810360a08401526153858186614dc9565b905082810360c08401526153998185614dc9565b9b9a5050505050505050505050565b634e487b7160e01b5f52601260045260245ffd5b5f826153ca576153ca6153a8565b500490565b5f826153dd576153dd6153a8565b500690565b5f600182016153f3576153f3614f22565b5060010190565b808202811582820484141761296d5761296d614f22565b634e487b7160e01b5f52603260045260245ffd5b600181815b8085111561545f57815f190482111561544557615445614f22565b8085161561545257918102915b93841c939080029061542a565b509250929050565b5f826154755750600161296d565b8161548157505f61296d565b816001811461549757600281146154a1576154bd565b600191505061296d565b60ff8411156154b2576154b2614f22565b50506001821b61296d565b5060208310610133831016604e8410600b84101617156154e0575081810a61296d565b6154ea8383615425565b805f19048211156154fd576154fd614f22565b029392505050565b5f611af0838361546756fecf362ac32ec1d372722255e0e7a9b99808ee047e0d29b8439c3e69c6317ab289a2646970667358221220f31288db42fa914d02933b3855f60b16d708b6b3e731bbe7e1674838375cd26364736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";

    private static final String PTC_BYTE_CODE = "608060405234801562000010575f80fd5b50604051620061b4380380620061b4833981016040819052620000339162001bc7565b6200003e336200005a565b6200004981620000a9565b6200005362000204565b5062001f9b565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f620000b582620002cd565b90505f81604001516003811115620000d157620000d162001c7a565b14620001245760405162461bcd60e51b815260206004820152601e60248201527f77726f6e67207479706520666f72206263646e7320726f6f742063657274000060448201526064015b60405180910390fd5b5f6200013a6200013483620004bb565b62000608565b805190602001209050826001604051806040016040528060048152602001631c9bdbdd60e21b81525060405162000172919062001c8e565b908152602001604051809103902090816200018e919062001d37565b50604051806040016040528060048152602001631c9bdbdd60e21b81525060025f8381526020019081526020015f209081620001cb919062001d37565b506040518181527f7c787bfbe942686b5f41acec151012ca79c6b81c1c5a23cee512781cf3d5b9bb9060200160405180910390a1505050565b5f54600160c81b900460ff16156200026f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b60648201526084016200011b565b5f5460ff600160c01b90910481161015620002cb575f805460ff60c01b191660ff60c01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b620002d762001a5b565b620002e162001a5b565b5f620002ed8462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000319576200031962001dff565b6020908102919091010151805190915061ffff166200033f57604081015184526200049c565b805161ffff165f19016200035d57604081015160208501526200049c565b805161ffff1660011901620003c65762000377816200090a565b60ff1660038111156200038e576200038e62001c7a565b84604001906003811115620003a757620003a762001c7a565b90816003811115620003bd57620003bd62001c7a565b9052506200049c565b805161ffff1660021901620003f657620003eb620003e5826040015190565b62000928565b60608501526200049c565b805161ffff16600319016200042457620004108162000a13565b6001600160401b031660808501526200049c565b805161ffff166004190162000452576200043e8162000a13565b6001600160401b031660a08501526200049c565b805161ffff16600519016200047157604081015160c08501526200049c565b805161ffff16600619016200049c576200049662000490826040015190565b62000a35565b60e08501525b5080620004a98162001e27565b915050620002f1565b50909392505050565b620004c562001ade565b5f82604001516003811115620004df57620004df62001c7a565b03620004ff5760c0820151620004f59062000b58565b6020015192915050565b6001826040015160038111156200051a576200051a62001c7a565b036200053a5760c0820151620005309062000c23565b6080015192915050565b60028260400151600381111562000555576200055562001c7a565b03620005755760c08201516200056b9062000d95565b6060015192915050565b60038260400151600381111562000590576200059062001c7a565b03620005b05760c0820151620005a69062000ee8565b6040015192915050565b60405162461bcd60e51b815260206004820152602660248201527f676574436572744f776e65724f69643a20636572742074797065206e6f7420736044820152651d5c1c1bdc9d60d21b60648201526084016200011b565b60408051600280825260608281019093525f9190816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081620006215790505090506200067f5f62000679855f0151600181111562000673576200067362001c7a565b62000fd2565b62000fe8565b815f8151811062000694576200069462001dff565b6020026020010181905250620006b6600184602001516200105460201b60201c565b81600181518110620006cc57620006cc62001dff565b6020026020010181905250620006f860405180604001604052805f61ffff168152602001606081525090565b602081018290526200070a8162001096565b949350505050565b604080518082019091525f8152606060208201526006825110156200077a5760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e67746800000000000000000060448201526064016200011b565b604080518082019091525f8082526060602083015290620007a6620007a08584620011d5565b620011fe565b61ffff168152620007b960068362001e42565b91505f825b85518110156200082057620007ea620007e487620007de84600262001e42565b620012a0565b620012cb565b620007f790600662001e58565b620008099063ffffffff168262001e42565b905081620008178162001e27565b925050620007be565b5f826001600160401b038111156200083c576200083c62001b8f565b6040519080825280602002602001820160405280156200088a57816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816200085b5790505b5090505f92505b8651851015620008fb5760408051606080820183525f808352602083015291810191909152620008c28887620013ca565b96509050808285620008d48162001e27565b965081518110620008e957620008e962001dff565b60200260200101819052505062000891565b60208401525090949350505050565b5f62000922600183604001516200153660201b60201c565b92915050565b6200093262001ade565b6200093c62001ade565b5f620009488462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000974576200097462001dff565b6020908102919091010151805190915061ffff16620009e45762000998816200090a565b60ff166001811115620009af57620009af62001c7a565b84906001811115620009c557620009c562001c7a565b90816001811115620009db57620009db62001c7a565b905250620009fd565b805161ffff165f1901620009fd57604081015160208501525b508062000a0a8162001e27565b9150506200094c565b5f6200092262000a2f600884604001516200153660201b60201c565b6200153b565b62000a616040518060800160405280606081526020016060815260200160608152602001606081525090565b62000a8d6040518060800160405280606081526020016060815260200160608152602001606081525090565b5f62000a998462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000ac55762000ac562001dff565b6020908102919091010151805190915061ffff1662000aeb576040810151845262000b42565b805161ffff165f190162000b09576040810151602085015262000b42565b805161ffff166001190162000b28576040810151604085015262000b42565b805161ffff166002190162000b4257604081015160608501525b508062000b4f8162001e27565b91505062000a9d565b62000b6262001af8565b62000b6c62001af8565b5f62000b788462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000ba45762000ba462001dff565b6020908102919091010151805190915061ffff1662000bca576040810151845262000c0d565b805161ffff165f190162000bf35762000be8620003e5826040015190565b602085015262000c0d565b805161ffff166001190162000c0d57604081015160408501525b508062000c1a8162001e27565b91505062000b7c565b62000c2d62001b14565b62000c3762001b14565b5f62000c438462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000c6f5762000c6f62001dff565b6020908102919091010151805190915061ffff1662000c95576040810151845262000d7f565b805161ffff165f190162000cfd5762000cae816200090a565b60ff16600181111562000cc55762000cc562001c7a565b8460200190600181111562000cde5762000cde62001c7a565b9081600181111562000cf45762000cf462001c7a565b90525062000d7f565b805161ffff166001190162000d1c576040810151604085015262000d7f565b805161ffff166002190162000d3b576040810151606085015262000d7f565b805161ffff166003190162000d655762000d5a620003e5826040015190565b608085015262000d7f565b805161ffff166004190162000d7f57604081015160a08501525b508062000d8c8162001e27565b91505062000c47565b62000d9f62001b45565b62000da962001b45565b5f62000db58462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000de15762000de162001dff565b6020908102919091010151805190915061ffff1662000e07576040810151845262000ed2565b805161ffff165f190162000e25576040810151602085015262000ed2565b805161ffff166001190162000e8e5762000e3f816200090a565b60ff16600281111562000e565762000e5662001c7a565b8460400190600281111562000e6f5762000e6f62001c7a565b9081600281111562000e855762000e8562001c7a565b90525062000ed2565b805161ffff166002190162000eb85762000ead620003e5826040015190565b606085015262000ed2565b805161ffff166003190162000ed257604081015160808501525b508062000edf8162001e27565b91505062000db9565b62000ef262001b6c565b62000efc62001b6c565b5f62000f088462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000f345762000f3462001dff565b6020908102919091010151805190915061ffff1662000f5a576040810151845262000fbc565b805161ffff165f190162000f78576040810151602085015262000fbc565b805161ffff166002190162000fa25762000f97620003e5826040015190565b604085015262000fbc565b805161ffff166003190162000fbc57604081015160608501525b508062000fc98162001e27565b91505062000f0c565b5f81600181111562000922576200092262001c7a565b60408051606080820183525f8083526020830181905282840191909152825160018082528185019094529192909190602082018180368337505081516001830186905282525090506040805160608101825261ffff959095168552600160208601528401525090919050565b60408051606080820183525f808352602083015291810191909152506040805160608101825261ffff939093168352815163ffffffff16602084015282015290565b60605f620010a48362001706565b90505f620010b482600662001e58565b63ffffffff166001600160401b03811115620010d457620010d462001b8f565b6040519080825280601f01601f191660200182016040528015620010ff576020820181803683370190505b5090506200112e60026200111c865f0151620011fe60201b60201c565b83909101600119810180519290915252565b6200115160066200113f84620012cb565b83909101600319810180519290915252565b60065f5b602086015151811015620011cb575f620011958760200151838151811062001181576200118162001dff565b60200260200101516200178360201b60201c565b9050620011a483828662001834565b8051620011b2908462001e42565b9250508080620011c29062001e27565b91505062001155565b5090949350505050565b81515f90620011e683600262001e42565b1115620011f1575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f8151811062001242576200124262001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160018151811062001274576200127462001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620011d5565b95945050505050565b81515f90620012b183600462001e42565b1115620012bc575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f815181106200130f576200130f62001dff565b60200101906001600160f81b03191690815f1a9053508160021a60f81b8160018151811062001342576200134262001dff565b60200101906001600160f81b03191690815f1a9053508160011a60f81b8160028151811062001375576200137562001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600381518110620013a757620013a762001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620012a0565b60408051606080820183525f8083526020830152918101919091525f82845111620014445760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b60648201526084016200011b565b6006831015620014885760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b60448201526064016200011b565b60408051606080820183525f808352602083015291810191909152620014b3620007a08686620011d5565b61ffff168152620014c660028562001e42565b9350620014d8620007e48686620012a0565b63ffffffff166020820152620014f060048562001e42565b93506200150f8585836020015163ffffffff166200191a60201b60201c565b604082015260208101516200152b9063ffffffff168562001e42565b909590945092505050565b015190565b6040805160088082528183019092525f9160c084901b9183916020820181803683370190505090508160071a60f81b815f815181106200157f576200157f62001dff565b60200101906001600160f81b03191690815f1a9053508160061a60f81b81600181518110620015b257620015b262001dff565b60200101906001600160f81b03191690815f1a9053508160051a60f81b81600281518110620015e557620015e562001dff565b60200101906001600160f81b03191690815f1a9053508160041a60f81b8160038151811062001618576200161862001dff565b60200101906001600160f81b03191690815f1a9053508160031a60f81b816004815181106200164b576200164b62001dff565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816005815181106200167e576200167e62001dff565b60200101906001600160f81b03191690815f1a9053508160011a60f81b81600681518110620016b157620016b162001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600781518110620016e357620016e362001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620019a2565b5f80805b6020840151518110156200177c575f8460200151828151811062001732576200173262001dff565b6020026020010151905080604001515183600662001751919062001e58565b63ffffffff1662001763919062001e42565b9250508080620017739062001e27565b9150506200170a565b5092915050565b60605f8260200151600662001799919062001e58565b63ffffffff166001600160401b03811115620017b957620017b962001b8f565b6040519080825280601f01601f191660200182016040528015620017e4576020820181803683370190505b5090506200180160026200111c855f0151620011fe60201b60201c565b6200181c60066200113f8560200151620012cb60201b60201c565b6200092260068460400151836200183460201b60201c565b815181516200184a63ffffffff83168662001e42565b1115620018cb5760405162461bcd60e51b815260206004820152604260248201527f7661724279746573546f4279746573426967456e6469616e3a206f666673657460448201527f2069732067726561746572207468616e20746865206f7574707574206c656e676064820152610e8d60f31b608482015260a4016200011b565b80158062001913578483018051601f84168015602002818801018581018215602002838601015b818310156200190c578251815260209283019201620018f2565b5050509152505b5050505050565b82516060906200192b838562001e42565b111562001936575f80fd5b5f826001600160401b0381111562001952576200195262001b8f565b6040519080825280601f01601f1916602001820160405280156200197d576020820181803683370190505b5090506020808201908686010162001997828287620019d0565b509095945050505050565b81515f90620019b383600862001e42565b1115620019be575f80fd5b5001600801516001600160401b031690565b6020811062001a105781518352620019ea60208462001e42565b9250620019f960208362001e42565b915062001a0860208262001e78565b9050620019d0565b805f0362001a1d57505050565b5f600162001a2d83602062001e78565b62001a3b9061010062001f87565b62001a47919062001e78565b925184518416931916929092179092525050565b6040805161010081018252606080825260208201529081015f815260200162001a8362001ade565b81526020015f6001600160401b031681526020015f6001600160401b031681526020016060815260200162001ad96040518060800160405280606081526020016060815260200160608152602001606081525090565b905290565b60408051808201909152805f5b8152602001606081525090565b60405180606001604052806060815260200162001aeb62001ade565b6040805160c0810190915260608152602081015f8152602001606081526020016060815260200162001aeb62001ade565b6040805160a081018252606080825260208201529081015f815260200162001aeb62001ade565b6040518060800160405280606081526020016060815260200162001aeb62001ade565b634e487b7160e01b5f52604160045260245ffd5b5f5b8381101562001bbf57818101518382015260200162001ba5565b50505f910152565b5f6020828403121562001bd8575f80fd5b81516001600160401b038082111562001bef575f80fd5b818401915084601f83011262001c03575f80fd5b81518181111562001c185762001c1862001b8f565b604051601f8201601f19908116603f0116810190838211818310171562001c435762001c4362001b8f565b8160405282815287602084870101111562001c5c575f80fd5b62001c6f83602083016020880162001ba3565b979650505050505050565b634e487b7160e01b5f52602160045260245ffd5b5f825162001ca181846020870162001ba3565b9190910192915050565b600181811c9082168062001cc057607f821691505b60208210810362001cdf57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562001d32575f81815260208120601f850160051c8101602086101562001d0d5750805b601f850160051c820191505b8181101562001d2e5782815560010162001d19565b5050505b505050565b81516001600160401b0381111562001d535762001d5362001b8f565b62001d6b8162001d64845462001cab565b8462001ce5565b602080601f83116001811462001da1575f841562001d895750858301515b5f19600386901b1c1916600185901b17855562001d2e565b5f85815260208120601f198616915b8281101562001dd15788860151825594840194600190910190840162001db0565b508582101562001def57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820162001e3b5762001e3b62001e13565b5060010190565b8082018082111562000922576200092262001e13565b63ffffffff8181168382160190808211156200177c576200177c62001e13565b8181038181111562000922576200092262001e13565b600181815b8085111562001ece57815f190482111562001eb25762001eb262001e13565b8085161562001ec057918102915b93841c939080029062001e93565b509250929050565b5f8262001ee65750600162000922565b8162001ef457505f62000922565b816001811462001f0d576002811462001f185762001f38565b600191505062000922565b60ff84111562001f2c5762001f2c62001e13565b50506001821b62000922565b5060208310610133831016604e8410600b841016171562001f5d575081810a62000922565b62001f69838362001e8e565b805f190482111562001f7f5762001f7f62001e13565b029392505050565b5f62001f94838362001ed6565b9392505050565b61420b8062001fa95f395ff3fe608060405234801561000f575f80fd5b5060043610610153575f3560e01c8063a1d6c964116100bf578063d919581711610079578063d91958171461031d578063dde1854614610330578063e1ceb03014610343578063f08c69a114610356578063f2fde38b1461035e578063fe8cc1e314610371575f80fd5b8063a1d6c9641461028f578063ad86bc03146102a2578063adc64a18146102cf578063adf22b3f146102e2578063bf812b2c146102f7578063c3292b6d1461030a575f80fd5b8063715018a611610110578063715018a6146101fe57806373d6c7bd146102065780637adcff0c146102195780638da5cb5b1461025957806390157ffb1461026957806395e8fcee1461027c575f80fd5b806304802a34146101575780630604420e1461016c57806309158b211461019557806312dabd3a146101b55780634ddf47d4146101d857806355c265fe146101eb575b5f80fd5b61016a610165366004613a6c565b610384565b005b61017f61017a366004613a6c565b6104c7565b60405161018c9190613af7565b60405180910390f35b6101a86101a3366004613b09565b610583565b60405161018c9190613b54565b6101c86101c3366004613b62565b6105b4565b604051901515815260200161018c565b61016a6101e6366004613c42565b61060d565b61016a6101f9366004613a6c565b610744565b61016a6108b2565b6101c8610214366004613a6c565b6108c5565b610241610227366004613c92565b60056020525f90815260409020546001600160c01b031681565b6040516001600160c01b03909116815260200161018c565b5f546001600160c01b0316610241565b61017f610277366004613b09565b610907565b61016a61028a366004613a6c565b61099e565b61016a61029d366004613c92565b610bbb565b6102c16102b0366004613b09565b60046020525f908152604090205481565b60405190815260200161018c565b61017f6102dd366004613b09565b610e0c565b6102ea610ea7565b60405161018c9190613cad565b61016a610305366004613cf7565b610f2c565b6101c8610318366004613d1d565b61110c565b61017f61032b366004613b62565b611153565b61017f61033e366004613d1d565b611225565b61017f610351366004613c42565b61126c565b61017f611290565b61016a61036c366004613cf7565b61134f565b61017f61037f366004613a6c565b6113c8565b61038c61149b565b5f6103cb83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506114f492505050565b90505f6103db8260800151611694565b80516020918201205f818152600483526040902091840151825491935063ffffffff16111561044d5760208381015163ffffffff1680835560408051858152928301919091527f14f6dcf24001d9e8910255539bf10f0a01ba6fcb712bdcd812fe528b9ad798d1910160405180910390a15b60208084015163ffffffff165f9081526001830190915260409020610473858783613de6565b507f8796377aabd0d7feac50b0be12f810cac9a467a6ccd01c3bb79e50e2da8fd1f28284602001516040516104b892919091825263ffffffff16602082015260400190565b60405180910390a15050505050565b606060035f84846040516104dc929190613ea0565b604051809103902081526020019081526020015f205f0180546104fe90613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90613d64565b80156105755780601f1061054c57610100808354040283529160200191610575565b820191905f5260205f20905b81548152906001019060200180831161055857829003601f168201915b505050505090505b92915050565b60068181548110610592575f80fd5b905f5260205f209060209182820401919006915054906101000a900460ff1681565b5f8060045f86866040516105c9929190613ea0565b604051809103902081526020019081526020015f206001015f8463ffffffff1681526020019081526020015f20805461060190613d64565b90501190509392505050565b5f54600160c81b900460ff161580801561063357505f546001600160c01b90910460ff16105b806106535750303b15801561065357505f54600160c01b900460ff166001145b6106bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b5f805460ff60c01b1916600160c01b17905580156106e6575f805460ff60c81b1916600160c81b1790555b6106ef8261192c565b6106f833611a72565b8015610740575f805460ff60c81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b5f61078383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611ac192505050565b90505f6107938260200151611694565b80516020808301919091205f9081526004825260408082208682015163ffffffff168352600101909252908120805492935090916107d090613d64565b9050116108135760405162461bcd60e51b815260206004820152601160248201527009dd1c189d1849c81b9bdd08199bdd5b99607a1b60448201526064016106b2565b5f61082882846040015163ffffffff16611bb5565b60808101516040519192506001917f4d2d7be42668dce2927650393613e408fc71274deac16f825eb0a869a5667e8c91610863918490613eaf565b60405180910390a1806108aa5760405162461bcd60e51b815260206004820152600f60248201526e766572696679206e6f74207061737360881b60448201526064016106b2565b505050505050565b6108ba61149b565b6108c35f611a72565b565b5f8060035f85856040516108da929190613ea0565b604051809103902081526020019081526020015f205f0180546108fc90613d64565b905011905092915050565b60026020525f90815260409020805461091f90613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461094b90613d64565b80156109965780601f1061096d57610100808354040283529160200191610996565b820191905f5260205f20905b81548152906001019060200180831161097957829003601f168201915b505050505081565b6109a661149b565b5f6109e583838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611c7792505050565b90505f6109f182611dac565b5f8181526003602052604081208054929350918290610a0f90613d64565b90501115610aec5780610a23858783613de6565b505b606083015160208101515190511015610ae7575f610a468460600151611dcb565b5f8181526001840160205260409020805491925090610a6490613d64565b90505f03610ad257610a798460600151611ddd565b5f828152600184016020526040902090610a939082613f1c565b5060408051848152602081018390527f176999d0f8f8c628a9ada0c1090671dffa60ab4b6720f3d647a823aac2368fce910160405180910390a1610ae1565b610adf8460600151611ddd565b505b50610a25565b610bb4565b80610af8858783613de6565b505b606083015160208101515190511015610b84575f610b1b8460600151611dcb565b9050610b2a8460600151611ddd565b5f828152600184016020526040902090610b449082613f1c565b5060408051848152602081018390527f176999d0f8f8c628a9ada0c1090671dffa60ab4b6720f3d647a823aac2368fce910160405180910390a150610afa565b6040518281527fc115cf6e41eccaaf9dbe48f3cbf3e82c176644e35bf1cae0839627723d980a0d906020016104b8565b5050505050565b610bc361149b565b5f600581836002811115610bd957610bd9613b20565b6002811115610bea57610bea613b20565b815260208101919091526040015f20546001600160c01b031603610c505760405162461bcd60e51b815260206004820152601760248201527f707463207665726966696572206e6f742065786973747300000000000000000060448201526064016106b2565b60015b600654811015610d8d57816002811115610c6f57610c6f613b20565b60068281548110610c8257610c82613fd7565b905f5260205f2090602091828204019190069054906101000a900460ff166002811115610cb157610cb1613b20565b03610d7b5760068054610cc690600190613fff565b81548110610cd657610cd6613fd7565b905f5260205f2090602091828204019190069054906101000a900460ff1660068281548110610d0757610d07613fd7565b905f5260205f2090602091828204019190066101000a81548160ff02191690836002811115610d3857610d38613b20565b02179055506006805480610d4e57610d4e614012565b600190038181905f5260205f2090602091828204019190066101000a81549060ff02191690559055610d8d565b80610d8581614026565b915050610c53565b5060055f826002811115610da357610da3613b20565b6002811115610db457610db4613b20565b8152602081019190915260409081015f2080546001600160c01b0319169055517f4ae9b990c01f3cf6322d2f72f0c0a7eefdcdb12b782e47f420dbc75314d7f50890610e01908390613b54565b60405180910390a150565b60036020525f9081526040902080548190610e2690613d64565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5290613d64565b8015610e9d5780601f10610e7457610100808354040283529160200191610e9d565b820191905f5260205f20905b815481529060010190602001808311610e8057829003601f168201915b5050505050905081565b60606006805480602002602001604051908101604052809291908181526020018280548015610f2257602002820191905f5260205f20905f905b82829054906101000a900460ff166002811115610f0057610f00613b20565b815260206001928301818104948501949093039092029101808411610ee15790505b5050505050905090565b610f3461149b565b5f816001600160c01b031663b93ba39c6040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610f72573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f96919061403e565b90505f600581836002811115610fae57610fae613b20565b6002811115610fbf57610fbf613b20565b815260208101919091526040015f20546001600160c01b0316146110255760405162461bcd60e51b815260206004820152601b60248201527f70746320766572696669657220616c726561647920657869737473000000000060448201526064016106b2565b600680546001810182555f919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f602082040180548392601f166101000a60ff8102199091169083600281111561108057611080613b20565b02179055508160055f83600281111561109b5761109b613b20565b60028111156110ac576110ac613b20565b81526020019081526020015f205f6101000a8154816001600160c01b0302191690836001600160c01b031602179055507e9d36884bab8205b3032d60f42239b9d5024f0acd6178f117374a9bbef092958183604051610737929190614059565b5f8060035f8686604051611121929190613ea0565b604051809103902081526020019081526020015f206001015f8481526020019081526020015f20805461060190613d64565b606060045f8585604051611168929190613ea0565b604051809103902081526020019081526020015f206001015f8363ffffffff1681526020019081526020015f2080546111a090613d64565b80601f01602080910402602001604051908101604052809291908181526020018280546111cc90613d64565b80156112175780601f106111ee57610100808354040283529160200191611217565b820191905f5260205f20905b8154815290600101906020018083116111fa57829003601f168201915b505050505090509392505050565b606060035f858560405161123a929190613ea0565b604051809103902081526020019081526020015f206001015f8381526020019081526020015f2080546111a090613d64565b80516020818301810180516001825292820191909301209152805461091f90613d64565b60606001604051806040016040528060048152602001631c9bdbdd60e21b8152506040516112be919061407f565b908152602001604051809103902080546112d790613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461130390613d64565b8015610f225780601f1061132557610100808354040283529160200191610f22565b820191905f5260205f20905b81548152906001019060200180831161133157509395945050505050565b61135761149b565b6001600160c01b0381166113bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b2565b6113c581611a72565b50565b60605f60045f85856040516113de929190613ea0565b604051809103902081526020019081526020015f209050806001015f825f015481526020019081526020015f20805461141690613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461144290613d64565b801561148d5780601f106114645761010080835404028352916020019161148d565b820191905f5260205f20905b81548152906001019060200180831161147057829003601f168201915b505050505091505092915050565b5f546001600160c01b031633146108c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b2565b6114fc6137ee565b6115046137ee565b5f61150e84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061153657611536613fd7565b6020908102919091010151805190915061ffff166115645761155781612054565b63ffffffff168452611678565b805161ffff165f190161158a5761157a81612054565b63ffffffff166020850152611678565b805161ffff16600119016115a75760408101516040850152611678565b805161ffff16600219016115d2576115c86115c3826040015190565b612067565b6060850152611678565b805161ffff16600319016115fd576115f36115ee826040015190565b61219c565b6080850152611678565b805161ffff16600419016116245761161481612054565b63ffffffff1660a0850152611678565b805161ffff166005190161164157604081015160c0850152611678565b805161ffff166006190161165e57604081015160e0850152611678565b805161ffff1660fe19016116785760408101516101008501525b508061168381614026565b915050611512565b50909392505050565b602081015160609081901580156116ad57506040830151155b1561172e5760408051600180825281830190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816116c757905050905061170c5f611707855f0151612282565b6123ac565b815f8151811061171e5761171e613fd7565b60200260200101819052506118ff565b6020830151158015906117445750604083015115155b156118b7576040805160038082526080820190925290816020015b60408051606080820183525f80835260208301529181019190915281526020019060019003908161175f57905050905061179f5f611707855f0151612282565b815f815181106117b1576117b1613fd7565b60200260200101819052505f60206001600160401b038111156117d6576117d6613bbc565b6040519080825280601f01601f191660200182016040528015611800576020820181803683370190505b506020858101519082015290506118186001826123ac565b8260018151811061182b5761182b613fd7565b60200260200101819052505f60206001600160401b0381111561185057611850613bbc565b6040519080825280601f01601f19166020018201604052801561187a576020820181803683370190505b506040860151602082015290506118926002826123ac565b836002815181106118a5576118a5613fd7565b602002602001018190525050506118ff565b60405162461bcd60e51b815260206004820152601760248201527f696e76616c69642063726f7373636861696e206c616e6500000000000000000060448201526064016106b2565b604080518082019091525f8152606060208201525b60208101829052611924816123ee565b949350505050565b5f61193682612504565b90505f8160400151600381111561194f5761194f613b20565b1461199c5760405162461bcd60e51b815260206004820152601e60248201527f77726f6e67207479706520666f72206263646e7320726f6f742063657274000060448201526064016106b2565b5f6119ae6119a9836126b3565b6127e1565b805190602001209050826001604051806040016040528060048152602001631c9bdbdd60e21b8152506040516119e4919061407f565b908152602001604051809103902090816119fe9190613f1c565b50604051806040016040528060048152602001631c9bdbdd60e21b81525060025f8381526020019081526020015f209081611a399190613f1c565b506040518181527f7c787bfbe942686b5f41acec151012ca79c6b81c1c5a23cee512781cf3d5b9bb9060200160405180910390a1505050565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611ac9613849565b611ad1613849565b5f611adb84611e80565b90505f5b81602001515181101561168b575f82602001518281518110611b0357611b03613fd7565b60200260200101519050600561ffff16815f015161ffff1603611b3a57611b33611b2e826040015190565b61288f565b8452611ba2565b805161ffff166101001901611b6157611b576115ee826040015190565b6020850152611ba2565b805161ffff1660ff1901611b8857611b7881612054565b63ffffffff166040850152611ba2565b805161ffff166101fe1901611ba257604081015160608501525b5080611bad81614026565b915050611adf565b611bbd6137ee565b82516020808501919091205f908152600482526040808220858352600101909252208054611c709190611bef90613d64565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1b90613d64565b8015611c665780601f10611c3d57610100808354040283529160200191611c66565b820191905f5260205f20905b815481529060010190602001808311611c4957829003601f168201915b50505050506114f4565b9392505050565b611c7f61387e565b611c8761387e565b5f611c9184611e80565b90505f5b81602001515181101561168b575f82602001518281518110611cb957611cb9613fd7565b6020908102919091010151805190915061ffff16611cdd5760408101518452611d99565b805161ffff165f1901611d0757611cfd611cf8826040015190565b612504565b6020850152611d99565b805161ffff1660011901611d245760408101516040850152611d99565b805161ffff1660021901611d63576040805180820182525f80825260606020928301528251808401845290815291830151908201526060850152611d99565b805161ffff1660031901611d805760408101516080850152611d99565b805161ffff1660041901611d9957604081015160a08501525b5080611da481614026565b915050611c95565b5f611dbd6119a983602001516126b3565b805190602001209050919050565b5f61057d611dd883611ddd565b612912565b6060816020015151825f015110611e4a5760405162461bcd60e51b815260206004820152602b60248201527f544c564974656d4d617056616c756553747265616d3a206f6666657374206f7560448201526a3a1037b310313ab33332b960a91b60648201526084016106b2565b5f611e5c835f0151846020015161296f565b8051845191925090611e6f90600461409a565b611e79919061409a565b9092525090565b604080518082019091525f815260606020820152600682511015611ee65760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e67746800000000000000000060448201526064016106b2565b604080518082019091525f8082526060602083015290611f0e611f098584612a02565b612a28565b61ffff168152611f1f60068361409a565b91505f825b8551811015611f7857611f49611f4487611f3f84600261409a565b612ac2565b612aea565b611f549060066140ad565b611f649063ffffffff168261409a565b905081611f7081614026565b925050611f24565b5f826001600160401b03811115611f9157611f91613bbc565b604051908082528060200260200182016040528015611fdd57816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081611faf5790505b5090505f92505b86518510156120455760408051606080820183525f8083526020830152918101919091526120128887612bdb565b9650905080828561202281614026565b96508151811061203457612034613fd7565b602002602001018190525050611fe4565b60208401525090949350505050565b5f61057d611f4460048460400151015190565b61206f6138d4565b6120776138d4565b5f61208184611e80565b90505f5b81602001515181101561168b575f826020015182815181106120a9576120a9613fd7565b6020908102919091010151805190915061ffff166120cd5760408101518452612189565b805161ffff165f19016120e95760408101516020850152612189565b805161ffff16600119016121455761210081612d33565b60ff16600281111561211457612114613b20565b8460400190600281111561212a5761212a613b20565b9081600281111561213d5761213d613b20565b905250612189565b805161ffff166002190161217057612166612161826040015190565b612d43565b6060850152612189565b805161ffff166003190161218957604081015160808501525b508061219481614026565b915050612085565b6121a4613906565b6121ac613906565b5f6121b684611e80565b90505f5b81602001515181101561168b575f826020015182815181106121de576121de613fd7565b6020908102919091010151805190915061ffff1661221057612209612204826040015190565b612e13565b845261226f565b805161ffff165f1901612241575f612229826040015190565b9050612236815182015190565b60208601525061226f565b805161ffff166001190161226f575f61225b826040015190565b9050612268815182015190565b6040860152505b508061227a81614026565b9150506121ba565b6060805f8360200151511115612324576040805160028082526060820190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816122a85790505090506122e55f845f01516123ac565b815f815181106122f7576122f7613fd7565b6020026020010181905250612311600184602001516123ac565b8160018151811061171e5761171e613fd7565b60408051600180825281830190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816123395790505090506123765f845f01516123ac565b815f8151811061238857612388613fd7565b6020026020010181905250604080518082019091525f815260606020820152611914565b60408051606080820183525f808352602083015291810191909152506040805160608101825261ffff939093168352815163ffffffff16602084015282015290565b60605f6123fa83612ebc565b90505f6124088260066140ad565b63ffffffff166001600160401b0381111561242557612425613bbc565b6040519080825280601f01601f19166020018201604052801561244f576020820181803683370190505b5090506124746002612463865f0151612a28565b908301600119810180519290915252565b612493600661248284612aea565b908301600319810180519290915252565b60065f5b6020860151518110156124fa575f6124cb876020015183815181106124be576124be613fd7565b6020026020010151612f2e565b90506124d8838286612fbb565b80516124e4908461409a565b92505080806124f290614026565b915050612497565b5090949350505050565b61250c613934565b612514613934565b5f61251e84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061254657612546613fd7565b6020908102919091010151805190915061ffff1661256a57604081015184526126a0565b805161ffff165f190161258657604081015160208501526126a0565b805161ffff16600119016125e25761259d81612d33565b60ff1660038111156125b1576125b1613b20565b846040019060038111156125c7576125c7613b20565b908160038111156125da576125da613b20565b9052506126a0565b805161ffff1660021901612608576125fe612161826040015190565b60608501526126a0565b805161ffff16600319016126325761261f81613099565b6001600160401b031660808501526126a0565b805161ffff166004190161265c5761264981613099565b6001600160401b031660a08501526126a0565b805161ffff166005190161267957604081015160c08501526126a0565b805161ffff16600619016126a05761269a612695826040015190565b6130b1565b60e08501525b50806126ab81614026565b915050612522565b6126bb6139b4565b5f826040015160038111156126d2576126d2613b20565b036126ee576126e48260c001516131c2565b6020015192915050565b60018260400151600381111561270657612706613b20565b03612722576127188260c00151613279565b6080015192915050565b60028260400151600381111561273a5761273a613b20565b036127565761274c8260c00151612067565b6060015192915050565b60038260400151600381111561276e5761276e613b20565b0361278a576127808260c001516133c6565b6040015192915050565b60405162461bcd60e51b815260206004820152602660248201527f676574436572744f776e65724f69643a20636572742074797065206e6f7420736044820152651d5c1c1bdc9d60d21b60648201526084016106b2565b60408051600280825260608281019093525f9190816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816127fa5790505090506128505f61284b855f0151600181111561284657612846613b20565b61349a565b6134ad565b815f8151811061286257612862613fd7565b602002602001018190525061287c600184602001516123ac565b8160018151811061238857612388613fd7565b6040805160208101909152606081526040805160208101909152606081525f6128b784611e80565b90505f5b81602001515181101561168b575f826020015182815181106128df576128df613fd7565b6020908102919091010151805190915061ffff166128ff57604081015184525b508061290a81614026565b9150506128bb565b80515f9081816001600160401b0381111561292f5761292f613bbc565b6040519080825280601f01601f191660200182016040528015612959576020820181803683370190505b5084518152938201519190930151900392915050565b606061297c60048461409a565b92505f61298c611f448585015190565b63ffffffff1690506060811580156129af576040519150602082016040526129f9565b6040519150601f8316801560200281840101848101888315602002848a0101015b818310156129e85780518352602092830192016129d0565b5050848452601f01601f1916604052505b50949350505050565b81515f90612a1183600261409a565b1115612a1b575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f81518110612a6957612a69613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600181518110612a9857612a98613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f612a02565b95945050505050565b81515f90612ad183600461409a565b1115612adb575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f81518110612b2b57612b2b613fd7565b60200101906001600160f81b03191690815f1a9053508160021a60f81b81600181518110612b5b57612b5b613fd7565b60200101906001600160f81b03191690815f1a9053508160011a60f81b81600281518110612b8b57612b8b613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600381518110612bba57612bba613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f612ac2565b60408051606080820183525f8083526020830152918101919091525f82845111612c535760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b60648201526084016106b2565b6006831015612c955760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b60448201526064016106b2565b60408051606080820183525f808352602083015291810191909152612cbd611f098686612a02565b61ffff168152612cce60028561409a565b9350612cdd611f448686612ac2565b63ffffffff166020820152612cf360048561409a565b9350612d0a8585836020015163ffffffff16613517565b60408201526020810151612d249063ffffffff168561409a565b935091508290505b9250929050565b5f61057d60018360400151015190565b612d4b6139b4565b612d536139b4565b5f612d5d84611e80565b90505f5b81602001515181101561168b575f82602001518281518110612d8557612d85613fd7565b6020908102919091010151805190915061ffff16612de857612da681612d33565b60ff166001811115612dba57612dba613b20565b84906001811115612dcd57612dcd613b20565b90816001811115612de057612de0613b20565b905250612e00565b805161ffff165f1901612e0057604081015160208501525b5080612e0b81614026565b915050612d61565b604080518082019091526060808252602082015260408051808201909152606080825260208201525f612e4584611e80565b90505f5b81602001515181101561168b575f82602001518281518110612e6d57612e6d613fd7565b6020908102919091010151805190915061ffff16612e915760408101518452612ea9565b805161ffff165f1901612ea957604081015160208501525b5080612eb481614026565b915050612e49565b5f80805b602084015151811015612f27575f84602001518281518110612ee457612ee4613fd7565b60200260200101519050806040015151836006612f0191906140ad565b63ffffffff16612f11919061409a565b9250508080612f1f90614026565b915050612ec0565b5092915050565b60605f82602001516006612f4291906140ad565b63ffffffff166001600160401b03811115612f5f57612f5f613bbc565b6040519080825280601f01601f191660200182016040528015612f89576020820181803683370190505b509050612f9d6002612463855f0151612a28565b612faf60066124828560200151612aea565b61057d60068460400151835b81518151612fcf63ffffffff83168661409a565b111561304e5760405162461bcd60e51b815260206004820152604260248201527f7661724279746573546f4279746573426967456e6469616e3a206f666673657460448201527f2069732067726561746572207468616e20746865206f7574707574206c656e676064820152610e8d60f31b608482015260a4016106b2565b801580610bb4578483018051601f84168015602002818801018581018215602002838601015b8183101561308c578251815260209283019201613074565b5050509152505050505050565b5f61057d6130ac60088460400151015190565b613596565b6130dc6040518060800160405280606081526020016060815260200160608152602001606081525090565b6131076040518060800160405280606081526020016060815260200160608152602001606081525090565b5f61311184611e80565b90505f5b81602001515181101561168b575f8260200151828151811061313957613139613fd7565b6020908102919091010151805190915061ffff1661315d57604081015184526131af565b805161ffff165f190161317957604081015160208501526131af565b805161ffff166001190161319657604081015160408501526131af565b805161ffff16600219016131af57604081015160608501525b50806131ba81614026565b915050613115565b6131ca6139c5565b6131d26139c5565b5f6131dc84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061320457613204613fd7565b6020908102919091010151805190915061ffff166132285760408101518452613266565b805161ffff165f190161324d57613243612161826040015190565b6020850152613266565b805161ffff166001190161326657604081015160408501525b508061327181614026565b9150506131e0565b6132816139df565b6132896139df565b5f61329384611e80565b90505f5b81602001515181101561168b575f826020015182815181106132bb576132bb613fd7565b6020908102919091010151805190915061ffff166132df57604081015184526133b3565b805161ffff165f190161333a576132f581612d33565b60ff16600181111561330957613309613b20565b8460200190600181111561331f5761331f613b20565b9081600181111561333257613332613b20565b9052506133b3565b805161ffff166001190161335757604081015160408501526133b3565b805161ffff166002190161337457604081015160608501526133b3565b805161ffff166003190161339a57613390612161826040015190565b60808501526133b3565b805161ffff16600419016133b357604081015160a08501525b50806133be81614026565b915050613297565b6133ce613a0e565b6133d6613a0e565b5f6133e084611e80565b90505f5b81602001515181101561168b575f8260200151828151811061340857613408613fd7565b6020908102919091010151805190915061ffff1661342c5760408101518452613487565b805161ffff165f19016134485760408101516020850152613487565b805161ffff166002190161346e57613464612161826040015190565b6040850152613487565b805161ffff166003190161348757604081015160608501525b508061349281614026565b9150506133e4565b5f81600181111561057d5761057d613b20565b60408051606080820183525f8083526020830152918101919091526040805160018082528183019092525f9160208201818036833701905050805160018201859052815290506040805160608101825261ffff959095168552600160208601528401525090919050565b8251606090613526838561409a565b1115613530575f80fd5b5f826001600160401b0381111561354957613549613bbc565b6040519080825280601f01601f191660200182016040528015613573576020820181803683370190505b5090506020808201908686010161358b828287613747565b509095945050505050565b6040805160088082528183019092525f9160c084901b9183916020820181803683370190505090508160071a60f81b815f815181106135d7576135d7613fd7565b60200101906001600160f81b03191690815f1a9053508160061a60f81b8160018151811061360757613607613fd7565b60200101906001600160f81b03191690815f1a9053508160051a60f81b8160028151811061363757613637613fd7565b60200101906001600160f81b03191690815f1a9053508160041a60f81b8160038151811061366757613667613fd7565b60200101906001600160f81b03191690815f1a9053508160031a60f81b8160048151811061369757613697613fd7565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816005815181106136c7576136c7613fd7565b60200101906001600160f81b03191690815f1a9053508160011a60f81b816006815181106136f7576136f7613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160078151811061372657613726613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f6137c3565b6020811061377f578151835261375e60208461409a565b925061376b60208361409a565b9150613778602082613fff565b9050613747565b805f0361378b57505050565b5f6001613799836020613fff565b6137a5906101006141aa565b6137af9190613fff565b925184518416931916929092179092525050565b81515f906137d283600861409a565b11156137dc575f80fd5b5001600801516001600160401b031690565b60408051610120810182525f808252602082015260609181018290529081016138156138d4565b8152602001613822613906565b81526020015f63ffffffff1681526020016060815260200160608152602001606081525090565b6040805160a0810190915260606080820190815281526020810161386b613906565b81525f6020820152606060409091015290565b6040518060c0016040528060608152602001613898613934565b8152602001606081526020016138c060405180604001604052805f8152602001606081525090565b815260200160608152602001606081525090565b6040805160a081018252606080825260208201529081015f81526020016138f96139b4565b8152602001606081525090565b6040805160a0810182526060808201818152608083019190915281525f602082018190529181019190915290565b6040805161010081018252606080825260208201529081015f815260200161395a6139b4565b81526020015f6001600160401b031681526020015f6001600160401b03168152602001606081526020016139af6040518060800160405280606081526020016060815260200160608152602001606081525090565b905290565b60408051808201909152805f6138f9565b6040518060600160405280606081526020016138f96139b4565b6040805160c0810190915260608152602081015f815260200160608152602001606081526020016138f96139b4565b604051806080016040528060608152602001606081526020016138f96139b4565b5f8083601f840112613a3f575f80fd5b5081356001600160401b03811115613a55575f80fd5b602083019150836020828501011115612d2c575f80fd5b5f8060208385031215613a7d575f80fd5b82356001600160401b03811115613a92575f80fd5b613a9e85828601613a2f565b90969095509350505050565b5f5b83811015613ac4578181015183820152602001613aac565b50505f910152565b5f8151808452613ae3816020860160208601613aaa565b601f01601f19169290920160200192915050565b602081525f611c706020830184613acc565b5f60208284031215613b19575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b60038110613b5057634e487b7160e01b5f52602160045260245ffd5b9052565b6020810161057d8284613b34565b5f805f60408486031215613b74575f80fd5b83356001600160401b03811115613b89575f80fd5b613b9586828701613a2f565b909450925050602084013563ffffffff81168114613bb1575f80fd5b809150509250925092565b634e487b7160e01b5f52604160045260245ffd5b5f6001600160401b0380841115613be957613be9613bbc565b604051601f8501601f19908116603f01168101908282118183101715613c1157613c11613bbc565b81604052809350858152868686011115613c29575f80fd5b858560208301375f602087830101525050509392505050565b5f60208284031215613c52575f80fd5b81356001600160401b03811115613c67575f80fd5b8201601f81018413613c77575f80fd5b61192484823560208401613bd0565b600381106113c5575f80fd5b5f60208284031215613ca2575f80fd5b8135611c7081613c86565b602080825282518282018190525f9190848201906040850190845b81811015613ceb57613cdb838551613b34565b9284019291840191600101613cc8565b50909695505050505050565b5f60208284031215613d07575f80fd5b81356001600160c01b0381168114611c70575f80fd5b5f805f60408486031215613d2f575f80fd5b83356001600160401b03811115613d44575f80fd5b613d5086828701613a2f565b909790965060209590950135949350505050565b600181811c90821680613d7857607f821691505b602082108103613d9657634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115613de1575f81815260208120601f850160051c81016020861015613dc25750805b601f850160051c820191505b818110156108aa57828155600101613dce565b505050565b6001600160401b03831115613dfd57613dfd613bbc565b613e1183613e0b8354613d64565b83613d9c565b5f601f841160018114613e42575f8515613e2b5750838201355b5f19600387901b1c1916600186901b178355610bb4565b5f83815260209020601f19861690835b82811015613e725786850135825560209485019460019092019101613e52565b5086821015613e8e575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818382375f9101908152919050565b604081525f8351606060408401528051604060a0850152613ed360e0850182613acc565b905060208201519150609f198482030160c0850152613ef28183613acc565b91505060208501516060840152604085015160808401528091505082151560208301529392505050565b81516001600160401b03811115613f3557613f35613bbc565b613f4981613f438454613d64565b84613d9c565b602080601f831160018114613f7c575f8415613f655750858301515b5f19600386901b1c1916600185901b1785556108aa565b5f85815260208120601f198616915b82811015613faa57888601518255948401946001909101908401613f8b565b5085821015613fc757878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561057d5761057d613feb565b634e487b7160e01b5f52603160045260245ffd5b5f6001820161403757614037613feb565b5060010190565b5f6020828403121561404e575f80fd5b8151611c7081613c86565b604081016140678285613b34565b6001600160c01b039290921660209190910152919050565b5f8251614090818460208701613aaa565b9190910192915050565b8082018082111561057d5761057d613feb565b63ffffffff818116838216019080821115612f2757612f27613feb565b600181815b8085111561410457815f19048211156140ea576140ea613feb565b808516156140f757918102915b93841c93908002906140cf565b509250929050565b5f8261411a5750600161057d565b8161412657505f61057d565b816001811461413c576002811461414657614162565b600191505061057d565b60ff84111561415757614157613feb565b50506001821b61057d565b5060208310610133831016604e8410600b8410161715614185575081810a61057d565b61418f83836140ca565b805f19048211156141a2576141a2613feb565b029392505050565b5f611c70838361410c56fea2646970667358221220af107a637f7a607c0dddfb6def8095beb009eb63b7fc6d284257ab3bcd2af30464736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";
    @Override
    public void startup(AbstractBBCContext context) {
        getBBCLogger().info("Bif BBCService startup with context: {}", new String(context.getConfForBlockchainClient()));

        if (ObjectUtil.isNull(context)) {
            throw new RuntimeException("null bbc context");
        }
        if (ObjectUtil.isEmpty(context.getConfForBlockchainClient())) {
            throw new RuntimeException("empty blockchain client conf");
        }

        // 1. Obtain the configuration information
        try {
            config = BifchainConfig.fromJsonString(new String(context.getConfForBlockchainClient()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        if(StrUtil.isEmpty(config.getPrivateKey())){
            throw new RuntimeException("private key is empty");
        }

        try {
            PrivateKeyManager privateKeyManager = new PrivateKeyManager(config.getPrivateKey());
            this.config.setAddress(privateKeyManager.getEncAddress());
        } catch (EncException e) {
            throw new RuntimeException(e);
        }

        if (StrUtil.isEmpty(config.getUrl())) {
            throw new RuntimeException("url is empty");
        }

        // 2. Connect to the bif network
        this.sdk = BIFSDK.getInstance(config.getUrl());
        try {
            BIFBlockGetNumberInfoRequest request = new BIFBlockGetNumberInfoRequest();
            BIFBlockGetNumberResponse response = sdk.getBIFBlockService().getBlockNumber(request);
            if (response.getErrorCode() != 0) {
                throw new RuntimeException(String.format("failed to connect bif (url: %s)", config.getUrl()));
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format("failed to connect bif (url: %s)", config.getUrl()), e);
        }

        this.bbcContext = context;
        if (ObjectUtil.isNull(context.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.config.getAmContractAddressDeployed())) {
            AuthMessageContract authMessageContract = new AuthMessageContract();
            authMessageContract.setContractAddress(this.config.getAmContractAddressDeployed());
            authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setAuthMessageContract(authMessageContract);
        }

        if (ObjectUtil.isNull(context.getSdpContract())
                && StrUtil.isNotEmpty(this.config.getSdpContractAddressDeployed())) {
            SDPContract sdpContract = new SDPContract();
            sdpContract.setContractAddress(this.config.getSdpContractAddressDeployed());
            sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setSdpContract(sdpContract);
        }

        if (ObjectUtil.isNull(context.getPtcContract())
                && StrUtil.isNotEmpty(this.config.getPtcContractAddressDeployed())) {
            PTCContract ptcContract = new PTCContract();
            ptcContract.setContractAddress(this.config.getPtcContractAddressDeployed());
            ptcContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setPtcContract(ptcContract);
        }
    }

    @Override
    public void shutdown() {
        getBBCLogger().info("shut down bif BBCService!");
    }

    @Override
    public AbstractBBCContext getContext() {
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }

        getBBCLogger().debug("BIF BBCService context (amAddress: {}, amStatus: {}, sdpAddress: {}, sdpStatus: {}), ptcAddress: {}, ptcStatus: {})",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getContractAddress() : "",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getStatus() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getContractAddress() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getStatus() : "",
                this.bbcContext.getPtcContract() != null ? this.bbcContext.getPtcContract().getContractAddress() : "",
                this.bbcContext.getPtcContract() != null ? this.bbcContext.getPtcContract().getStatus() : ""
        );
        return this.bbcContext;
    }

    private Boolean queryTxResult(String txHash) {
        BIFTransactionGetInfoRequest bifTransactionGetInfoRequest =new BIFTransactionGetInfoRequest();
        bifTransactionGetInfoRequest.setHash(txHash);
        BIFTransactionGetInfoResponse bifTransactionGetInfoResponse;
        while (true) {
            try {
                bifTransactionGetInfoResponse = sdk.getBIFTransactionService().getTransactionInfo(bifTransactionGetInfoRequest);
                if (ObjectUtil.isNotNull(bifTransactionGetInfoResponse.getResult()) && bifTransactionGetInfoResponse.getResult().getTransactions().length > 0) {
                    break;
                }
                Thread.sleep(1000L);
            } catch (Throwable e) {
                throw new RuntimeException("failed to query tx", e);
            }
        }
        return bifTransactionGetInfoResponse.getResult().getTransactions()[0].getErrorCode() == 0;
    }

    private BIFContractCreateRequest createBIFContractCreateRequest(String contractByteCode) {
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(this.config.getAddress());
        request.setPrivateKey(this.config.getPrivateKey());
        request.setInitBalance(0L);
        request.setPayload(contractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(this.config.getGasLimit());
        request.setGasPrice(this.config.getGasPrice());
        return request;
    }

    private BIFContractInvokeRequest createBIFContractInvokeRequest(String contractAddress, String invokeInput) {
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(this.config.getAddress());
        request.setPrivateKey(this.config.getPrivateKey());
        request.setContractAddress(contractAddress);
        request.setBIFAmount(this.config.getAmount());
        request.setRemarks("contract invoke");
        request.setInput(invokeInput);
        request.setFeeLimit(this.config.getGasLimit());
        request.setGasPrice(this.config.getGasPrice());
        return request;
    }

    @Override
    public void setupAuthMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.bbcContext.getAuthMessageContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            BIFContractCreateRequest request = createBIFContractCreateRequest(AUTH_BYTE_CODE);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy Auth contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy Auth contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                AuthMessageContract authMessageContract = new AuthMessageContract();
                authMessageContract.setContractAddress(address);
                authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setAuthMessageContract(authMessageContract);
                getBBCLogger().info("setup Auth contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get Auth contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get Auth contract address", e);
        }
    }

    @Override
    public void setupSDPMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getSdpContract())
                && StrUtil.isNotEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            BIFContractCreateRequest request = createBIFContractCreateRequest(SDP_BYTE_CODE);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy sdp contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy sdp contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                SDPContract sdpContract = new SDPContract();
                sdpContract.setContractAddress(address);
                sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setSdpContract(sdpContract);
                getBBCLogger().info("setup sdp contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get sdp contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get sdp contract address", e);
        }
    }

    @Override
    public void setupPTCContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getPtcContract())
                && StrUtil.isNotEmpty(this.bbcContext.getPtcContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            //todo:check input root cert
            String initInput = StrUtil.format("{\"function\":\"constructor(bytes)\",\"args\":\"'{}'\"}", this.config.getPtcContractInitInput());
            BIFContractCreateRequest request = createBIFContractCreateRequest(PTC_BYTE_CODE);
            request.setInitInput(initInput);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy ptc contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy ptc contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                PTCContract ptcContract = new PTCContract();
                ptcContract.setContractAddress(address);
                ptcContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setPtcContract(ptcContract);
                getBBCLogger().info("setup ptc contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get ptc contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get ptc contract address", e);
        }
    }

    @Override
    public ConsensusState readConsensusState(BigInteger height) {
        ConsensusState consensusState = new ConsensusState();
        consensusState.setCsVersion(this.getConfig().getCsVersion());
        consensusState.setDomain(new CrossChainDomain(this.getConfig().getDomainName()));
        consensusState.setHeight(height);
        try {
            BIFBlockGetInfoRequest request = new BIFBlockGetInfoRequest();
            request.setBlockNumber(height.longValue());

            BIFBlockGetInfoResponse response = sdk.getBIFBlockService().getBlockInfo(request);
            if (response.getErrorCode() == 0) {
                consensusState.setHash(HexUtil.decodeHex(response.getResult().getHeader().getHash()));
                consensusState.setParentHash(HexUtil.decodeHex(response.getResult().getHeader().getPreviousHash()));
                consensusState.setStateTimestamp(response.getResult().getHeader().getConfirmTime());
                consensusState.setStateData(HexUtil.decodeHex(response.getResult().getHeader().getConsensusValueHash()));
            } else {
                throw new RuntimeException("failed to get block info");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get block info", e);
        }

        try {
            BIFBlockGetValidatorsRequest request = new BIFBlockGetValidatorsRequest();
            request.setBlockNumber(height.longValue());
            BIFBlockGetValidatorsResponse response = sdk.getBIFBlockService().getValidators(request);
            if (response.getErrorCode() == 0) {
                String[] validators = response.getResult().getValidators();
                String joinedString = String.join(",", validators);
                consensusState.setConsensusNodeInfo(joinedString.getBytes());
            } else {
                throw new RuntimeException("failed to get validator info");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get validator info", e);
        }

        try {
            String urlStr = this.config.getUrl() + "/getLedger?with_consvalue=true&seq=" + height.toString();
            Request request = new Request.Builder()
                    .url(urlStr)
                    .build();

            Response response = client.newCall(request).execute();
            String jsonString = response.body().string();
            JsonObject jsonObject = JsonParser.parseString(jsonString).getAsJsonObject();
            if (jsonObject.get("error_code").getAsInt() == 0) {
                JsonObject consensusHeader = jsonObject.getAsJsonObject("result").getAsJsonObject("consensus_value").getAsJsonObject("consensus_header");
                String previousProof = consensusHeader.get("previous_proof").getAsString();
                consensusState.setEndorsements(HexUtil.decodeHex(previousProof));
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get consensus value", e);
        }
        return consensusState;
    }

    @Override
    public long querySDPMessageSeq(String senderDomain, String senderID, String receiverDomain, String receiverID) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. query sequence
        long seq;
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"querySDPMessageSeq(string,bytes32,string,bytes32)\",\"args\":\"'{}','{}','{}','{}'\",\"return\":\"returns(uint32)\"}", senderDomain, senderID.getBytes(), receiverDomain, receiverID.getBytes());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }
                seq = Long.parseLong(res);
                getBBCLogger().info("sdpMsg seq: {} (senderDomain: {}, senderID: {}, receiverDomain: {}, receiverID: {})",
                        seq,
                        senderDomain,
                        senderID,
                        receiverDomain,
                        receiverID
                );
            } else {
                throw new RuntimeException("failed to query sdpMsg seq");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query sdpMsg seq (senderDomain: %s, senderID: %s, receiverDomain: %s, receiverID: %s)",
                    senderDomain,
                    senderID,
                    receiverDomain,
                    receiverID
            ), e);
        }

        return seq;
    }

    @Override
    public void setProtocol(String protocolAddress, String protocolType) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty auth contract in bbc context");
        }

        // 3. set protocol to auth
        try {
            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setProtocol(address,uint32)\",\"args\":\"{},{}\"}", protocolAddress, BigInteger.valueOf(Long.parseLong(protocolType)));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getAuthMessageContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set protocol (address: {}, type: {}) to auth {} by tx {} ",
                            protocolAddress, protocolType,
                            contractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set protocol, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set protocol, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set protocol (address: %s, type: %s) to AM %s",
                            protocolAddress, protocolType, this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setPtcContract(String ptcContractAddress) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }

        // 3. set ptc to am
        try {
            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setPtcContract(address)\",\"args\":\"{}\"}", ptcContractAddress);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getAuthMessageContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set ptc contract (address: {}) to AM {} by tx {}",
                            contractAddress,
                            ptcContractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set ptc contract, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set ptc contract, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set ptc contract (address: %s) to AM %s",
                            ptcContractAddress,
                            this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setAmContract(String amContractAddress) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 3. set protocol to sdp
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setAmContract(address)\",\"args\":\"{}\"}", amContractAddress);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set am contract (address: {}) to SDP {} by tx {}",
                            contractAddress,
                            amContractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set protocol, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set protocol, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set auth contract (address: %s) to SDP %s",
                            amContractAddress,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setLocalDomain(String domain) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (StrUtil.isEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            throw new RuntimeException("none sdp contract address");
        }

        // 3. set domain to sdp
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setLocalDomain(string)\",\"args\":\"'{}'\"}", domain);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set domain ({}) to SDP {} by tx {}",
                            domain,
                            contractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("transaction executing failed, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set domain, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set domain (%s) to SDP %s",
                            domain,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public Long queryLatestHeight() {
        Long l;
        try {
            BIFBlockGetNumberInfoRequest request = new BIFBlockGetNumberInfoRequest();
            BIFBlockGetNumberResponse response = sdk.getBIFBlockService().getBlockNumber(request);
            l = response.getResult().getHeader().getBlockNumber();
            getBBCLogger().debug("latest height: {}", l);
        } catch (Exception e) {
            throw new RuntimeException("failed to query latest height", e);
        }
        return l;
    }

    @Override
    public CrossChainMessageReceipt readCrossChainMessageReceipt(String txHash) {
        CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
        try {

            BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
            request.setHash(txHash);
            BIFTransactionGetInfoResponse response = sdk.getBIFTransactionService().getTransactionInfo(request);
            if (response.getResult().getTransactions()[0].getErrorCode() == 0) {
                crossChainMessageReceipt.setConfirmed(true);
                crossChainMessageReceipt.setSuccessful(true);
                crossChainMessageReceipt.setTxhash(response.getResult().getTransactions()[0].getHash());
                crossChainMessageReceipt.setErrorMsg(response.getResult().getTransactions()[0].getErrorDesc());
            } else {
                crossChainMessageReceipt.setConfirmed(false);
                crossChainMessageReceipt.setSuccessful(false);
                crossChainMessageReceipt.setTxhash("");
                crossChainMessageReceipt.setErrorMsg("");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to read cross chain message receipt (txHash: %s)", txHash
                    ), e
            );
        }
        getBBCLogger().info("cross chain message receipt for txHash {} : {}", txHash, JSON.toJSONString(crossChainMessageReceipt));
        return crossChainMessageReceipt;
    }

    @Override
    public CrossChainMessageReceipt relayAuthMessage(byte[] rawMessage) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }
        getBBCLogger().info("relay AM {} to {} ",
                HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress());

        try {
            // 2. verify PTC sign
            ThirdPartyProof thirdPartyProof = ThirdPartyProof.decode(rawMessage);
            if (!hasTpBta(thirdPartyProof.getTpbtaCrossChainLane(), thirdPartyProof.getTpbtaVersion())) {
                throw new RuntimeException("tb-bta not found");
            }
            ThirdPartyBlockchainTrustAnchor thirdPartyBlockchainTrustAnchor = getTpBta(thirdPartyProof.getTpbtaCrossChainLane(), thirdPartyProof.getTpbtaVersion());

            ObjectIdentity objectIdentity = thirdPartyBlockchainTrustAnchor.getSignerPtcCredentialSubject().getApplicant();
            if (!hasPTCTrustRoot(objectIdentity)) {
                throw new RuntimeException("no ptc trust root found");
            }
            if (!hasPTCVerifyAnchor(objectIdentity, thirdPartyBlockchainTrustAnchor.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("no ptc verify anchor found");
            }

            CommitteeEndorseRoot committeeEndorseRoot = CommitteeEndorseRoot.decode(thirdPartyBlockchainTrustAnchor.getEndorseRoot());
            CommitteeEndorseProof committeeEndorseProof = CommitteeEndorseProof.decode(thirdPartyProof.getRawProof());
            if (committeeEndorseRoot.getCommitteeId().equals(committeeEndorseProof.getCommitteeId())) {
                throw new RuntimeException("committee id in proof not equal with the one in endorse root");
            }

            byte[] encodedToSign = thirdPartyProof.getEncodedToSign();
            int optinalCorrect = 0;
            for (int i = 0; i < committeeEndorseRoot.getEndorsers().size(); i++) {
                NodeEndorseInfo info = committeeEndorseRoot.getEndorsers().get(i);
                boolean res = false;
                for (int j = 0; j < committeeEndorseProof.getSigs().size(); j++) {
                    if (info.getNodeId().equals(committeeEndorseProof.getSigs().get(j).getNodeId())) {
                        res = SignAlgoEnum.getByName(committeeEndorseProof.getSigs().get(j).getSignAlgo().getName())
                                .getSigner()
                                .verify(info.getPublicKey().getPublicKey(), encodedToSign, committeeEndorseProof.getSigs().get(j).getSignature().getBytes());
                        if (res && !info.isRequired()) {
                            optinalCorrect++;
                            break;
                        }
                    }
                }

                if (!res && info.isRequired()) {
                    throw new RuntimeException("ptc sign verify failed");
                }
            }

            if (!committeeEndorseRoot.getPolicy().getThreshold().check(optinalCorrect)) {
                throw new RuntimeException("ptc sign verify failed");
            }

            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"recvPkgFromRelayer(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(rawMessage));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    getBBCLogger().info("relay auth message successful tx {}", response.getResult().getHash());
                    crossChainMessageReceipt.setConfirmed(true);
                    crossChainMessageReceipt.setSuccessful(true);
                    crossChainMessageReceipt.setErrorMsg("");
                } else {
                    getBBCLogger().error("relay auth message failed tx {}", response.getResult().getHash());
                    crossChainMessageReceipt.setConfirmed(false);
                    crossChainMessageReceipt.setSuccessful(false);
                    crossChainMessageReceipt.setErrorMsg(response.getErrorDesc());
                }
            } else {
                throw new RuntimeException("failed to relay auth message, transaction sending failed");
            }

            crossChainMessageReceipt.setTxhash(response.getResult().getHash());
            return crossChainMessageReceipt;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to relay AM %s to %s",
                            HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public List<CrossChainMessage> readCrossChainMessagesByHeight(long height) {
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }

        try {
            // 1. get transactions
            BIFBlockGetTransactionsRequest request = new BIFBlockGetTransactionsRequest();
            request.setBlockNumber(height);
            BIFBlockGetTransactionsResponse response = sdk.getBIFBlockService().getTransactions(request);

            //获取区块信息
            BIFBlockGetInfoRequest blockGetInfoRequest = new BIFBlockGetInfoRequest();
            blockGetInfoRequest.setBlockNumber(height);
            BIFBlockGetInfoResponse lockGetInfoResponse = sdk.getBIFBlockService().getBlockInfo(blockGetInfoRequest);

            List<CrossChainMessage> messageList = ListUtil.toList();
            Arrays.stream(response.getResult().getTransactions()).forEach(
                    transaction -> {
                        if (Objects.nonNull(transaction.getContractTxHashes()) && transaction.getContractTxHashes().length > 0) {
                            BIFTransactionGetInfoRequest bifTransactionGetInfoRequest = new BIFTransactionGetInfoRequest();
                            bifTransactionGetInfoRequest.setHash(transaction.getContractTxHashes()[0]);
                            BIFTransactionGetInfoResponse bifTransactionGetInfoResponse = sdk.getBIFTransactionService().getTransactionInfo(bifTransactionGetInfoRequest);
                            String topic = bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getOperations()[0].getLog().getTopic();
                            if (topic.equals("79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c651") && bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getSourceAddress().equals(this.bbcContext.getAuthMessageContract().getContractAddress())) {
                                String json = JsonUtils.toJSONString(bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getOperations()[0].getLog());
                                AuthMsg authMsg = new AuthMsg();
                                Log log = authMsg.jsonToLog(json);
                                AuthMsg.SendAuthMessageEventResponse sendAuthMessageEventResponse = AuthMsg.getSendAuthMessageEventFromLog(log);

                                JsonObject jsonObject = new JsonObject();
                                jsonObject.addProperty("url", this.config.getUrl());
                                jsonObject.addProperty("txHash", transaction.getContractTxHashes()[0]);

                                //构建跨链信息
                                CrossChainMessage crossChainMessage = CrossChainMessage.createCrossChainMessage(
                                        CrossChainMessage.CrossChainMessageType.AUTH_MSG,
                                        bifTransactionGetInfoResponse.getResult().getTransactions()[0].getLedgerSeq(),
                                        bifTransactionGetInfoResponse.getResult().getTransactions()[0].getConfirmTime(),
                                        HexUtil.decodeHex(lockGetInfoResponse.getResult().getHeader().getHash()),
                                        sendAuthMessageEventResponse.result.pkg,
                                        jsonObject.toString().getBytes(),
                                        "".getBytes(),
                                        HexUtil.decodeHex(transaction.getHash())
                                );
                                messageList.add(crossChainMessage);
                            }
                        }
                    }
            );
            if (!messageList.isEmpty()) {
                getBBCLogger().info("read cross chain messages (height: {}, msg_size: {})", height, messageList.size());
                getBBCLogger().debug("read cross chain messages (height: {}, msgs: {})",
                        height,
                        messageList.stream().map(JSON::toJSONString).collect(Collectors.joining(","))
                );
            }
            return messageList;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to readCrossChainMessagesByHeight (Height: %d, contractAddr: %s, topic: %s)",
                            height,
                            this.bbcContext.getAuthMessageContract().getContractAddress(),
                            "79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c651"
                    ), e
            );
        }
    }

    @Override
    public void updatePTCTrustRoot(PTCTrustRoot ptcTrustRoot) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        try {
            // 2. check verify ptc trust root
            // 2.1 get bcdns cert
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getBCDNSTrustRoot()\",\"args\":\"\",\"return\":\"returns(bytes)\"}");
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            AbstractCrossChainCertificate bcdnsCert;
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                bcdnsCert = CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(res));
            } else {
                throw new RuntimeException("failed to query bcdns cert");
            }

            // 2.2 check verify ptc cert
            BCDNSTrustRootCredentialSubject bcdnsTrustRootCredentialSubject = BCDNSTrustRootCredentialSubject.decode(bcdnsCert.getCredentialSubject());
            if (!ptcTrustRoot.getPtcCrossChainCert().getIssuer().equals(bcdnsTrustRootCredentialSubject.getBcdnsRootOwner())) {
                throw new RuntimeException("ptc cert is invalid: wrong signer");
            }

            AbstractCrossChainCertificate ptcCert = ptcTrustRoot.getPtcCrossChainCert();
            if (!SignAlgoEnum.getByName(ptcCert.getProof().getSigAlgo().getName())
                    .getSigner()
                    .verify(bcdnsTrustRootCredentialSubject.getSubjectPublicKey(), ptcCert.getEncodedToSign(), ptcCert.getProof().getRawProof())) {
                throw new RuntimeException("ptc cert is invalid: invalid sig");
            }

            // 2.3 check verify ptc trust root sig
            PTCCredentialSubject ptcCredentialSubject = PTCCredentialSubject.decode(ptcCert.getCredentialSubject());
            if (!SignAlgoEnum.getByName(ptcTrustRoot.getSigAlgo().getName())
                    .getSigner()
                    .verify(ptcCredentialSubject.getSubjectPublicKey(), ptcTrustRoot.getEncodedToSign(), ptcTrustRoot.getSig())) {
                throw new RuntimeException("ptc trust root sig invalid");
            }

            // 3. update ptc trust root
            String invokeInput = StrUtil.format("{\"function\":\"updatePTCTrustRoot(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(ptcTrustRoot.encode()));
            BIFContractInvokeRequest bifContractInvokeRequest = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse bifContractInvokeResponse = sdk.getBIFContractService().contractInvoke(bifContractInvokeRequest);
            if (bifContractInvokeResponse.getErrorCode() == 0) {
                if (queryTxResult(bifContractInvokeResponse.getResult().getHash())) {
                    getBBCLogger().info("update ptc root successful tx {}", bifContractInvokeResponse.getResult().getHash());
                } else {
                    throw new RuntimeException("failed to update ptc root, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to update ptc root, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to update ptc trust root %s to PTC %s",
                            HexUtil.encodeHexStr(ptcTrustRoot.encode()), this.bbcContext.getPtcContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public boolean hasPTCTrustRoot(ObjectIdentity ptcOwnerOid) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasPTCTrustRoot(bytes)\",\"args\":\"'{}'\",\"return\":\"returns(bool)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()));
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("PTC trust root is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query PTC trust root");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query PTC trust root: %s", ptcOwnerOid.toHex()
            ), e);
        }
        return result;
    }

    @Override
    public PTCTrustRoot getPTCTrustRoot(ObjectIdentity ptcOwnerOid) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        PTCTrustRoot ptcTrustRoot;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getPTCTrustRoot(bytes)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()));
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                ptcTrustRoot = PTCTrustRoot.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("PTC trust root: {} ", ptcTrustRoot.toString());
                return ptcTrustRoot;
            } else {
                throw new RuntimeException("failed to query PTC trust root");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query PTC trust root: %s", ptcOwnerOid.toHex()
            ), e);
        }
    }

    @Override
    public boolean hasTpBta(CrossChainLane tpbtaLane, int tpBtaVersion) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasTpBta(bytes,uint32)\",\"args\":\"'{}'\",\"return\":\"returns(bool)\"}", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion);
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("TP-BTA is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query TP-BTA");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query TB-BTA, tpbtaLane(%s), tpBtaVersion(%d)", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion
            ), e);
        }
        return result;
    }

    @Override
    public ThirdPartyBlockchainTrustAnchor getTpBta(CrossChainLane tpbtaLane, int tpBtaVersion) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query third party blockchain trust anchor
        ThirdPartyBlockchainTrustAnchor thirdPartyBlockchainTrustAnchor;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getTpBta(bytes,uint32)\",\"args\":\"'{}',{}\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion);
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                thirdPartyBlockchainTrustAnchor = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("Third party blockchain trust anchor: {} ", HexUtil.encodeHexStr(thirdPartyBlockchainTrustAnchor.encode()));
            } else {
                throw new RuntimeException("failed to query third party blockchain trust anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query third party blockchain trust anchor, tpbtaLane(%s), tpBtaVersion(%d)",
                    HexUtil.encodeHexStr(tpbtaLane.encode()),
                    tpBtaVersion
            ), e);
        }
        return thirdPartyBlockchainTrustAnchor;
    }

    @Override
    public void addTpBta(ThirdPartyBlockchainTrustAnchor tpbta) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        try {
            //2. check verify tp-bta
            if (!hasPTCTrustRoot(tpbta.getSignerPtcCredentialSubject().getApplicant())) {
                throw new RuntimeException("no ptc trust root found");
            }

            if (!hasPTCVerifyAnchor(tpbta.getSignerPtcCredentialSubject().getApplicant(), tpbta.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("no ptc verify anchor found");
            }
            PTCVerifyAnchor ptcVerifyAnchor = getPTCVerifyAnchor(tpbta.getSignerPtcCredentialSubject().getApplicant(), tpbta.getPtcVerifyAnchorVersion());

            if (!ptcVerifyAnchor.getVersion().equals(tpbta.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("verify anchor version not equal");
            }

            CommitteeVerifyAnchor committeeVerifyAnchor = CommitteeVerifyAnchor.decode(ptcVerifyAnchor.getAnchor());
            CommitteeEndorseProof committeeEndorseProof = CommitteeEndorseProof.decode(tpbta.getEndorseProof());
            if (committeeVerifyAnchor.getCommitteeId().equals(committeeEndorseProof.getCommitteeId())) {
                throw new RuntimeException("committee id in proof not equal with the one in verify anchor");
            }

            byte[] encodedToSign = tpbta.getEncodedToSign();
            int correct = 0;
            for (int i = 0; i < committeeEndorseProof.getSigs().size(); i++) {
                CommitteeNodeProof info = committeeEndorseProof.getSigs().get(i);
                for (int j = 0; j < committeeVerifyAnchor.getAnchors().size(); j++) {
                    if (info.getNodeId().equals(committeeVerifyAnchor.getAnchors().get(j).getNodeId())) {
                        boolean res = false;
                        for (int k = 0; k < committeeVerifyAnchor.getAnchors().get(j).getNodePublicKeys().size(); k++) {
                            res = SignAlgoEnum.getByName(info.getSignAlgo().getName())
                                    .getSigner()
                                    .verify(committeeVerifyAnchor.getAnchors().get(j).getNodePublicKeys().get(k).getPublicKey(), encodedToSign, info.getSignature().getBytes());
                            if (res) {
                                break;
                            }
                        }
                        if (res) {
                            correct++;
                            break;
                        }
                    }
                }
            }

            if (3*correct <= 2*committeeVerifyAnchor.getAnchors().size()) {
                throw new RuntimeException("the number of signatures is less than 2/3 ");
            }

            //3. update tp-bta
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"addTpBta(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(tpbta.encode()));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    getBBCLogger().info("add TB-BTA successful tx {}", response.getResult().getHash());
                } else {
                    throw new RuntimeException("failed to add tp-bta, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to add tp-bta, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to add tp-bta: %s", HexUtil.encodeHexStr(tpbta.encode())), e
            );
        }
    }

    @Override
    public Set<PTCTypeEnum> getSupportedPTCType() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc type
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getSupportedPTCType()\",\"args\":\"\"}");
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = res.substring(2,res.length() - 2);
                String[] strArray = res.split(",");
                List<BigInteger> bigIntegerList = new ArrayList<>();
                for (String numStr : strArray) {
                    bigIntegerList.add(new BigInteger(numStr));
                }
                getBBCLogger().info("get support ptc type: {}", bigIntegerList);
                return bigIntegerList.stream().map(x -> PTCTypeEnum.valueOf(x.byteValueExact())).collect(Collectors.toSet());
            } else {
                throw new RuntimeException("failed to query PTC type");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to query PTC type", e);
        }
    }

    @Override
    public boolean hasPTCVerifyAnchor(ObjectIdentity ptcOwnerOid, BigInteger version) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc verify anchor
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasPTCVerifyAnchor(bytes,uint256)\",\"args\":\"'{}'\",\"return\":\"returns(bool)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()), version.longValue());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("PTC verify anchor is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query PTC verify anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "query ptc verify anchor, ptcOwnerOid(%s), version(%d)",
                    HexUtil.encodeHexStr(ptcOwnerOid.encode()),
                    version
            ), e);
        }
        return result;
    }

    @Override
    public PTCVerifyAnchor getPTCVerifyAnchor(ObjectIdentity ptcOwnerOid, BigInteger version) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc verify anchor
        PTCVerifyAnchor ptcVerifyAnchor;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getPTCVerifyAnchor(bytes,uint256)\",\"args\":\"'{}',{}\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()), version.intValue());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                ptcVerifyAnchor = PTCVerifyAnchor.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("query ptc verify anchor: {} ", HexUtil.encodeHexStr(ptcVerifyAnchor.encode()));
            } else {
                throw new RuntimeException("failed to query ptc verify anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "query ptc verify anchor, ptcOwnerOid(%s), version(%d)",
                    HexUtil.encodeHexStr(ptcOwnerOid.encode()),
                    version
            ), e);
        }
        return ptcVerifyAnchor;
    }

    @Override
    public BlockState queryValidatedBlockStateByDomain(CrossChainDomain recvDomain) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. query validate block state
        BlockState blockState = new BlockState();
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"queryValidatedBlockStateByDomain(string)\",\"args\":\"'{}'\",\"return\":\"returns(bytes32,uint256,uint64)\"}", recvDomain.getDomain());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                String[] parts = res.split(",");

                blockState.setDomain(recvDomain);
                blockState.setHash(HexUtil.decodeHex(parts[0]));
                blockState.setHeight(new BigInteger(parts[1]));
                blockState.setTimestamp(Long.parseLong(parts[2]));

                return blockState;
            } else {
                throw new RuntimeException("failed to query sdp validate block state");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "query sdp validate block state, recvDomain(%s)",
                    recvDomain.getDomain()
            ), e);
        }
    }

    @Override
    public CrossChainMessageReceipt recvOffChainException(String exceptionMsgAuthor, byte[] exceptionMsgPkg) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. recv off-chain exception
        CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"recvOffChainException(bytes32,bytes)\",\"args\":\"'{}','{}'\"}", HexUtil.encodeHexStr(DigestUtil.sha256(exceptionMsgAuthor)), HexUtil.encodeHexStr(exceptionMsgPkg));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    crossChainMessageReceipt.setTxhash(response.getResult().getHash());
                    return crossChainMessageReceipt;
                } else {
                    throw new RuntimeException("failed to recv off-chain exception, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to recv off-chain exception, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to recv off-chain exception to sdp contract(%s)",
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public CrossChainMessageReceipt reliableRetry(ReliableCrossChainMessage msg) {
        return new CrossChainMessageReceipt();
    }
}