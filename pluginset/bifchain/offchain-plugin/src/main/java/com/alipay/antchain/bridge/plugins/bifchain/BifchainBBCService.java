package com.alipay.antchain.bridge.plugins.bifchain;

import cn.bif.api.BIFSDK;
import cn.bif.common.JsonUtils;
import cn.bif.common.ToBaseUnit;
import cn.bif.exception.EncException;
import cn.bif.model.request.*;
import cn.bif.model.response.*;
import cn.bif.module.encryption.key.PrivateKeyManager;
import cn.bif.utils.generator.response.Log;
import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSON;
import com.alipay.antchain.bridge.commons.bbc.AbstractBBCContext;
import com.alipay.antchain.bridge.commons.bbc.syscontract.AuthMessageContract;
import com.alipay.antchain.bridge.commons.bbc.syscontract.ContractStatusEnum;
import com.alipay.antchain.bridge.commons.bbc.syscontract.PTCContract;
import com.alipay.antchain.bridge.commons.bbc.syscontract.SDPContract;
import com.alipay.antchain.bridge.commons.bcdns.AbstractCrossChainCertificate;
import com.alipay.antchain.bridge.commons.bcdns.BCDNSTrustRootCredentialSubject;
import com.alipay.antchain.bridge.commons.bcdns.CrossChainCertificateFactory;
import com.alipay.antchain.bridge.commons.bcdns.PTCCredentialSubject;
import com.alipay.antchain.bridge.commons.core.base.*;
import com.alipay.antchain.bridge.commons.core.ptc.*;
import com.alipay.antchain.bridge.commons.utils.crypto.SignAlgoEnum;
import com.alipay.antchain.bridge.plugins.lib.BBCService;
import com.alipay.antchain.bridge.plugins.spi.bbc.AbstractBBCService;
import com.alipay.antchain.bridge.ptc.committee.types.basic.CommitteeEndorseProof;
import com.alipay.antchain.bridge.ptc.committee.types.basic.CommitteeNodeProof;
import com.alipay.antchain.bridge.ptc.committee.types.tpbta.CommitteeEndorseRoot;
import com.alipay.antchain.bridge.ptc.committee.types.tpbta.NodeEndorseInfo;
import com.alipay.antchain.bridge.ptc.committee.types.trustroot.CommitteeVerifyAnchor;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;
import lombok.Getter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyPair;
import java.util.*;
import java.util.stream.Collectors;

@BBCService(products = "bifchain", pluginId = "plugin-simple-bifchain")
@Getter
public class BifchainBBCService extends AbstractBBCService {
    private BifchainConfig config;

    private BIFSDK sdk;

    private AbstractBBCContext bbcContext;

    private static final OkHttpClient client = new OkHttpClient();

    private static final String AUTH_BYTE_CODE = "608060405234801562000010575f80fd5b505f620000226200011c60201b60201c565b9050805f806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508077ffffffffffffffffffffffffffffffffffffffffffffffff165f77ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3503360015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555062000123565b5f33905090565b61359e80620001315f395ff3fe608060405234801561000f575f80fd5b50600436106100a7575f3560e01c80638406c0791161006f5780638406c079146101625780638da5cb5b14610180578063a7566e771461019e578063e41fb517146101ba578063e85df5f7146101d6578063f2fde38b146101f2576100a7565b8063189a0a15146100ab5780636548e9bc146100db578063705c572c146100f7578063715018a614610127578063747c7ffd14610131575b5f80fd5b6100c560048036038101906100c09190612447565b61020e565b6040516100d291906124b5565b60405180910390f35b6100f560048036038101906100f091906124f8565b610257565b005b610111600480360381019061010c9190612447565b610326565b60405161011e91906124b5565b60405180910390f35b61012f61035a565b005b61014b600480360381019061014691906124f8565b6104ac565b60405161015992919061254c565b60405180910390f35b61016a6104e7565b60405161017791906124b5565b60405180910390f35b610188610510565b60405161019591906124b5565b60405180910390f35b6101b860048036038101906101b391906126af565b61053b565b005b6101d460048036038101906101cf91906126f6565b61063e565b005b6101f060048036038101906101eb9190612750565b6107b8565b005b61020c600480360381019061020791906124f8565b6109b8565b005b5f60035f8363ffffffff1663ffffffff1681526020019081526020015f205f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff169050919050565b61025f610b81565b77ffffffffffffffffffffffffffffffffffffffffffffffff16610281610510565b77ffffffffffffffffffffffffffffffffffffffffffffffff16146102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d2906127e8565b60405180910390fd5b8060015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555050565b6003602052805f5260405f205f915054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b610362610b81565b77ffffffffffffffffffffffffffffffffffffffffffffffff16610384610510565b77ffffffffffffffffffffffffffffffffffffffffffffffff16146103de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d5906127e8565b60405180910390fd5b5f77ffffffffffffffffffffffffffffffffffffffffffffffff165f8054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f805f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550565b6002602052805f5260405f205f91509050805f015f9054906101000a900463ffffffff1690805f0160049054906101000a900460ff16905082565b60015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b5f805f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16905090565b3377ffffffffffffffffffffffffffffffffffffffffffffffff1660015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16146105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90612876565b60405180910390fd5b6105df81610b88565b5f806105ea83610b8b565b915091507f2b41cea8d63514764033a161efa4273751d3f20eda0ecd3c514fa43b99f38bb0828260405161061f929190612950565b60405180910390a16106396106348383610c6d565b610dff565b505050565b60025f3377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0160049054906101000a900460ff166106d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c9906129f5565b60405180910390fd5b6106dc8282610e02565b5f6040518060800160405280600163ffffffff1681526020016106fe85610e06565b815260200160025f3377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900463ffffffff1663ffffffff1681526020018381525090507f79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c65161079582610e1c565b6040516107a29190612a13565b60405180910390a16107b381610ea0565b505050565b6107c0610b81565b77ffffffffffffffffffffffffffffffffffffffffffffffff166107e2610510565b77ffffffffffffffffffffffffffffffffffffffffffffffff161461083c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610833906127e8565b60405180910390fd5b5f60025f8477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050805f0160049054906101000a900460ff16156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc90612a7d565b60405180910390fd5b6001815f0160046101000a81548160ff02191690831515021790555081815f015f6101000a81548163ffffffff021916908363ffffffff1602179055508260035f8463ffffffff1663ffffffff1681526020019081526020015f205f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508163ffffffff167f1d5c04c569492046e8119073d290445582589ec4f52031b868ed74b2b7f7bfa8846040516109ab91906124b5565b60405180910390a2505050565b6109c0610b81565b77ffffffffffffffffffffffffffffffffffffffffffffffff166109e2610510565b77ffffffffffffffffffffffffffffffffffffffffffffffff1614610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a33906127e8565b60405180910390fd5b5f77ffffffffffffffffffffffffffffffffffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff1603610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990612b0b565b60405180910390fd5b8077ffffffffffffffffffffffffffffffffffffffffffffffff165f8054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555050565b5f33905090565b50565b6060805f80610b9c82866004610ea3565b9050600482610bab9190612b5f565b91505f610bb9600483610eb9565b90505f610bcd84888463ffffffff16610ea3565b90508163ffffffff1684610be19190612b5f565b93505f610bf085896004610ea3565b9050600485610bff9190612b5f565b94505f610c0d600483610eb9565b90505f610c21878b8463ffffffff16610ea3565b90508163ffffffff1687610c359190612b5f565b96505f6040518060400160405280868152602001838152509050610c5c8160200151610ec6565b995099505050505050505050915091565b610c75612342565b5f610c7f83610ef6565b90505f77ffffffffffffffffffffffffffffffffffffffffffffffff1660035f836040015163ffffffff1663ffffffff1681526020019081526020015f205f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1603610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3290612bdc565b60405180910390fd5b60035f826040015163ffffffff1663ffffffff1681526020019081526020015f205f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663c09b261b85836020015184606001516040518463ffffffff1660e01b8152600401610dc893929190612c12565b5f604051808303815f87803b158015610ddf575f80fd5b505af1158015610df1573d5f803e3d5ffd5b505050508091505092915050565b50565b5050565b5f80610e1183610f88565b905080915050919050565b60606001825f015163ffffffff1603610e3f57610e3882610fed565b9050610e9b565b6002825f015163ffffffff1603610e6057610e5982611169565b9050610e9b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9290612cc5565b60405180910390fd5b919050565b50565b6060610eb084848461131b565b90509392505050565b5f82820151905092915050565b6060805f610ed384611395565b90505f610ee38260200151611500565b9050816080015181935093505050915091565b610efe612342565b5f610f08836115cc565b905060018163ffffffff1603610f2957610f21836115df565b915050610f83565b60028163ffffffff1603610f4857610f40836116f3565b915050610f83565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612d53565b60405180910390fd5b919050565b5f80602067ffffffffffffffff811115610fa557610fa461258b565b5b6040519080825280601f01601f191660200182016040528015610fd75781602001600182028036833780820191505090505b5090508260208201526020810151915050919050565b60606001825f015163ffffffff161461103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103290612de1565b60405180910390fd5b5f60046020600461104f866060015161179a565b6110599190612b5f565b6110639190612b5f565b61106d9190612b5f565b90505f8167ffffffffffffffff81111561108a5761108961258b565b5b6040519080825280601f01601f1916602001820160405280156110bc5781602001600182028036833780820191505090505b5090505f8290506110d181865f0151846117f0565b6110db6020611807565b816110e69190612dff565b90506110f781866020015184611a35565b6110ff611a3f565b60ff168161110d9190612dff565b905061111e818660400151846117f0565b6111286020611807565b816111339190612dff565b905061114481866060015184611a47565b611151856060015161179a565b8161115c9190612dff565b9050819350505050919050565b60606002825f015163ffffffff16146111b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ae90612ea2565b60405180910390fd5b63ffffffff8260600151511115611203576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fa90612f30565b60405180910390fd5b5f6004602060048086606001515161121b9190612b5f565b6112259190612b5f565b61122f9190612b5f565b6112399190612b5f565b90505f8167ffffffffffffffff8111156112565761125561258b565b5b6040519080825280601f01601f1916602001820160405280156112885781602001600182028036833780820191505090505b5090505f82905061129d81865f0151846117f0565b6112a76020611807565b816112b29190612dff565b90506112c381866020015184611a35565b6112cb611a3f565b60ff16816112d99190612dff565b90506112ea818660400151846117f0565b6112f46020611807565b816112ff9190612dff565b905061131081866060015184611aaf565b819350505050919050565b60608082155f811461133857604051915060208201604052611389565b6040519150601f8416801560200281840101858101888315602002848a0101015b818310156113765780518352602083019250602081019050611359565b50868552601f19601f8301166040525050505b50809150509392505050565b61139d612376565b6113a5612376565b5f600690505b83518110156114f6576113bc6123ba565b6113c68583611b81565b8093508192505050600461ffff16815f015161ffff16036113fa576113ee8160400151611cc7565b835f01819052506114f0565b600561ffff16815f015161ffff160361141f57806040015183602001819052506114ef565b600761ffff16815f015161ffff16036114645761144861144382604001515f611d56565b611d85565b836040019063ffffffff16908163ffffffff16815250506114ee565b600861ffff16815f015161ffff160361148957806040015183606001819052506114ed565b600961ffff16815f015161ffff16036114ae57806040015183608001819052506114ec565b600a61ffff16815f015161ffff16036114eb576114d76114d282604001515f611f5c565b611f89565b8360a0019061ffff16908161ffff16815250505b5b5b5b5b5b506113ab565b8192505050919050565b6060600c825111611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153d90612f98565b60405180910390fd5b5f61155a611555846008611d56565b611d85565b905080600c6115699190612fb6565b63ffffffff16835110156115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a99061305d565b60405180910390fd5b6115c4600c848363ffffffff1661131b565b915050919050565b5f6115d8825183610eb9565b9050919050565b6115e7612342565b5f6115f26020611807565b83516115fe9190612dff565b90505f61160b82856120ac565b905060208261161a9190612dff565b91505f6116278386610eb9565b90506116336020611807565b8361163e9190612dff565b92505f61164b84876120b9565b67ffffffffffffffff8111156116645761166361258b565b5b6040519080825280601f01601f1916602001820160405280156116965781602001600182028036833780820191505090505b5090506116a48487836120e6565b6116ad8161179a565b846116b89190612dff565b93506040518060800160405280600163ffffffff1681526020018481526020018363ffffffff16815260200182815250945050505050919050565b6116fb612342565b5f6117066020611807565b83516117129190612dff565b90505f61171f82856120ac565b905060208261172e9190612dff565b91505f61173b8386610eb9565b90506117476020611807565b836117529190612dff565b92505f61175f848761213b565b90506040518060800160405280600263ffffffff1681526020018481526020018363ffffffff16815260200182815250945050505050919050565b5f602082516117a991906130a8565b90505f602083516117ba91906130d8565b146117ce5780806117ca90613108565b9150505b80806117d990613108565b9150506020816117e9919061314f565b9050919050565b828101600481038051848352808252505050505050565b5f8160088114611913576010811461191c5760188114611925576020811461192e5760288114611937576030811461194057603881146119495760408114611952576048811461195b5760508114611964576058811461196d5760608114611976576068811461197f57607081146119885760788114611991576080811461199a57608881146119a357609081146119ac57609881146119b55760a081146119be5760a881146119c75760b081146119d05760b881146119d95760c081146119e25760c881146119eb5760d081146119f45760d881146119fd5760e08114611a065760e88114611a0f5760f08114611a185760f88114611a21576101008114611a2a5760209150611a2f565b60019150611a2f565b60029150611a2f565b60039150611a2f565b60049150611a2f565b60059150611a2f565b60069150611a2f565b60079150611a2f565b60089150611a2f565b60099150611a2f565b600a9150611a2f565b600b9150611a2f565b600c9150611a2f565b600d9150611a2f565b600e9150611a2f565b600f9150611a2f565b60109150611a2f565b60119150611a2f565b60129150611a2f565b60139150611a2f565b60149150611a2f565b60159150611a2f565b60169150611a2f565b60179150611a2f565b60189150611a2f565b60199150611a2f565b601a9150611a2f565b601b9150611a2f565b601c9150611a2f565b601d9150611a2f565b601e9150611a2f565b601f9150611a2f565b602091505b50919050565b8183820152505050565b5f6020905090565b5f60208351611a5691906130a8565b90505f60208451611a6791906130d8565b1115611a7c578080611a7890613108565b9150505b5f6001820191505b81811015611aa8576020810284015185840152602085039450600181019050611a84565b5050505050565b5f82519050611abf8482846117f0565b600484611acc9190612dff565b93508063ffffffff16841015611b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0e90613200565b60405180910390fd5b8063ffffffff1684611b299190612dff565b935080155f8103611b7a578483018051601f84168015602002818801018581018215602002838601015b81831015611b705782518152602083019250602081019050611b53565b5083855250505050505b5050505050565b611b896123ba565b5f82845111611bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc49061328e565b60405180910390fd5b6006831015611c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c08906132f6565b60405180910390fd5b611c196123ba565b611c2b611c268686611f5c565b611f89565b815f019061ffff16908161ffff1681525050600284611c4a9190612b5f565b9350611c5e611c598686611d56565b611d85565b816020019063ffffffff16908163ffffffff1681525050600484611c829190612b5f565b9350611c998585836020015163ffffffff16612229565b8160400181905250806020015163ffffffff1684611cb79190612b5f565b9350808492509250509250929050565b611ccf6123e3565b611cd76123e3565b5f600690505b8351811015611d4c57611cee6123ba565b611cf88583611b81565b8093508192505050600161ffff16815f015161ffff1603611d24578060400151835f0181905250611d46565b600261ffff16815f015161ffff1603611d4557806040015183602001819052505b5b50611cdd565b8192505050919050565b5f8251600483611d669190612b5f565b1115611d70575f80fd5b63ffffffff8260048501015116905092915050565b5f808260e01b90505f600467ffffffffffffffff811115611da957611da861258b565b5b6040519080825280601f01601f191660200182016040528015611ddb5781602001600182028036833780820191505090505b50905081600360048110611df257611df1613314565b5b1a60f81b815f81518110611e0957611e08613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535081600260048110611e4b57611e4a613314565b5b1a60f81b81600181518110611e6357611e62613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535081600160048110611ea557611ea4613314565b5b1a60f81b81600281518110611ebd57611ebc613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350815f60048110611efe57611efd613314565b5b1a60f81b81600381518110611f1657611f15613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f611f4f825f611d56565b9050809350505050919050565b5f8251600283611f6c9190612b5f565b1115611f76575f80fd5b61ffff8260028501015116905092915050565b5f808260f01b90505f600267ffffffffffffffff811115611fad57611fac61258b565b5b6040519080825280601f01601f191660200182016040528015611fdf5781602001600182028036833780820191505090505b50905081600160028110611ff657611ff5613314565b5b1a60f81b815f8151811061200d5761200c613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350815f6002811061204e5761204d613314565b5b1a60f81b8160018151811061206657612065613314565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f61209f825f611f5c565b9050809350505050919050565b5f82820151905092915050565b5f828201519050600160208204015f6020830611156120d9576001810190505b6020810291505092915050565b5f602090505f808585015192506001602084040190505f60208406111561210e576001810190505b5b8082101561213357858501516020830285015260208603955060018201915061210f565b505050505050565b60605f6121488484610eb9565b63ffffffff16905060048461215d9190612dff565b9350838111156121a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612199906133b1565b60405180910390fd5b80846121ae9190612dff565b9350606081155f81146121cc5760405191506020820160405261221d565b6040519150601f8316801560200281840101848101888315602002848a0101015b8183101561220a57805183526020830192506020810190506121ed565b50858552601f19601f8301166040525050505b50809250505092915050565b6060835182846122399190612b5f565b1115612243575f80fd5b5f8267ffffffffffffffff81111561225e5761225d61258b565b5b6040519080825280601f01601f1916602001820160405280156122905781602001600182028036833780820191505090505b5090505f8060208301915085602088010190506122ae8282876122bb565b8293505050509392505050565b5b602081106122fa57815183526020836122d59190612b5f565b92506020826122e49190612b5f565b91506020816122f39190612dff565b90506122bc565b5f81031561233d575f60018260206123129190612dff565b61010061231f91906134fe565b6123299190612dff565b905080198351168185511681811786525050505b505050565b60405180608001604052805f63ffffffff1681526020015f80191681526020015f63ffffffff168152602001606081525090565b6040518060c001604052806123896123e3565b8152602001606081526020015f63ffffffff16815260200160608152602001606081526020015f61ffff1681525090565b60405180606001604052805f61ffff1681526020015f63ffffffff168152602001606081525090565b604051806040016040528060608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f63ffffffff82169050919050565b6124268161240e565b8114612430575f80fd5b50565b5f813590506124418161241d565b92915050565b5f6020828403121561245c5761245b612406565b5b5f61246984828501612433565b91505092915050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61249f82612472565b9050919050565b6124af81612495565b82525050565b5f6020820190506124c85f8301846124a6565b92915050565b6124d781612495565b81146124e1575f80fd5b50565b5f813590506124f2816124ce565b92915050565b5f6020828403121561250d5761250c612406565b5b5f61251a848285016124e4565b91505092915050565b61252c8161240e565b82525050565b5f8115159050919050565b61254681612532565b82525050565b5f60408201905061255f5f830185612523565b61256c602083018461253d565b9392505050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6125c18261257b565b810181811067ffffffffffffffff821117156125e0576125df61258b565b5b80604052505050565b5f6125f26123fd565b90506125fe82826125b8565b919050565b5f67ffffffffffffffff82111561261d5761261c61258b565b5b6126268261257b565b9050602081019050919050565b828183375f83830152505050565b5f61265361264e84612603565b6125e9565b90508281526020810184848401111561266f5761266e612577565b5b61267a848285612633565b509392505050565b5f82601f83011261269657612695612573565b5b81356126a6848260208601612641565b91505092915050565b5f602082840312156126c4576126c3612406565b5b5f82013567ffffffffffffffff8111156126e1576126e061240a565b5b6126ed84828501612682565b91505092915050565b5f806040838503121561270c5761270b612406565b5b5f612719858286016124e4565b925050602083013567ffffffffffffffff81111561273a5761273961240a565b5b61274685828601612682565b9150509250929050565b5f806040838503121561276657612765612406565b5b5f612773858286016124e4565b925050602061278485828601612433565b9150509250929050565b5f82825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6127d260208361278e565b91506127dd8261279e565b602082019050919050565b5f6020820190508181035f8301526127ff816127c6565b9050919050565b7f417574684d73673a2073656e646572206e6f742076616c69642072656c6179655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f61286060218361278e565b915061286b82612806565b604082019050919050565b5f6020820190508181035f83015261288d81612854565b9050919050565b5f81519050919050565b5f5b838110156128bb5780820151818401526020810190506128a0565b5f8484015250505050565b5f6128d082612894565b6128da818561278e565b93506128ea81856020860161289e565b6128f38161257b565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f612922826128fe565b61292c8185612908565b935061293c81856020860161289e565b6129458161257b565b840191505092915050565b5f6040820190508181035f83015261296881856128c6565b9050818103602083015261297c8184612918565b90509392505050565b7f417574684d73673a2073656e646572206e6f742076616c6964207375622d70725f8201527f6f746f636f6c0000000000000000000000000000000000000000000000000000602082015250565b5f6129df60268361278e565b91506129ea82612985565b604082019050919050565b5f6020820190508181035f830152612a0c816129d3565b9050919050565b5f6020820190508181035f830152612a2b8184612918565b905092915050565b7f417574684d73673a2070726f746f636f6c2065786973747300000000000000005f82015250565b5f612a6760188361278e565b9150612a7282612a33565b602082019050919050565b5f6020820190508181035f830152612a9481612a5b565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612af560268361278e565b9150612b0082612a9b565b604082019050919050565b5f6020820190508181035f830152612b2281612ae9565b9050919050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612b6982612b29565b9150612b7483612b29565b9250828201905080821115612b8c57612b8b612b32565b5b92915050565b7f417574684d73673a206e6f2070726f746f636f6c2065786973740000000000005f82015250565b5f612bc6601a8361278e565b9150612bd182612b92565b602082019050919050565b5f6020820190508181035f830152612bf381612bba565b9050919050565b5f819050919050565b612c0c81612bfa565b82525050565b5f6060820190508181035f830152612c2a81866128c6565b9050612c396020830185612c03565b8181036040830152612c4b8184612918565b9050949350505050565b7f656e636f6465417574684d6573736167653a20616d2076657273696f6e206e6f5f8201527f7420737570706f72740000000000000000000000000000000000000000000000602082015250565b5f612caf60298361278e565b9150612cba82612c55565b604082019050919050565b5f6020820190508181035f830152612cdc81612ca3565b9050919050565b7f6465636f6465417574684d6573736167653a20616d2076657273696f6e206e6f5f8201527f7420737570706f72740000000000000000000000000000000000000000000000602082015250565b5f612d3d60298361278e565b9150612d4882612ce3565b604082019050919050565b5f6020820190508181035f830152612d6a81612d31565b9050919050565b7f656e636f6465417574684d65737361676556313a2077726f6e672076657273695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f612dcb60228361278e565b9150612dd682612d71565b604082019050919050565b5f6020820190508181035f830152612df881612dbf565b9050919050565b5f612e0982612b29565b9150612e1483612b29565b9250828203905081811115612e2c57612e2b612b32565b5b92915050565b7f656e636f6465417574684d65737361676556323a2077726f6e672076657273695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f612e8c60228361278e565b9150612e9782612e32565b604082019050919050565b5f6020820190508181035f830152612eb981612e80565b9050919050565b7f656e636f6465417574684d65737361676556323a20626f6479206c656e6774685f8201527f206f7665726c696d697400000000000000000000000000000000000000000000602082015250565b5f612f1a602a8361278e565b9150612f2582612ec0565b604082019050919050565b5f6020820190508181035f830152612f4781612f0e565b9050919050565b7f696c6c6567616c206c656e677468206f662075646167207265737000000000005f82015250565b5f612f82601b8361278e565b9150612f8d82612f4e565b602082019050919050565b5f6020820190508181035f830152612faf81612f76565b9050919050565b5f612fc08261240e565b9150612fcb8361240e565b9250828201905063ffffffff811115612fe757612fe6612b32565b5b92915050565b7f6c656e677468206f6620756461672072657370206c657373207468616e2074685f8201527f65206c656e677468206f66206d736720626f6479000000000000000000000000602082015250565b5f61304760348361278e565b915061305282612fed565b604082019050919050565b5f6020820190508181035f8301526130748161303b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6130b282612b29565b91506130bd83612b29565b9250826130cd576130cc61307b565b5b828204905092915050565b5f6130e282612b29565b91506130ed83612b29565b9250826130fd576130fc61307b565b5b828206905092915050565b5f61311282612b29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361314457613143612b32565b5b600182019050919050565b5f61315982612b29565b915061316483612b29565b925082820261317281612b29565b9150828204841483151761318957613188612b32565b5b5092915050565b7f7661724279746573546f42797465733a206f6666736574206c657373207468615f8201527f6e2074686520696e707574206c656e6774680000000000000000000000000000602082015250565b5f6131ea60328361278e565b91506131f582613190565b604082019050919050565b5f6020820190508181035f830152613217816131de565b9050919050565b7f6c656e677468206f66207261772064617461206c657373207468616e206f66665f8201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b5f61327860238361278e565b91506132838261321e565b604082019050919050565b5f6020820190508181035f8301526132a58161326c565b9050919050565b7f696c6c6567616c206f66667365740000000000000000000000000000000000005f82015250565b5f6132e0600e8361278e565b91506132eb826132ac565b602082019050919050565b5f6020820190508181035f83015261330d816132d4565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f6279746573546f56617242797465733a206f6666736574206c657373207468615f8201527f6e206c656e677468206f6620626f647900000000000000000000000000000000602082015250565b5f61339b60308361278e565b91506133a682613341565b604082019050919050565b5f6020820190508181035f8301526133c88161338f565b9050919050565b5f8160011c9050919050565b5f808291508390505b600185111561342457808604811115613400576133ff612b32565b5b600185161561340f5780820291505b808102905061341d856133cf565b94506133e4565b94509492505050565b5f8261343c57600190506134f7565b81613449575f90506134f7565b816001811461345f576002811461346957613498565b60019150506134f7565b60ff84111561347b5761347a612b32565b5b8360020a91508482111561349257613491612b32565b5b506134f7565b5060208310610133831016604e8410600b84101617156134cd5782820a9050838111156134c8576134c7612b32565b5b6134f7565b6134da84848460016133db565b925090508184048111156134f1576134f0612b32565b5b81810290505b9392505050565b5f61350882612b29565b915061351383612b29565b92506135407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461342d565b90509291505056fea2646970667358221220fbb5f14707289f6c8b81c91d85f474a01cad1a20613326ced92a3ba5f28ce13564736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";

    private static final String SDP_BYTE_CODE = "608060405234801562000010575f80fd5b505f62000022620000d460201b60201c565b9050805f806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508077ffffffffffffffffffffffffffffffffffffffffffffffff165f77ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000db565b5f33905090565b61494b80620000e95f395ff3fe608060405234801561000f575f80fd5b50600436106100f3575f3560e01c8063838a102c11610095578063c09b261b11610064578063c09b261b1461025f578063c1cecc5a1461027b578063f2fde38b14610297578063f76f703b146102b3576100f3565b8063838a102c146101d75780638da5cb5b146101f357806391198fcd14610211578063a9d662af14610241576100f3565b806356cb2d02116100d157806356cb2d021461017557806360e8b9c914610193578063715018a6146101af5780638037d45e146101b9576100f3565b806305ca8da6146100f75780630d9ae9e5146101275780633ac6dfb114610157575b5f80fd5b610111600480360381019061010c91906135f1565b6102cf565b60405161011e91906136a3565b60405180910390f35b610141600480360381019061013c91906136bc565b6104f8565b60405161014e919061377d565b60405180910390f35b61015f6105e9565b60405161016c91906136a3565b60405180910390f35b61017d6105f2565b60405161018a91906136a3565b60405180910390f35b6101ad60048036038101906101a891906137f4565b6105f8565b005b6101b761073d565b005b6101c161088f565b6040516101ce919061382e565b60405180910390f35b6101f160048036038101906101ec919061397f565b6108bb565b005b6101fb61096f565b604051610208919061382e565b60405180910390f35b61022b600480360381019061022691906135f1565b61099a565b60405161023891906136a3565b60405180910390f35b610249610bbd565b604051610256919061382e565b60405180910390f35b610279600480360381019061027491906139c6565b610be6565b005b610295600480360381019061029091906139c6565b610ded565b005b6102b160048036038101906102ac91906137f4565b610f53565b005b6102cd60048036038101906102c891906139c6565b61111c565b005b5f6102dd87878786866112d4565b5f604051806101200160405280600263ffffffff1681526020015f801b815260200189898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200187815260200186610359575f61035c565b60015b60ff1681526020016103b28a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050338a6112db565b63ffffffff1667ffffffffffffffff16815260200163ffffffff8016815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200160405180602001604052805f81525081525090506104456002548261136990919063ffffffff16565b60015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663e41fb51733610494846115d0565b6040518363ffffffff1660e01b81526004016104b1929190613ad1565b5f604051808303815f87803b1580156104c8575f80fd5b505af11580156104da573d5f803e3d5ffd5b505050506104e66118fb565b80602001519150509695505050505050565b5f600254848460405160200161050f929190613b2d565b6040516020818303038152906040528051906020012014610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90613b9f565b60405180910390fd5b5f6105b488888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505087856118fd565b90505f60045f8381526020019081526020015f205f9054906101000a900463ffffffff16905080925050509695505050505050565b5f600254905090565b60025481565b610600611958565b77ffffffffffffffffffffffffffffffffffffffffffffffff1661062261096f565b77ffffffffffffffffffffffffffffffffffffffffffffffff161461067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390613c07565b60405180910390fd5b5f77ffffffffffffffffffffffffffffffffffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff16036106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990613c6f565b60405180910390fd5b8060015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555050565b610745611958565b77ffffffffffffffffffffffffffffffffffffffffffffffff1661076761096f565b77ffffffffffffffffffffffffffffffffffffffffffffffff16146107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890613c07565b60405180910390fd5b5f77ffffffffffffffffffffffffffffffffffffffffffffffff165f8054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f805f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550565b5f60015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16905090565b6108c3611958565b77ffffffffffffffffffffffffffffffffffffffffffffffff166108e561096f565b77ffffffffffffffffffffffffffffffffffffffffffffffff161461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093690613c07565b60405180910390fd5b806040516020016109509190613cc7565b6040516020818303038152906040528051906020012060028190555050565b5f805f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16905090565b5f6109a8878787868661195f565b5f604051806101200160405280600263ffffffff1681526020015f801b815260200189898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200187815260200186610a24575f610a27565b60015b60ff16815260200167ffffffffffffffff80168152602001610a8d8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050338a611966565b63ffffffff16815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200160405180602001604052805f8152508152509050610b0a6002548261136990919063ffffffff16565b60015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663e41fb51733610b59846115d0565b6040518363ffffffff1660e01b8152600401610b76929190613ad1565b5f604051808303815f87803b158015610b8d575f80fd5b505af1158015610b9f573d5f803e3d5ffd5b50505050610bab6119f4565b80602001519150509695505050505050565b60015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b3377ffffffffffffffffffffffffffffffffffffffffffffffff1660015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1614610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7890613d27565b60405180910390fd5b610c8e85858585856119f6565b5f610cdb83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506119fd565b905060018163ffffffff1603610d3f57610d3a86868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050611abd565b610ddd565b60028163ffffffff1603610da157610d9c86868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050611b81565b610ddc565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390613d8f565b60405180910390fd5b5b610de5611ccc565b505050505050565b610dfa85858585856112d4565b5f604051806080016040528087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200185815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200163ffffffff8016815250905060015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663e41fb51733610ef984611cce565b6040518363ffffffff1660e01b8152600401610f16929190613ad1565b5f604051808303815f87803b158015610f2d575f80fd5b505af1158015610f3f573d5f803e3d5ffd5b50505050610f4b6118fb565b505050505050565b610f5b611958565b77ffffffffffffffffffffffffffffffffffffffffffffffff16610f7d61096f565b77ffffffffffffffffffffffffffffffffffffffffffffffff1614610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90613c07565b60405180910390fd5b5f77ffffffffffffffffffffffffffffffffffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff160361104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104490613e1d565b60405180910390fd5b8077ffffffffffffffffffffffffffffffffffffffffffffffff165f8054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555050565b611129858585858561195f565b5f604051806080016040528087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200185815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200161121b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050503388611966565b63ffffffff1681525090505f61123082611cce565b905060015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663e41fb51733836040518363ffffffff1660e01b8152600401611296929190613ad1565b5f604051808303815f87803b1580156112ad575f80fd5b505af11580156112bf573d5f803e3d5ffd5b505050506112cb6119f4565b50505050505050565b5050505050565b5f806112e8858585611e0a565b90505f60055f8381526020019081526020015f205f9054906101000a900463ffffffff16905060055f8381526020019081526020015f205f81819054906101000a900463ffffffff168092919061133e90613e68565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b6002825f015163ffffffff16146113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90613edd565b60405180910390fd5b63ffffffff8260e00151511115611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613f6b565b60405180910390fd5b5f8260e0015151836040015151607961141a9190613f92565b6114249190613f92565b90505f8167ffffffffffffffff8111156114415761144061385b565b5b6040519080825280601f01601f1916602001820160405280156114735781602001600182028036833780820191505090505b5090505f82905061149d8163ff000000875f01516114919190613fc5565b63ffffffff1684611e72565b6114a76020611e7c565b816114b29190613ffc565b90505f856040015190506114c78282856120aa565b805160046114d59190613f92565b826114e09190613ffc565b91506114f18287606001518561217c565b6114f9612186565b60ff16826115079190613ffc565b91506115188287608001518561218e565b6001826115259190613ffc565b9150611536828760a00151856121a5565b6115406040611e7c565b8261154b9190613ffc565b915061155c828760c00151856121bc565b6115666020611e7c565b826115719190613ffc565b9150611582828760e00151856120aa565b8560e001515160046115949190613f92565b8261159f9190613ffc565b91506115ac8233856121d3565b6115b782868561217c565b8280519060200120866020018181525050505050505050565b60606002825f015163ffffffff161461161e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161590613edd565b60405180910390fd5b63ffffffff8260e0015151111561166a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166190613f6b565b60405180910390fd5b5f801b8260200151036116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a99061409f565b60405180910390fd5b5f80600260ff16846080015160ff161190508015611710578361010001515160048560e001515186604001515160596116eb9190613f92565b6116f59190613f92565b6116ff9190613f92565b6117099190613f92565b9150611735565b8360e001515184604001515160596117289190613f92565b6117329190613f92565b91505b5f8267ffffffffffffffff8111156117505761174f61385b565b5b6040519080825280601f01601f1916602001820160405280156117825781602001600182028036833780820191505090505b5090505f8390506117ac8163ff000000885f01516117a09190613fc5565b63ffffffff1684611e72565b6117b66020611e7c565b816117c19190613ffc565b90506117d28187602001518461217c565b6117da612186565b60ff16816117e89190613ffc565b90505f866040015190506117fd8282856120aa565b8051600461180b9190613f92565b826118169190613ffc565b91506118278288606001518561217c565b61182f612186565b60ff168261183d9190613ffc565b915061184e8288608001518561218e565b60018261185b9190613ffc565b915061186c828860a00151856121a5565b6118766040611e7c565b826118819190613ffc565b9150611892828860c00151856121bc565b61189c6020611e7c565b826118a79190613ffc565b91506118b8828860e00151856120aa565b8660e001515160046118ca9190613f92565b826118d59190613ffc565b915083156118ee576118ed82886101000151856120aa565b5b8295505050505050919050565b565b5f8360405160200161190f9190613cc7565b604051602081830303815290604052805190602001208383604051602001611939939291906140dd565b6040516020818303038152906040528051906020012090509392505050565b5f33905090565b5050505050565b5f80611973858585611e0a565b90505f60035f8381526020019081526020015f205f9054906101000a900463ffffffff16905060035f8381526020019081526020015f205f81819054906101000a900463ffffffff16809291906119c990613e68565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b565b5050505050565b5f805f8351905060048103602085010151915060ff60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603611ab1575f80600467ffffffffffffffff811115611a5a57611a5961385b565b5b6040519080825280601f01601f191660200182016040528015611a8c5781602001600182028036833780820191505090505b5090506003830360200186015160218201526004810151915081945050505050611ab8565b6001925050505b919050565b611ac561342e565b611ad882826121dd90919063ffffffff16565b600254815f0151604051602001611aef9190613cc7565b6040516020818303038152906040528051906020012014611b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3c90613b9f565b60405180910390fd5b63ffffffff8016816060015163ffffffff1603611b6d57611b6885858584612389565b611b7a565b611b798585858461240b565b5b5050505050565b611b8961345d565b611b9c828261265290919063ffffffff16565b6002548160400151604051602001611bb49190613cc7565b6040516020818303038152906040528051906020012014611c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0190613b9f565b60405180910390fd5b5f60ff16816080015160ff161480611c2c5750600160ff16816080015160ff16145b15611c4257611c3d85858584612804565b611cc5565b600260ff16816080015160ff1603611c6557611c6085858584612932565b611cc4565b600360ff16816080015160ff1603611c8857611c8385858584612a2c565b611cc3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cba90614163565b60405180910390fd5b5b5b5050505050565b565b60605f611cdd835f0151612b34565b60206004611cee8660400151612b8a565b611cf89190613f92565b611d029190613f92565b611d0c9190613f92565b90505f8167ffffffffffffffff811115611d2957611d2861385b565b5b6040519080825280601f01601f191660200182016040528015611d5b5781602001600182028036833780820191505090505b5090505f829050611d7081865f015184612be0565b611d7c855f0151612b34565b81611d879190613ffc565b9050611d988186602001518461217c565b611da0612186565b60ff1681611dae9190613ffc565b9050611dbf818660600151846121bc565b611dc96020612c48565b81611dd49190613ffc565b9050611de581866040015184612be0565b611df28560400151612b8a565b81611dfd9190613ffc565b9050819350505050919050565b5f80611e1584612c59565b90508085604051602001611e299190613cc7565b6040516020818303038152906040528051906020012084604051602001611e52939291906140dd565b604051602081830303815290604052805190602001209150509392505050565b8183820152505050565b5f8160088114611f885760108114611f915760188114611f9a5760208114611fa35760288114611fac5760308114611fb55760388114611fbe5760408114611fc75760488114611fd05760508114611fd95760588114611fe25760608114611feb5760688114611ff45760708114611ffd5760788114612006576080811461200f57608881146120185760908114612021576098811461202a5760a081146120335760a8811461203c5760b081146120455760b8811461204e5760c081146120575760c881146120605760d081146120695760d881146120725760e0811461207b5760e881146120845760f0811461208d5760f8811461209657610100811461209f57602091506120a4565b600191506120a4565b600291506120a4565b600391506120a4565b600491506120a4565b600591506120a4565b600691506120a4565b600791506120a4565b600891506120a4565b600991506120a4565b600a91506120a4565b600b91506120a4565b600c91506120a4565b600d91506120a4565b600e91506120a4565b600f91506120a4565b601091506120a4565b601191506120a4565b601291506120a4565b601391506120a4565b601491506120a4565b601591506120a4565b601691506120a4565b601791506120a4565b601891506120a4565b601991506120a4565b601a91506120a4565b601b91506120a4565b601c91506120a4565b601d91506120a4565b601e91506120a4565b601f91506120a4565b602091505b50919050565b5f825190506120ba8482846121bc565b6004846120c79190613ffc565b93508063ffffffff16841015612112576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612109906141f1565b60405180910390fd5b8063ffffffff16846121249190613ffc565b935080155f8103612175578483018051601f84168015602002818801018581018215602002838601015b8183101561216b578251815260208301925060208101905061214e565b5083855250505050505b5050505050565b8183820152505050565b5f6020905090565b828101600181038051848352808252505050505050565b828101600881038051848352808252505050505050565b828101600481038051848352808252505050505050565b8183820152505050565b5f815190505f60206121ef8385612cbe565b6121f99190613fc5565b90505f8163ffffffff1667ffffffffffffffff81111561221c5761221b61385b565b5b6040519080825280601f01601f19166020018201604052801561224e5781602001600182028036833780820191505090505b50905061225c838583612ccb565b61226581612b8a565b836122709190613ffc565b92505f61227d8486612d20565b9050612287612186565b60ff16846122959190613ffc565b93505f6122a28587612cbe565b90506122ae6020611e7c565b856122b99190613ffc565b94505f60206122c88789612cbe565b6122d29190613fc5565b90505f8163ffffffff1667ffffffffffffffff8111156122f5576122f461385b565b5b6040519080825280601f01601f1916602001820160405280156123275781602001600182028036833780820191505090505b509050612335878983612ccb565b61233e81612b8a565b876123499190613ffc565b965084895f01819052508389602001818152505082896060019063ffffffff16908163ffffffff1681525050808960400181905250505050505050505050565b61239281612d2d565b77ffffffffffffffffffffffffffffffffffffffffffffffff1663ff098be785858585604001516040518563ffffffff1660e01b81526004016123d8949392919061423b565b5f604051808303815f87803b1580156123ef575f80fd5b505af1158015612401573d5f803e3d5ffd5b5050505050505050565b5f61245e85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050848460200151612d42565b90508063ffffffff16826060015163ffffffff16146124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a9906142ca565b60405180910390fd5b5f60605f6124bf85612d2d565b90505f8177ffffffffffffffffffffffffffffffffffffffffffffffff163b03612523575f92506040518060400160405280601481526020017f726563656976657220686173206e6f20636f64650000000000000000000000008152509150612605565b8077ffffffffffffffffffffffffffffffffffffffffffffffff1663c09b261b89898989604001516040518563ffffffff1660e01b815260040161256a949392919061423b565b5f604051808303815f87803b158015612581575f80fd5b505af1925050508015612592575060015b6125ff5761259e6142f4565b806308c379a0036125c657506125b2614313565b806125bd57506125c8565b809250506125fa565b505b3d805f81146125f2576040519150601f19603f3d011682016040523d82523d5f602084013e6125f7565b606091505b50505b612604565b600192505b5b7f5c739d2e6f1ca8bbfc6b71f12b702b9c87e02646edd83b3600d624abb67fab048888888488888860405161264097969594939291906143e9565b60405180910390a15050505050505050565b5f81519050612660826119fd565b835f019063ffffffff16908163ffffffff16815250506126806020612c48565b8161268b9190613ffc565b90506126978183612d20565b8360200181815250506126a8612186565b60ff16816126b69190613ffc565b90505f6126c38284612dd0565b9050808460400181905250805160046126dc9190613f92565b826126e79190613ffc565b91506126f38284612d20565b846060018181525050612704612186565b60ff16826127129190613ffc565b915061271e8284612ebe565b846080019060ff16908160ff168152505060018261273c9190613ffc565b91506127488284612ecb565b8460a0019067ffffffffffffffff16908167ffffffffffffffff16815250506008826127749190613ffc565b91506127808284612cbe565b8460c0019063ffffffff16908163ffffffff16815250506004826127a49190613ffc565b91506127b08284612dd0565b8460e001819052508360e001515160046127ca9190613f92565b826127d59190613ffc565b9150600260ff16846080015160ff1611156127fe576127f48284612dd0565b8461010001819052505b50505050565b5f606063ffffffff80168360c0015163ffffffff160361288d5761282a86868686612ed8565b80925081935050505f60ff16836080015160ff160361288857818190612886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287d9190614458565b60405180910390fd5b505b6128a2565b61289986868686613043565b80925081935050505b7fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d3836020015187878787604001516128d989613253565b8960c001518a60a001518b608001518b8b6040516129019b9a999897969594939291906144b5565b60405180910390a1600160ff16836080015160ff160361292a57612929838787878686613268565b5b505050505050565b61293b81613253565b77ffffffffffffffffffffffffffffffffffffffffffffffff1663e5512e9782602001518686868660c001518760a001518860e001516040518863ffffffff1660e01b81526004016129939796959493929190614566565b5f604051808303815f87803b1580156129aa575f80fd5b505af11580156129bc573d5f803e3d5ffd5b505050507fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d3816020015185858585604001516129f787613253565b8760c001518860a0015189608001516001604051612a1e9a9998979695949392919061461f565b60405180910390a150505050565b612a3581613253565b77ffffffffffffffffffffffffffffffffffffffffffffffff1663f6d750e482602001518686868660c001518760a001518860e001518961010001516040518963ffffffff1660e01b8152600401612a949897969594939291906146ce565b5f604051808303815f87803b158015612aab575f80fd5b505af1158015612abd573d5f803e3d5ffd5b505050507fd0831f2b07fd854a865c682cb68bd34a56d746ae81a34d87c820e51ab979c3d381602001518585858560400151612af887613253565b8760c001518860a00151896080015160018b6101000151604051612b269b9a999897969594939291906144b5565b60405180910390a150505050565b5f60208251612b43919061477f565b90505f60208351612b5491906147af565b14612b68578080612b64906147df565b9150505b8080612b73906147df565b915050602081612b839190614826565b9050919050565b5f60208251612b99919061477f565b90505f60208351612baa91906147af565b14612bbe578080612bba906147df565b9150505b8080612bc9906147df565b915050602081612bd99190614826565b9050919050565b5f60208351612bef919061477f565b90505f60208451612c0091906147af565b1115612c15578080612c11906147df565b9150505b5f6001820191505b81811015612c41576020810284015185840152602085039450600181019050612c1d565b5050505050565b5f612c5282611e7c565b9050919050565b5f80602067ffffffffffffffff811115612c7657612c7561385b565b5b6040519080825280601f01601f191660200182016040528015612ca85781602001600182028036833780820191505090505b5090508260208201526020810151915050919050565b5f82820151905092915050565b5f602090505f808585015192506001602084040190505f602084061115612cf3576001810190505b5b80821015612d18578585015160208302850152602086039550600182019150612cf4565b505050505050565b5f82820151905092915050565b5f612d3b82602001516133b0565b9050919050565b5f80612d4f8585856118fd565b90505f60045f8381526020019081526020015f205f9054906101000a900463ffffffff16905060045f8381526020019081526020015f205f81819054906101000a900463ffffffff1680929190612da590613e68565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b60605f612ddd8484612cbe565b63ffffffff169050600484612df29190613ffc565b935083811115612e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2e906148d7565b60405180910390fd5b8084612e439190613ffc565b9350606081155f8114612e6157604051915060208201604052612eb2565b6040519150601f8316801560200281840101848101888315602002848a0101015b81831015612e9f5780518352602083019250602081019050612e82565b50858552601f19601f8301166040525050505b50809250505092915050565b5f82820151905092915050565b5f82820151905092915050565b5f60605f60605f612ee886613253565b77ffffffffffffffffffffffffffffffffffffffffffffffff163b03612f48575f91506040518060400160405280601481526020017f726563656976657220686173206e6f20636f64650000000000000000000000008152509050613032565b612f5185613253565b77ffffffffffffffffffffffffffffffffffffffffffffffff1663ff098be78989898960e001516040518563ffffffff1660e01b8152600401612f97949392919061423b565b5f604051808303815f87803b158015612fae575f80fd5b505af1925050508015612fbf575060015b61302c57612fcb6142f4565b806308c379a003612ff35750612fdf614313565b80612fea5750612ff5565b80915050613027565b505b3d805f811461301f576040519150601f19603f3d011682016040523d82523d5f602084013e613024565b606091505b50505b613031565b600191505b5b818193509350505094509492505050565b5f60605f61309987878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050868660600151612d42565b90508063ffffffff168460c0015163ffffffff16146130ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130e4906142ca565b60405180910390fd5b5f60605f6130fa87613253565b90505f8177ffffffffffffffffffffffffffffffffffffffffffffffff163b0361315e575f92506040518060400160405280601481526020017f726563656976657220686173206e6f20636f64650000000000000000000000008152509150613240565b8077ffffffffffffffffffffffffffffffffffffffffffffffff1663c09b261b8b8b8b8b60e001516040518563ffffffff1660e01b81526004016131a5949392919061423b565b5f604051808303815f87803b1580156131bc575f80fd5b505af19250505080156131cd575060015b61323a576131d96142f4565b806308c379a00361320157506131ed614313565b806131f85750613203565b80925050613235565b505b3d805f811461322d576040519150601f19603f3d011682016040523d82523d5f602084013e613232565b606091505b50505b61323f565b600192505b5b8282955095505050505094509492505050565b5f61326182606001516133b0565b9050919050565b5f61327287613253565b905085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050876040018190525083876060018181525050826132d65760036132d9565b60025b876080019060ff16908160ff1681525050826132f55781613305565b60405180602001604052805f8152505b87610100018190525060015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1663e41fb5178261335d8a6115d0565b6040518363ffffffff1660e01b815260040161337a929190613ad1565b5f604051808303815f87803b158015613391575f80fd5b505af11580156133a3573d5f803e3d5ffd5b5050505050505050505050565b5f80602067ffffffffffffffff8111156133cd576133cc61385b565b5b6040519080825280601f01601f1916602001820160405280156133ff5781602001600182028036833780820191505090505b50905061340e6020848361217c565b613419602082613421565b915050919050565b5f82820151905092915050565b6040518060800160405280606081526020015f8019168152602001606081526020015f63ffffffff1681525090565b6040518061012001604052805f63ffffffff1681526020015f8019168152602001606081526020015f80191681526020015f60ff1681526020015f67ffffffffffffffff1681526020015f63ffffffff16815260200160608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126134f4576134f36134d3565b5b8235905067ffffffffffffffff811115613511576135106134d7565b5b60208301915083600182028301111561352d5761352c6134db565b5b9250929050565b5f819050919050565b61354681613534565b8114613550575f80fd5b50565b5f813590506135618161353d565b92915050565b5f8115159050919050565b61357b81613567565b8114613585575f80fd5b50565b5f8135905061359681613572565b92915050565b5f8083601f8401126135b1576135b06134d3565b5b8235905067ffffffffffffffff8111156135ce576135cd6134d7565b5b6020830191508360018202830111156135ea576135e96134db565b5b9250929050565b5f805f805f806080878903121561360b5761360a6134cb565b5b5f87013567ffffffffffffffff811115613628576136276134cf565b5b61363489828a016134df565b9650965050602061364789828a01613553565b945050604061365889828a01613588565b935050606087013567ffffffffffffffff811115613679576136786134cf565b5b61368589828a0161359c565b92509250509295509295509295565b61369d81613534565b82525050565b5f6020820190506136b65f830184613694565b92915050565b5f805f805f80608087890312156136d6576136d56134cb565b5b5f87013567ffffffffffffffff8111156136f3576136f26134cf565b5b6136ff89828a016134df565b9650965050602061371289828a01613553565b945050604087013567ffffffffffffffff811115613733576137326134cf565b5b61373f89828a016134df565b9350935050606061375289828a01613553565b9150509295509295509295565b5f63ffffffff82169050919050565b6137778161375f565b82525050565b5f6020820190506137905f83018461376e565b92915050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6137c382613796565b9050919050565b6137d3816137b9565b81146137dd575f80fd5b50565b5f813590506137ee816137ca565b92915050565b5f60208284031215613809576138086134cb565b5b5f613816848285016137e0565b91505092915050565b613828816137b9565b82525050565b5f6020820190506138415f83018461381f565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6138918261384b565b810181811067ffffffffffffffff821117156138b0576138af61385b565b5b80604052505050565b5f6138c26134c2565b90506138ce8282613888565b919050565b5f67ffffffffffffffff8211156138ed576138ec61385b565b5b6138f68261384b565b9050602081019050919050565b828183375f83830152505050565b5f61392361391e846138d3565b6138b9565b90508281526020810184848401111561393f5761393e613847565b5b61394a848285613903565b509392505050565b5f82601f830112613966576139656134d3565b5b8135613976848260208601613911565b91505092915050565b5f60208284031215613994576139936134cb565b5b5f82013567ffffffffffffffff8111156139b1576139b06134cf565b5b6139bd84828501613952565b91505092915050565b5f805f805f606086880312156139df576139de6134cb565b5b5f86013567ffffffffffffffff8111156139fc576139fb6134cf565b5b613a08888289016134df565b95509550506020613a1b88828901613553565b935050604086013567ffffffffffffffff811115613a3c57613a3b6134cf565b5b613a488882890161359c565b92509250509295509295909350565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613a8e578082015181840152602081019050613a73565b5f8484015250505050565b5f613aa382613a57565b613aad8185613a61565b9350613abd818560208601613a71565b613ac68161384b565b840191505092915050565b5f604082019050613ae45f83018561381f565b8181036020830152613af68184613a99565b90509392505050565b5f81905092915050565b5f613b148385613aff565b9350613b21838584613903565b82840190509392505050565b5f613b39828486613b09565b91508190509392505050565b5f82825260208201905092915050565b7f5344504d73673a2077726f6e6720726563656976696e6720646f6d61696e00005f82015250565b5f613b89601e83613b45565b9150613b9482613b55565b602082019050919050565b5f6020820190508181035f830152613bb681613b7d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613bf1602083613b45565b9150613bfc82613bbd565b602082019050919050565b5f6020820190508181035f830152613c1e81613be5565b9050919050565b7f5344504d73673a20696e76616c696420616d20636f6e747261637400000000005f82015250565b5f613c59601b83613b45565b9150613c6482613c25565b602082019050919050565b5f6020820190508181035f830152613c8681613c4d565b9050919050565b5f81519050919050565b5f613ca182613c8d565b613cab8185613aff565b9350613cbb818560208601613a71565b80840191505092915050565b5f613cd28284613c97565b915081905092915050565b7f5344504d73673a206e6f742076616c696420616d20636f6e74726163740000005f82015250565b5f613d11601d83613b45565b9150613d1c82613cdd565b602082019050919050565b5f6020820190508181035f830152613d3e81613d05565b9050919050565b7f756e737570706f7274207364702076657273696f6e00000000000000000000005f82015250565b5f613d79601583613b45565b9150613d8482613d45565b602082019050919050565b5f6020820190508181035f830152613da681613d6d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613e07602683613b45565b9150613e1282613dad565b604082019050919050565b5f6020820190508181035f830152613e3481613dfb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e728261375f565b915063ffffffff8203613e8857613e87613e3b565b5b600182019050919050565b7f656e636f64655344504d6573736167653a2077726f6e672076657273696f6e005f82015250565b5f613ec7601f83613b45565b9150613ed282613e93565b602082019050919050565b5f6020820190508181035f830152613ef481613ebb565b9050919050565b7f656e636f64655344504d6573736167653a20626f6479206c656e677468206f765f8201527f65726c696d697400000000000000000000000000000000000000000000000000602082015250565b5f613f55602783613b45565b9150613f6082613efb565b604082019050919050565b5f6020820190508181035f830152613f8281613f49565b9050919050565b5f819050919050565b5f613f9c82613f89565b9150613fa783613f89565b9250828201905080821115613fbf57613fbe613e3b565b5b92915050565b5f613fcf8261375f565b9150613fda8361375f565b9250828201905063ffffffff811115613ff657613ff5613e3b565b5b92915050565b5f61400682613f89565b915061401183613f89565b925082820390508181111561402957614028613e3b565b5b92915050565b7f656e636f64655344504d6573736167653a207a65726f206d65737361676520695f8201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b5f614089602183613b45565b91506140948261402f565b604082019050919050565b5f6020820190508181035f8301526140b68161407d565b9050919050565b5f819050919050565b6140d76140d282613534565b6140bd565b82525050565b5f6140e882866140c6565b6020820191506140f882856140c6565b60208201915061410882846140c6565b602082019150819050949350505050565b7f756e65787065637465642061746f6d696320666c6167000000000000000000005f82015250565b5f61414d601683613b45565b915061415882614119565b602082019050919050565b5f6020820190508181035f83015261417a81614141565b9050919050565b7f7661724279746573546f42797465733a206f6666736574206c657373207468615f8201527f6e2074686520696e707574206c656e6774680000000000000000000000000000602082015250565b5f6141db603283613b45565b91506141e682614181565b604082019050919050565b5f6020820190508181035f830152614208816141cf565b9050919050565b5f61421a8385613b45565b9350614227838584613903565b6142308361384b565b840190509392505050565b5f6060820190508181035f83015261425481868861420f565b90506142636020830185613694565b81810360408301526142758184613a99565b905095945050505050565b7f5344504d73673a2073657175656e6365206e6f7420657175616c0000000000005f82015250565b5f6142b4601a83613b45565b91506142bf82614280565b602082019050919050565b5f6020820190508181035f8301526142e1816142a8565b9050919050565b5f8160e01c9050919050565b5f60033d11156143105760045f803e61430d5f516142e8565b90505b90565b5f60443d1061439f576143246134c2565b60043d036004823e80513d602482011167ffffffffffffffff8211171561434c57505061439f565b808201805167ffffffffffffffff81111561436a575050505061439f565b80602083010160043d03850181111561438757505050505061439f565b61439682602001850186613888565b82955050505050505b90565b6143ab81613567565b82525050565b5f6143bb82613c8d565b6143c58185613b45565b93506143d5818560208601613a71565b6143de8161384b565b840191505092915050565b5f60c0820190508181035f83015261440281898b61420f565b90506144116020830188613694565b61441e604083018761381f565b61442b606083018661376e565b61443860808301856143a2565b81810360a083015261444a81846143b1565b905098975050505050505050565b5f6020820190508181035f83015261447081846143b1565b905092915050565b5f67ffffffffffffffff82169050919050565b61449481614478565b82525050565b5f60ff82169050919050565b6144af8161449a565b82525050565b5f610140820190506144c95f83018e613694565b81810360208301526144dc818c8e61420f565b90506144eb604083018b613694565b81810360608301526144fd818a6143b1565b905061450c608083018961381f565b61451960a083018861376e565b61452660c083018761448b565b61453360e08301866144a6565b6145416101008301856143a2565b81810361012083015261455481846143b1565b90509c9b505050505050505050505050565b5f60c0820190506145795f83018a613694565b818103602083015261458c81888a61420f565b905061459b6040830187613694565b6145a8606083018661376e565b6145b5608083018561448b565b81810360a08301526145c78184613a99565b905098975050505050505050565b7f73756363657373000000000000000000000000000000000000000000000000005f82015250565b5f614609600783613b45565b9150614614826145d5565b602082019050919050565b5f610140820190506146335f83018d613694565b8181036020830152614646818b8d61420f565b9050614655604083018a613694565b818103606083015261466781896143b1565b9050614676608083018861381f565b61468360a083018761376e565b61469060c083018661448b565b61469d60e08301856144a6565b6146ab6101008301846143a2565b8181036101208301526146bd816145fd565b90509b9a5050505050505050505050565b5f60e0820190506146e15f83018b613694565b81810360208301526146f481898b61420f565b90506147036040830188613694565b614710606083018761376e565b61471d608083018661448b565b81810360a083015261472f8185613a99565b905081810360c083015261474381846143b1565b90509998505050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61478982613f89565b915061479483613f89565b9250826147a4576147a3614752565b5b828204905092915050565b5f6147b982613f89565b91506147c483613f89565b9250826147d4576147d3614752565b5b828206905092915050565b5f6147e982613f89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361481b5761481a613e3b565b5b600182019050919050565b5f61483082613f89565b915061483b83613f89565b925082820261484981613f89565b915082820484148315176148605761485f613e3b565b5b5092915050565b7f6279746573546f56617242797465733a206f6666736574206c657373207468615f8201527f6e206c656e677468206f6620626f647900000000000000000000000000000000602082015250565b5f6148c1603083613b45565b91506148cc82614867565b604082019050919050565b5f6020820190508181035f8301526148ee816148b5565b905091905056fea26469706673582212207c05296a8659ff74637206bace65290999f5531dea703199712c3cf4bdf0191564736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";

    private static final String PTC_BYTE_CODE = "608060405234801562000010575f80fd5b50604051620061b4380380620061b4833981016040819052620000339162001bc7565b6200003e336200005a565b6200004981620000a9565b6200005362000204565b5062001f9b565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f620000b582620002cd565b90505f81604001516003811115620000d157620000d162001c7a565b14620001245760405162461bcd60e51b815260206004820152601e60248201527f77726f6e67207479706520666f72206263646e7320726f6f742063657274000060448201526064015b60405180910390fd5b5f6200013a6200013483620004bb565b62000608565b805190602001209050826001604051806040016040528060048152602001631c9bdbdd60e21b81525060405162000172919062001c8e565b908152602001604051809103902090816200018e919062001d37565b50604051806040016040528060048152602001631c9bdbdd60e21b81525060025f8381526020019081526020015f209081620001cb919062001d37565b506040518181527f7c787bfbe942686b5f41acec151012ca79c6b81c1c5a23cee512781cf3d5b9bb9060200160405180910390a1505050565b5f54600160c81b900460ff16156200026f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b60648201526084016200011b565b5f5460ff600160c01b90910481161015620002cb575f805460ff60c01b191660ff60c01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b620002d762001a5b565b620002e162001a5b565b5f620002ed8462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000319576200031962001dff565b6020908102919091010151805190915061ffff166200033f57604081015184526200049c565b805161ffff165f19016200035d57604081015160208501526200049c565b805161ffff1660011901620003c65762000377816200090a565b60ff1660038111156200038e576200038e62001c7a565b84604001906003811115620003a757620003a762001c7a565b90816003811115620003bd57620003bd62001c7a565b9052506200049c565b805161ffff1660021901620003f657620003eb620003e5826040015190565b62000928565b60608501526200049c565b805161ffff16600319016200042457620004108162000a13565b6001600160401b031660808501526200049c565b805161ffff166004190162000452576200043e8162000a13565b6001600160401b031660a08501526200049c565b805161ffff16600519016200047157604081015160c08501526200049c565b805161ffff16600619016200049c576200049662000490826040015190565b62000a35565b60e08501525b5080620004a98162001e27565b915050620002f1565b50909392505050565b620004c562001ade565b5f82604001516003811115620004df57620004df62001c7a565b03620004ff5760c0820151620004f59062000b58565b6020015192915050565b6001826040015160038111156200051a576200051a62001c7a565b036200053a5760c0820151620005309062000c23565b6080015192915050565b60028260400151600381111562000555576200055562001c7a565b03620005755760c08201516200056b9062000d95565b6060015192915050565b60038260400151600381111562000590576200059062001c7a565b03620005b05760c0820151620005a69062000ee8565b6040015192915050565b60405162461bcd60e51b815260206004820152602660248201527f676574436572744f776e65724f69643a20636572742074797065206e6f7420736044820152651d5c1c1bdc9d60d21b60648201526084016200011b565b60408051600280825260608281019093525f9190816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081620006215790505090506200067f5f62000679855f0151600181111562000673576200067362001c7a565b62000fd2565b62000fe8565b815f8151811062000694576200069462001dff565b6020026020010181905250620006b6600184602001516200105460201b60201c565b81600181518110620006cc57620006cc62001dff565b6020026020010181905250620006f860405180604001604052805f61ffff168152602001606081525090565b602081018290526200070a8162001096565b949350505050565b604080518082019091525f8152606060208201526006825110156200077a5760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e67746800000000000000000060448201526064016200011b565b604080518082019091525f8082526060602083015290620007a6620007a08584620011d5565b620011fe565b61ffff168152620007b960068362001e42565b91505f825b85518110156200082057620007ea620007e487620007de84600262001e42565b620012a0565b620012cb565b620007f790600662001e58565b620008099063ffffffff168262001e42565b905081620008178162001e27565b925050620007be565b5f826001600160401b038111156200083c576200083c62001b8f565b6040519080825280602002602001820160405280156200088a57816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816200085b5790505b5090505f92505b8651851015620008fb5760408051606080820183525f808352602083015291810191909152620008c28887620013ca565b96509050808285620008d48162001e27565b965081518110620008e957620008e962001dff565b60200260200101819052505062000891565b60208401525090949350505050565b5f62000922600183604001516200153660201b60201c565b92915050565b6200093262001ade565b6200093c62001ade565b5f620009488462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000974576200097462001dff565b6020908102919091010151805190915061ffff16620009e45762000998816200090a565b60ff166001811115620009af57620009af62001c7a565b84906001811115620009c557620009c562001c7a565b90816001811115620009db57620009db62001c7a565b905250620009fd565b805161ffff165f1901620009fd57604081015160208501525b508062000a0a8162001e27565b9150506200094c565b5f6200092262000a2f600884604001516200153660201b60201c565b6200153b565b62000a616040518060800160405280606081526020016060815260200160608152602001606081525090565b62000a8d6040518060800160405280606081526020016060815260200160608152602001606081525090565b5f62000a998462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000ac55762000ac562001dff565b6020908102919091010151805190915061ffff1662000aeb576040810151845262000b42565b805161ffff165f190162000b09576040810151602085015262000b42565b805161ffff166001190162000b28576040810151604085015262000b42565b805161ffff166002190162000b4257604081015160608501525b508062000b4f8162001e27565b91505062000a9d565b62000b6262001af8565b62000b6c62001af8565b5f62000b788462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000ba45762000ba462001dff565b6020908102919091010151805190915061ffff1662000bca576040810151845262000c0d565b805161ffff165f190162000bf35762000be8620003e5826040015190565b602085015262000c0d565b805161ffff166001190162000c0d57604081015160408501525b508062000c1a8162001e27565b91505062000b7c565b62000c2d62001b14565b62000c3762001b14565b5f62000c438462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000c6f5762000c6f62001dff565b6020908102919091010151805190915061ffff1662000c95576040810151845262000d7f565b805161ffff165f190162000cfd5762000cae816200090a565b60ff16600181111562000cc55762000cc562001c7a565b8460200190600181111562000cde5762000cde62001c7a565b9081600181111562000cf45762000cf462001c7a565b90525062000d7f565b805161ffff166001190162000d1c576040810151604085015262000d7f565b805161ffff166002190162000d3b576040810151606085015262000d7f565b805161ffff166003190162000d655762000d5a620003e5826040015190565b608085015262000d7f565b805161ffff166004190162000d7f57604081015160a08501525b508062000d8c8162001e27565b91505062000c47565b62000d9f62001b45565b62000da962001b45565b5f62000db58462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000de15762000de162001dff565b6020908102919091010151805190915061ffff1662000e07576040810151845262000ed2565b805161ffff165f190162000e25576040810151602085015262000ed2565b805161ffff166001190162000e8e5762000e3f816200090a565b60ff16600281111562000e565762000e5662001c7a565b8460400190600281111562000e6f5762000e6f62001c7a565b9081600281111562000e855762000e8562001c7a565b90525062000ed2565b805161ffff166002190162000eb85762000ead620003e5826040015190565b606085015262000ed2565b805161ffff166003190162000ed257604081015160808501525b508062000edf8162001e27565b91505062000db9565b62000ef262001b6c565b62000efc62001b6c565b5f62000f088462000712565b90505f5b816020015151811015620004b2575f8260200151828151811062000f345762000f3462001dff565b6020908102919091010151805190915061ffff1662000f5a576040810151845262000fbc565b805161ffff165f190162000f78576040810151602085015262000fbc565b805161ffff166002190162000fa25762000f97620003e5826040015190565b604085015262000fbc565b805161ffff166003190162000fbc57604081015160608501525b508062000fc98162001e27565b91505062000f0c565b5f81600181111562000922576200092262001c7a565b60408051606080820183525f8083526020830181905282840191909152825160018082528185019094529192909190602082018180368337505081516001830186905282525090506040805160608101825261ffff959095168552600160208601528401525090919050565b60408051606080820183525f808352602083015291810191909152506040805160608101825261ffff939093168352815163ffffffff16602084015282015290565b60605f620010a48362001706565b90505f620010b482600662001e58565b63ffffffff166001600160401b03811115620010d457620010d462001b8f565b6040519080825280601f01601f191660200182016040528015620010ff576020820181803683370190505b5090506200112e60026200111c865f0151620011fe60201b60201c565b83909101600119810180519290915252565b6200115160066200113f84620012cb565b83909101600319810180519290915252565b60065f5b602086015151811015620011cb575f620011958760200151838151811062001181576200118162001dff565b60200260200101516200178360201b60201c565b9050620011a483828662001834565b8051620011b2908462001e42565b9250508080620011c29062001e27565b91505062001155565b5090949350505050565b81515f90620011e683600262001e42565b1115620011f1575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f8151811062001242576200124262001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160018151811062001274576200127462001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620011d5565b95945050505050565b81515f90620012b183600462001e42565b1115620012bc575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f815181106200130f576200130f62001dff565b60200101906001600160f81b03191690815f1a9053508160021a60f81b8160018151811062001342576200134262001dff565b60200101906001600160f81b03191690815f1a9053508160011a60f81b8160028151811062001375576200137562001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600381518110620013a757620013a762001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620012a0565b60408051606080820183525f8083526020830152918101919091525f82845111620014445760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b60648201526084016200011b565b6006831015620014885760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b60448201526064016200011b565b60408051606080820183525f808352602083015291810191909152620014b3620007a08686620011d5565b61ffff168152620014c660028562001e42565b9350620014d8620007e48686620012a0565b63ffffffff166020820152620014f060048562001e42565b93506200150f8585836020015163ffffffff166200191a60201b60201c565b604082015260208101516200152b9063ffffffff168562001e42565b909590945092505050565b015190565b6040805160088082528183019092525f9160c084901b9183916020820181803683370190505090508160071a60f81b815f815181106200157f576200157f62001dff565b60200101906001600160f81b03191690815f1a9053508160061a60f81b81600181518110620015b257620015b262001dff565b60200101906001600160f81b03191690815f1a9053508160051a60f81b81600281518110620015e557620015e562001dff565b60200101906001600160f81b03191690815f1a9053508160041a60f81b8160038151811062001618576200161862001dff565b60200101906001600160f81b03191690815f1a9053508160031a60f81b816004815181106200164b576200164b62001dff565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816005815181106200167e576200167e62001dff565b60200101906001600160f81b03191690815f1a9053508160011a60f81b81600681518110620016b157620016b162001dff565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600781518110620016e357620016e362001dff565b60200101906001600160f81b03191690815f1a9053505f620012978282620019a2565b5f80805b6020840151518110156200177c575f8460200151828151811062001732576200173262001dff565b6020026020010151905080604001515183600662001751919062001e58565b63ffffffff1662001763919062001e42565b9250508080620017739062001e27565b9150506200170a565b5092915050565b60605f8260200151600662001799919062001e58565b63ffffffff166001600160401b03811115620017b957620017b962001b8f565b6040519080825280601f01601f191660200182016040528015620017e4576020820181803683370190505b5090506200180160026200111c855f0151620011fe60201b60201c565b6200181c60066200113f8560200151620012cb60201b60201c565b6200092260068460400151836200183460201b60201c565b815181516200184a63ffffffff83168662001e42565b1115620018cb5760405162461bcd60e51b815260206004820152604260248201527f7661724279746573546f4279746573426967456e6469616e3a206f666673657460448201527f2069732067726561746572207468616e20746865206f7574707574206c656e676064820152610e8d60f31b608482015260a4016200011b565b80158062001913578483018051601f84168015602002818801018581018215602002838601015b818310156200190c578251815260209283019201620018f2565b5050509152505b5050505050565b82516060906200192b838562001e42565b111562001936575f80fd5b5f826001600160401b0381111562001952576200195262001b8f565b6040519080825280601f01601f1916602001820160405280156200197d576020820181803683370190505b5090506020808201908686010162001997828287620019d0565b509095945050505050565b81515f90620019b383600862001e42565b1115620019be575f80fd5b5001600801516001600160401b031690565b6020811062001a105781518352620019ea60208462001e42565b9250620019f960208362001e42565b915062001a0860208262001e78565b9050620019d0565b805f0362001a1d57505050565b5f600162001a2d83602062001e78565b62001a3b9061010062001f87565b62001a47919062001e78565b925184518416931916929092179092525050565b6040805161010081018252606080825260208201529081015f815260200162001a8362001ade565b81526020015f6001600160401b031681526020015f6001600160401b031681526020016060815260200162001ad96040518060800160405280606081526020016060815260200160608152602001606081525090565b905290565b60408051808201909152805f5b8152602001606081525090565b60405180606001604052806060815260200162001aeb62001ade565b6040805160c0810190915260608152602081015f8152602001606081526020016060815260200162001aeb62001ade565b6040805160a081018252606080825260208201529081015f815260200162001aeb62001ade565b6040518060800160405280606081526020016060815260200162001aeb62001ade565b634e487b7160e01b5f52604160045260245ffd5b5f5b8381101562001bbf57818101518382015260200162001ba5565b50505f910152565b5f6020828403121562001bd8575f80fd5b81516001600160401b038082111562001bef575f80fd5b818401915084601f83011262001c03575f80fd5b81518181111562001c185762001c1862001b8f565b604051601f8201601f19908116603f0116810190838211818310171562001c435762001c4362001b8f565b8160405282815287602084870101111562001c5c575f80fd5b62001c6f83602083016020880162001ba3565b979650505050505050565b634e487b7160e01b5f52602160045260245ffd5b5f825162001ca181846020870162001ba3565b9190910192915050565b600181811c9082168062001cc057607f821691505b60208210810362001cdf57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562001d32575f81815260208120601f850160051c8101602086101562001d0d5750805b601f850160051c820191505b8181101562001d2e5782815560010162001d19565b5050505b505050565b81516001600160401b0381111562001d535762001d5362001b8f565b62001d6b8162001d64845462001cab565b8462001ce5565b602080601f83116001811462001da1575f841562001d895750858301515b5f19600386901b1c1916600185901b17855562001d2e565b5f85815260208120601f198616915b8281101562001dd15788860151825594840194600190910190840162001db0565b508582101562001def57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820162001e3b5762001e3b62001e13565b5060010190565b8082018082111562000922576200092262001e13565b63ffffffff8181168382160190808211156200177c576200177c62001e13565b8181038181111562000922576200092262001e13565b600181815b8085111562001ece57815f190482111562001eb25762001eb262001e13565b8085161562001ec057918102915b93841c939080029062001e93565b509250929050565b5f8262001ee65750600162000922565b8162001ef457505f62000922565b816001811462001f0d576002811462001f185762001f38565b600191505062000922565b60ff84111562001f2c5762001f2c62001e13565b50506001821b62000922565b5060208310610133831016604e8410600b841016171562001f5d575081810a62000922565b62001f69838362001e8e565b805f190482111562001f7f5762001f7f62001e13565b029392505050565b5f62001f94838362001ed6565b9392505050565b61420b8062001fa95f395ff3fe608060405234801561000f575f80fd5b5060043610610153575f3560e01c8063a1d6c964116100bf578063d919581711610079578063d91958171461031d578063dde1854614610330578063e1ceb03014610343578063f08c69a114610356578063f2fde38b1461035e578063fe8cc1e314610371575f80fd5b8063a1d6c9641461028f578063ad86bc03146102a2578063adc64a18146102cf578063adf22b3f146102e2578063bf812b2c146102f7578063c3292b6d1461030a575f80fd5b8063715018a611610110578063715018a6146101fe57806373d6c7bd146102065780637adcff0c146102195780638da5cb5b1461025957806390157ffb1461026957806395e8fcee1461027c575f80fd5b806304802a34146101575780630604420e1461016c57806309158b211461019557806312dabd3a146101b55780634ddf47d4146101d857806355c265fe146101eb575b5f80fd5b61016a610165366004613a6c565b610384565b005b61017f61017a366004613a6c565b6104c7565b60405161018c9190613af7565b60405180910390f35b6101a86101a3366004613b09565b610583565b60405161018c9190613b54565b6101c86101c3366004613b62565b6105b4565b604051901515815260200161018c565b61016a6101e6366004613c42565b61060d565b61016a6101f9366004613a6c565b610744565b61016a6108b2565b6101c8610214366004613a6c565b6108c5565b610241610227366004613c92565b60056020525f90815260409020546001600160c01b031681565b6040516001600160c01b03909116815260200161018c565b5f546001600160c01b0316610241565b61017f610277366004613b09565b610907565b61016a61028a366004613a6c565b61099e565b61016a61029d366004613c92565b610bbb565b6102c16102b0366004613b09565b60046020525f908152604090205481565b60405190815260200161018c565b61017f6102dd366004613b09565b610e0c565b6102ea610ea7565b60405161018c9190613cad565b61016a610305366004613cf7565b610f2c565b6101c8610318366004613d1d565b61110c565b61017f61032b366004613b62565b611153565b61017f61033e366004613d1d565b611225565b61017f610351366004613c42565b61126c565b61017f611290565b61016a61036c366004613cf7565b61134f565b61017f61037f366004613a6c565b6113c8565b61038c61149b565b5f6103cb83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506114f492505050565b90505f6103db8260800151611694565b80516020918201205f818152600483526040902091840151825491935063ffffffff16111561044d5760208381015163ffffffff1680835560408051858152928301919091527f14f6dcf24001d9e8910255539bf10f0a01ba6fcb712bdcd812fe528b9ad798d1910160405180910390a15b60208084015163ffffffff165f9081526001830190915260409020610473858783613de6565b507f8796377aabd0d7feac50b0be12f810cac9a467a6ccd01c3bb79e50e2da8fd1f28284602001516040516104b892919091825263ffffffff16602082015260400190565b60405180910390a15050505050565b606060035f84846040516104dc929190613ea0565b604051809103902081526020019081526020015f205f0180546104fe90613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90613d64565b80156105755780601f1061054c57610100808354040283529160200191610575565b820191905f5260205f20905b81548152906001019060200180831161055857829003601f168201915b505050505090505b92915050565b60068181548110610592575f80fd5b905f5260205f209060209182820401919006915054906101000a900460ff1681565b5f8060045f86866040516105c9929190613ea0565b604051809103902081526020019081526020015f206001015f8463ffffffff1681526020019081526020015f20805461060190613d64565b90501190509392505050565b5f54600160c81b900460ff161580801561063357505f546001600160c01b90910460ff16105b806106535750303b15801561065357505f54600160c01b900460ff166001145b6106bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b5f805460ff60c01b1916600160c01b17905580156106e6575f805460ff60c81b1916600160c81b1790555b6106ef8261192c565b6106f833611a72565b8015610740575f805460ff60c81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b5f61078383838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611ac192505050565b90505f6107938260200151611694565b80516020808301919091205f9081526004825260408082208682015163ffffffff168352600101909252908120805492935090916107d090613d64565b9050116108135760405162461bcd60e51b815260206004820152601160248201527009dd1c189d1849c81b9bdd08199bdd5b99607a1b60448201526064016106b2565b5f61082882846040015163ffffffff16611bb5565b60808101516040519192506001917f4d2d7be42668dce2927650393613e408fc71274deac16f825eb0a869a5667e8c91610863918490613eaf565b60405180910390a1806108aa5760405162461bcd60e51b815260206004820152600f60248201526e766572696679206e6f74207061737360881b60448201526064016106b2565b505050505050565b6108ba61149b565b6108c35f611a72565b565b5f8060035f85856040516108da929190613ea0565b604051809103902081526020019081526020015f205f0180546108fc90613d64565b905011905092915050565b60026020525f90815260409020805461091f90613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461094b90613d64565b80156109965780601f1061096d57610100808354040283529160200191610996565b820191905f5260205f20905b81548152906001019060200180831161097957829003601f168201915b505050505081565b6109a661149b565b5f6109e583838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611c7792505050565b90505f6109f182611dac565b5f8181526003602052604081208054929350918290610a0f90613d64565b90501115610aec5780610a23858783613de6565b505b606083015160208101515190511015610ae7575f610a468460600151611dcb565b5f8181526001840160205260409020805491925090610a6490613d64565b90505f03610ad257610a798460600151611ddd565b5f828152600184016020526040902090610a939082613f1c565b5060408051848152602081018390527f176999d0f8f8c628a9ada0c1090671dffa60ab4b6720f3d647a823aac2368fce910160405180910390a1610ae1565b610adf8460600151611ddd565b505b50610a25565b610bb4565b80610af8858783613de6565b505b606083015160208101515190511015610b84575f610b1b8460600151611dcb565b9050610b2a8460600151611ddd565b5f828152600184016020526040902090610b449082613f1c565b5060408051848152602081018390527f176999d0f8f8c628a9ada0c1090671dffa60ab4b6720f3d647a823aac2368fce910160405180910390a150610afa565b6040518281527fc115cf6e41eccaaf9dbe48f3cbf3e82c176644e35bf1cae0839627723d980a0d906020016104b8565b5050505050565b610bc361149b565b5f600581836002811115610bd957610bd9613b20565b6002811115610bea57610bea613b20565b815260208101919091526040015f20546001600160c01b031603610c505760405162461bcd60e51b815260206004820152601760248201527f707463207665726966696572206e6f742065786973747300000000000000000060448201526064016106b2565b60015b600654811015610d8d57816002811115610c6f57610c6f613b20565b60068281548110610c8257610c82613fd7565b905f5260205f2090602091828204019190069054906101000a900460ff166002811115610cb157610cb1613b20565b03610d7b5760068054610cc690600190613fff565b81548110610cd657610cd6613fd7565b905f5260205f2090602091828204019190069054906101000a900460ff1660068281548110610d0757610d07613fd7565b905f5260205f2090602091828204019190066101000a81548160ff02191690836002811115610d3857610d38613b20565b02179055506006805480610d4e57610d4e614012565b600190038181905f5260205f2090602091828204019190066101000a81549060ff02191690559055610d8d565b80610d8581614026565b915050610c53565b5060055f826002811115610da357610da3613b20565b6002811115610db457610db4613b20565b8152602081019190915260409081015f2080546001600160c01b0319169055517f4ae9b990c01f3cf6322d2f72f0c0a7eefdcdb12b782e47f420dbc75314d7f50890610e01908390613b54565b60405180910390a150565b60036020525f9081526040902080548190610e2690613d64565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5290613d64565b8015610e9d5780601f10610e7457610100808354040283529160200191610e9d565b820191905f5260205f20905b815481529060010190602001808311610e8057829003601f168201915b5050505050905081565b60606006805480602002602001604051908101604052809291908181526020018280548015610f2257602002820191905f5260205f20905f905b82829054906101000a900460ff166002811115610f0057610f00613b20565b815260206001928301818104948501949093039092029101808411610ee15790505b5050505050905090565b610f3461149b565b5f816001600160c01b031663b93ba39c6040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610f72573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f96919061403e565b90505f600581836002811115610fae57610fae613b20565b6002811115610fbf57610fbf613b20565b815260208101919091526040015f20546001600160c01b0316146110255760405162461bcd60e51b815260206004820152601b60248201527f70746320766572696669657220616c726561647920657869737473000000000060448201526064016106b2565b600680546001810182555f919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f602082040180548392601f166101000a60ff8102199091169083600281111561108057611080613b20565b02179055508160055f83600281111561109b5761109b613b20565b60028111156110ac576110ac613b20565b81526020019081526020015f205f6101000a8154816001600160c01b0302191690836001600160c01b031602179055507e9d36884bab8205b3032d60f42239b9d5024f0acd6178f117374a9bbef092958183604051610737929190614059565b5f8060035f8686604051611121929190613ea0565b604051809103902081526020019081526020015f206001015f8481526020019081526020015f20805461060190613d64565b606060045f8585604051611168929190613ea0565b604051809103902081526020019081526020015f206001015f8363ffffffff1681526020019081526020015f2080546111a090613d64565b80601f01602080910402602001604051908101604052809291908181526020018280546111cc90613d64565b80156112175780601f106111ee57610100808354040283529160200191611217565b820191905f5260205f20905b8154815290600101906020018083116111fa57829003601f168201915b505050505090509392505050565b606060035f858560405161123a929190613ea0565b604051809103902081526020019081526020015f206001015f8381526020019081526020015f2080546111a090613d64565b80516020818301810180516001825292820191909301209152805461091f90613d64565b60606001604051806040016040528060048152602001631c9bdbdd60e21b8152506040516112be919061407f565b908152602001604051809103902080546112d790613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461130390613d64565b8015610f225780601f1061132557610100808354040283529160200191610f22565b820191905f5260205f20905b81548152906001019060200180831161133157509395945050505050565b61135761149b565b6001600160c01b0381166113bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b2565b6113c581611a72565b50565b60605f60045f85856040516113de929190613ea0565b604051809103902081526020019081526020015f209050806001015f825f015481526020019081526020015f20805461141690613d64565b80601f016020809104026020016040519081016040528092919081815260200182805461144290613d64565b801561148d5780601f106114645761010080835404028352916020019161148d565b820191905f5260205f20905b81548152906001019060200180831161147057829003601f168201915b505050505091505092915050565b5f546001600160c01b031633146108c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b2565b6114fc6137ee565b6115046137ee565b5f61150e84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061153657611536613fd7565b6020908102919091010151805190915061ffff166115645761155781612054565b63ffffffff168452611678565b805161ffff165f190161158a5761157a81612054565b63ffffffff166020850152611678565b805161ffff16600119016115a75760408101516040850152611678565b805161ffff16600219016115d2576115c86115c3826040015190565b612067565b6060850152611678565b805161ffff16600319016115fd576115f36115ee826040015190565b61219c565b6080850152611678565b805161ffff16600419016116245761161481612054565b63ffffffff1660a0850152611678565b805161ffff166005190161164157604081015160c0850152611678565b805161ffff166006190161165e57604081015160e0850152611678565b805161ffff1660fe19016116785760408101516101008501525b508061168381614026565b915050611512565b50909392505050565b602081015160609081901580156116ad57506040830151155b1561172e5760408051600180825281830190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816116c757905050905061170c5f611707855f0151612282565b6123ac565b815f8151811061171e5761171e613fd7565b60200260200101819052506118ff565b6020830151158015906117445750604083015115155b156118b7576040805160038082526080820190925290816020015b60408051606080820183525f80835260208301529181019190915281526020019060019003908161175f57905050905061179f5f611707855f0151612282565b815f815181106117b1576117b1613fd7565b60200260200101819052505f60206001600160401b038111156117d6576117d6613bbc565b6040519080825280601f01601f191660200182016040528015611800576020820181803683370190505b506020858101519082015290506118186001826123ac565b8260018151811061182b5761182b613fd7565b60200260200101819052505f60206001600160401b0381111561185057611850613bbc565b6040519080825280601f01601f19166020018201604052801561187a576020820181803683370190505b506040860151602082015290506118926002826123ac565b836002815181106118a5576118a5613fd7565b602002602001018190525050506118ff565b60405162461bcd60e51b815260206004820152601760248201527f696e76616c69642063726f7373636861696e206c616e6500000000000000000060448201526064016106b2565b604080518082019091525f8152606060208201525b60208101829052611924816123ee565b949350505050565b5f61193682612504565b90505f8160400151600381111561194f5761194f613b20565b1461199c5760405162461bcd60e51b815260206004820152601e60248201527f77726f6e67207479706520666f72206263646e7320726f6f742063657274000060448201526064016106b2565b5f6119ae6119a9836126b3565b6127e1565b805190602001209050826001604051806040016040528060048152602001631c9bdbdd60e21b8152506040516119e4919061407f565b908152602001604051809103902090816119fe9190613f1c565b50604051806040016040528060048152602001631c9bdbdd60e21b81525060025f8381526020019081526020015f209081611a399190613f1c565b506040518181527f7c787bfbe942686b5f41acec151012ca79c6b81c1c5a23cee512781cf3d5b9bb9060200160405180910390a1505050565b5f80546001600160c01b038381166001600160c01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611ac9613849565b611ad1613849565b5f611adb84611e80565b90505f5b81602001515181101561168b575f82602001518281518110611b0357611b03613fd7565b60200260200101519050600561ffff16815f015161ffff1603611b3a57611b33611b2e826040015190565b61288f565b8452611ba2565b805161ffff166101001901611b6157611b576115ee826040015190565b6020850152611ba2565b805161ffff1660ff1901611b8857611b7881612054565b63ffffffff166040850152611ba2565b805161ffff166101fe1901611ba257604081015160608501525b5080611bad81614026565b915050611adf565b611bbd6137ee565b82516020808501919091205f908152600482526040808220858352600101909252208054611c709190611bef90613d64565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1b90613d64565b8015611c665780601f10611c3d57610100808354040283529160200191611c66565b820191905f5260205f20905b815481529060010190602001808311611c4957829003601f168201915b50505050506114f4565b9392505050565b611c7f61387e565b611c8761387e565b5f611c9184611e80565b90505f5b81602001515181101561168b575f82602001518281518110611cb957611cb9613fd7565b6020908102919091010151805190915061ffff16611cdd5760408101518452611d99565b805161ffff165f1901611d0757611cfd611cf8826040015190565b612504565b6020850152611d99565b805161ffff1660011901611d245760408101516040850152611d99565b805161ffff1660021901611d63576040805180820182525f80825260606020928301528251808401845290815291830151908201526060850152611d99565b805161ffff1660031901611d805760408101516080850152611d99565b805161ffff1660041901611d9957604081015160a08501525b5080611da481614026565b915050611c95565b5f611dbd6119a983602001516126b3565b805190602001209050919050565b5f61057d611dd883611ddd565b612912565b6060816020015151825f015110611e4a5760405162461bcd60e51b815260206004820152602b60248201527f544c564974656d4d617056616c756553747265616d3a206f6666657374206f7560448201526a3a1037b310313ab33332b960a91b60648201526084016106b2565b5f611e5c835f0151846020015161296f565b8051845191925090611e6f90600461409a565b611e79919061409a565b9092525090565b604080518082019091525f815260606020820152600682511015611ee65760405162461bcd60e51b815260206004820152601760248201527f696c6c6567616c207261772064617461206c656e67746800000000000000000060448201526064016106b2565b604080518082019091525f8082526060602083015290611f0e611f098584612a02565b612a28565b61ffff168152611f1f60068361409a565b91505f825b8551811015611f7857611f49611f4487611f3f84600261409a565b612ac2565b612aea565b611f549060066140ad565b611f649063ffffffff168261409a565b905081611f7081614026565b925050611f24565b5f826001600160401b03811115611f9157611f91613bbc565b604051908082528060200260200182016040528015611fdd57816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081611faf5790505b5090505f92505b86518510156120455760408051606080820183525f8083526020830152918101919091526120128887612bdb565b9650905080828561202281614026565b96508151811061203457612034613fd7565b602002602001018190525050611fe4565b60208401525090949350505050565b5f61057d611f4460048460400151015190565b61206f6138d4565b6120776138d4565b5f61208184611e80565b90505f5b81602001515181101561168b575f826020015182815181106120a9576120a9613fd7565b6020908102919091010151805190915061ffff166120cd5760408101518452612189565b805161ffff165f19016120e95760408101516020850152612189565b805161ffff16600119016121455761210081612d33565b60ff16600281111561211457612114613b20565b8460400190600281111561212a5761212a613b20565b9081600281111561213d5761213d613b20565b905250612189565b805161ffff166002190161217057612166612161826040015190565b612d43565b6060850152612189565b805161ffff166003190161218957604081015160808501525b508061219481614026565b915050612085565b6121a4613906565b6121ac613906565b5f6121b684611e80565b90505f5b81602001515181101561168b575f826020015182815181106121de576121de613fd7565b6020908102919091010151805190915061ffff1661221057612209612204826040015190565b612e13565b845261226f565b805161ffff165f1901612241575f612229826040015190565b9050612236815182015190565b60208601525061226f565b805161ffff166001190161226f575f61225b826040015190565b9050612268815182015190565b6040860152505b508061227a81614026565b9150506121ba565b6060805f8360200151511115612324576040805160028082526060820190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816122a85790505090506122e55f845f01516123ac565b815f815181106122f7576122f7613fd7565b6020026020010181905250612311600184602001516123ac565b8160018151811061171e5761171e613fd7565b60408051600180825281830190925290816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816123395790505090506123765f845f01516123ac565b815f8151811061238857612388613fd7565b6020026020010181905250604080518082019091525f815260606020820152611914565b60408051606080820183525f808352602083015291810191909152506040805160608101825261ffff939093168352815163ffffffff16602084015282015290565b60605f6123fa83612ebc565b90505f6124088260066140ad565b63ffffffff166001600160401b0381111561242557612425613bbc565b6040519080825280601f01601f19166020018201604052801561244f576020820181803683370190505b5090506124746002612463865f0151612a28565b908301600119810180519290915252565b612493600661248284612aea565b908301600319810180519290915252565b60065f5b6020860151518110156124fa575f6124cb876020015183815181106124be576124be613fd7565b6020026020010151612f2e565b90506124d8838286612fbb565b80516124e4908461409a565b92505080806124f290614026565b915050612497565b5090949350505050565b61250c613934565b612514613934565b5f61251e84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061254657612546613fd7565b6020908102919091010151805190915061ffff1661256a57604081015184526126a0565b805161ffff165f190161258657604081015160208501526126a0565b805161ffff16600119016125e25761259d81612d33565b60ff1660038111156125b1576125b1613b20565b846040019060038111156125c7576125c7613b20565b908160038111156125da576125da613b20565b9052506126a0565b805161ffff1660021901612608576125fe612161826040015190565b60608501526126a0565b805161ffff16600319016126325761261f81613099565b6001600160401b031660808501526126a0565b805161ffff166004190161265c5761264981613099565b6001600160401b031660a08501526126a0565b805161ffff166005190161267957604081015160c08501526126a0565b805161ffff16600619016126a05761269a612695826040015190565b6130b1565b60e08501525b50806126ab81614026565b915050612522565b6126bb6139b4565b5f826040015160038111156126d2576126d2613b20565b036126ee576126e48260c001516131c2565b6020015192915050565b60018260400151600381111561270657612706613b20565b03612722576127188260c00151613279565b6080015192915050565b60028260400151600381111561273a5761273a613b20565b036127565761274c8260c00151612067565b6060015192915050565b60038260400151600381111561276e5761276e613b20565b0361278a576127808260c001516133c6565b6040015192915050565b60405162461bcd60e51b815260206004820152602660248201527f676574436572744f776e65724f69643a20636572742074797065206e6f7420736044820152651d5c1c1bdc9d60d21b60648201526084016106b2565b60408051600280825260608281019093525f9190816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816127fa5790505090506128505f61284b855f0151600181111561284657612846613b20565b61349a565b6134ad565b815f8151811061286257612862613fd7565b602002602001018190525061287c600184602001516123ac565b8160018151811061238857612388613fd7565b6040805160208101909152606081526040805160208101909152606081525f6128b784611e80565b90505f5b81602001515181101561168b575f826020015182815181106128df576128df613fd7565b6020908102919091010151805190915061ffff166128ff57604081015184525b508061290a81614026565b9150506128bb565b80515f9081816001600160401b0381111561292f5761292f613bbc565b6040519080825280601f01601f191660200182016040528015612959576020820181803683370190505b5084518152938201519190930151900392915050565b606061297c60048461409a565b92505f61298c611f448585015190565b63ffffffff1690506060811580156129af576040519150602082016040526129f9565b6040519150601f8316801560200281840101848101888315602002848a0101015b818310156129e85780518352602092830192016129d0565b5050848452601f01601f1916604052505b50949350505050565b81515f90612a1183600261409a565b1115612a1b575f80fd5b50016002015161ffff1690565b6040805160028082528183019092525f9160f084901b9183916020820181803683370190505090508160011a60f81b815f81518110612a6957612a69613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600181518110612a9857612a98613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f612a02565b95945050505050565b81515f90612ad183600461409a565b1115612adb575f80fd5b50016004015163ffffffff1690565b6040805160048082528183019092525f9160e084901b9183916020820181803683370190505090508160031a60f81b815f81518110612b2b57612b2b613fd7565b60200101906001600160f81b03191690815f1a9053508160021a60f81b81600181518110612b5b57612b5b613fd7565b60200101906001600160f81b03191690815f1a9053508160011a60f81b81600281518110612b8b57612b8b613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b81600381518110612bba57612bba613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f612ac2565b60408051606080820183525f8083526020830152918101919091525f82845111612c535760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b60648201526084016106b2565b6006831015612c955760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b60448201526064016106b2565b60408051606080820183525f808352602083015291810191909152612cbd611f098686612a02565b61ffff168152612cce60028561409a565b9350612cdd611f448686612ac2565b63ffffffff166020820152612cf360048561409a565b9350612d0a8585836020015163ffffffff16613517565b60408201526020810151612d249063ffffffff168561409a565b935091508290505b9250929050565b5f61057d60018360400151015190565b612d4b6139b4565b612d536139b4565b5f612d5d84611e80565b90505f5b81602001515181101561168b575f82602001518281518110612d8557612d85613fd7565b6020908102919091010151805190915061ffff16612de857612da681612d33565b60ff166001811115612dba57612dba613b20565b84906001811115612dcd57612dcd613b20565b90816001811115612de057612de0613b20565b905250612e00565b805161ffff165f1901612e0057604081015160208501525b5080612e0b81614026565b915050612d61565b604080518082019091526060808252602082015260408051808201909152606080825260208201525f612e4584611e80565b90505f5b81602001515181101561168b575f82602001518281518110612e6d57612e6d613fd7565b6020908102919091010151805190915061ffff16612e915760408101518452612ea9565b805161ffff165f1901612ea957604081015160208501525b5080612eb481614026565b915050612e49565b5f80805b602084015151811015612f27575f84602001518281518110612ee457612ee4613fd7565b60200260200101519050806040015151836006612f0191906140ad565b63ffffffff16612f11919061409a565b9250508080612f1f90614026565b915050612ec0565b5092915050565b60605f82602001516006612f4291906140ad565b63ffffffff166001600160401b03811115612f5f57612f5f613bbc565b6040519080825280601f01601f191660200182016040528015612f89576020820181803683370190505b509050612f9d6002612463855f0151612a28565b612faf60066124828560200151612aea565b61057d60068460400151835b81518151612fcf63ffffffff83168661409a565b111561304e5760405162461bcd60e51b815260206004820152604260248201527f7661724279746573546f4279746573426967456e6469616e3a206f666673657460448201527f2069732067726561746572207468616e20746865206f7574707574206c656e676064820152610e8d60f31b608482015260a4016106b2565b801580610bb4578483018051601f84168015602002818801018581018215602002838601015b8183101561308c578251815260209283019201613074565b5050509152505050505050565b5f61057d6130ac60088460400151015190565b613596565b6130dc6040518060800160405280606081526020016060815260200160608152602001606081525090565b6131076040518060800160405280606081526020016060815260200160608152602001606081525090565b5f61311184611e80565b90505f5b81602001515181101561168b575f8260200151828151811061313957613139613fd7565b6020908102919091010151805190915061ffff1661315d57604081015184526131af565b805161ffff165f190161317957604081015160208501526131af565b805161ffff166001190161319657604081015160408501526131af565b805161ffff16600219016131af57604081015160608501525b50806131ba81614026565b915050613115565b6131ca6139c5565b6131d26139c5565b5f6131dc84611e80565b90505f5b81602001515181101561168b575f8260200151828151811061320457613204613fd7565b6020908102919091010151805190915061ffff166132285760408101518452613266565b805161ffff165f190161324d57613243612161826040015190565b6020850152613266565b805161ffff166001190161326657604081015160408501525b508061327181614026565b9150506131e0565b6132816139df565b6132896139df565b5f61329384611e80565b90505f5b81602001515181101561168b575f826020015182815181106132bb576132bb613fd7565b6020908102919091010151805190915061ffff166132df57604081015184526133b3565b805161ffff165f190161333a576132f581612d33565b60ff16600181111561330957613309613b20565b8460200190600181111561331f5761331f613b20565b9081600181111561333257613332613b20565b9052506133b3565b805161ffff166001190161335757604081015160408501526133b3565b805161ffff166002190161337457604081015160608501526133b3565b805161ffff166003190161339a57613390612161826040015190565b60808501526133b3565b805161ffff16600419016133b357604081015160a08501525b50806133be81614026565b915050613297565b6133ce613a0e565b6133d6613a0e565b5f6133e084611e80565b90505f5b81602001515181101561168b575f8260200151828151811061340857613408613fd7565b6020908102919091010151805190915061ffff1661342c5760408101518452613487565b805161ffff165f19016134485760408101516020850152613487565b805161ffff166002190161346e57613464612161826040015190565b6040850152613487565b805161ffff166003190161348757604081015160608501525b508061349281614026565b9150506133e4565b5f81600181111561057d5761057d613b20565b60408051606080820183525f8083526020830152918101919091526040805160018082528183019092525f9160208201818036833701905050805160018201859052815290506040805160608101825261ffff959095168552600160208601528401525090919050565b8251606090613526838561409a565b1115613530575f80fd5b5f826001600160401b0381111561354957613549613bbc565b6040519080825280601f01601f191660200182016040528015613573576020820181803683370190505b5090506020808201908686010161358b828287613747565b509095945050505050565b6040805160088082528183019092525f9160c084901b9183916020820181803683370190505090508160071a60f81b815f815181106135d7576135d7613fd7565b60200101906001600160f81b03191690815f1a9053508160061a60f81b8160018151811061360757613607613fd7565b60200101906001600160f81b03191690815f1a9053508160051a60f81b8160028151811061363757613637613fd7565b60200101906001600160f81b03191690815f1a9053508160041a60f81b8160038151811061366757613667613fd7565b60200101906001600160f81b03191690815f1a9053508160031a60f81b8160048151811061369757613697613fd7565b60200101906001600160f81b03191690815f1a9053508160021a60f81b816005815181106136c7576136c7613fd7565b60200101906001600160f81b03191690815f1a9053508160011a60f81b816006815181106136f7576136f7613fd7565b60200101906001600160f81b03191690815f1a905350815f1a60f81b8160078151811061372657613726613fd7565b60200101906001600160f81b03191690815f1a9053505f612ab9825f6137c3565b6020811061377f578151835261375e60208461409a565b925061376b60208361409a565b9150613778602082613fff565b9050613747565b805f0361378b57505050565b5f6001613799836020613fff565b6137a5906101006141aa565b6137af9190613fff565b925184518416931916929092179092525050565b81515f906137d283600861409a565b11156137dc575f80fd5b5001600801516001600160401b031690565b60408051610120810182525f808252602082015260609181018290529081016138156138d4565b8152602001613822613906565b81526020015f63ffffffff1681526020016060815260200160608152602001606081525090565b6040805160a0810190915260606080820190815281526020810161386b613906565b81525f6020820152606060409091015290565b6040518060c0016040528060608152602001613898613934565b8152602001606081526020016138c060405180604001604052805f8152602001606081525090565b815260200160608152602001606081525090565b6040805160a081018252606080825260208201529081015f81526020016138f96139b4565b8152602001606081525090565b6040805160a0810182526060808201818152608083019190915281525f602082018190529181019190915290565b6040805161010081018252606080825260208201529081015f815260200161395a6139b4565b81526020015f6001600160401b031681526020015f6001600160401b03168152602001606081526020016139af6040518060800160405280606081526020016060815260200160608152602001606081525090565b905290565b60408051808201909152805f6138f9565b6040518060600160405280606081526020016138f96139b4565b6040805160c0810190915260608152602081015f815260200160608152602001606081526020016138f96139b4565b604051806080016040528060608152602001606081526020016138f96139b4565b5f8083601f840112613a3f575f80fd5b5081356001600160401b03811115613a55575f80fd5b602083019150836020828501011115612d2c575f80fd5b5f8060208385031215613a7d575f80fd5b82356001600160401b03811115613a92575f80fd5b613a9e85828601613a2f565b90969095509350505050565b5f5b83811015613ac4578181015183820152602001613aac565b50505f910152565b5f8151808452613ae3816020860160208601613aaa565b601f01601f19169290920160200192915050565b602081525f611c706020830184613acc565b5f60208284031215613b19575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b60038110613b5057634e487b7160e01b5f52602160045260245ffd5b9052565b6020810161057d8284613b34565b5f805f60408486031215613b74575f80fd5b83356001600160401b03811115613b89575f80fd5b613b9586828701613a2f565b909450925050602084013563ffffffff81168114613bb1575f80fd5b809150509250925092565b634e487b7160e01b5f52604160045260245ffd5b5f6001600160401b0380841115613be957613be9613bbc565b604051601f8501601f19908116603f01168101908282118183101715613c1157613c11613bbc565b81604052809350858152868686011115613c29575f80fd5b858560208301375f602087830101525050509392505050565b5f60208284031215613c52575f80fd5b81356001600160401b03811115613c67575f80fd5b8201601f81018413613c77575f80fd5b61192484823560208401613bd0565b600381106113c5575f80fd5b5f60208284031215613ca2575f80fd5b8135611c7081613c86565b602080825282518282018190525f9190848201906040850190845b81811015613ceb57613cdb838551613b34565b9284019291840191600101613cc8565b50909695505050505050565b5f60208284031215613d07575f80fd5b81356001600160c01b0381168114611c70575f80fd5b5f805f60408486031215613d2f575f80fd5b83356001600160401b03811115613d44575f80fd5b613d5086828701613a2f565b909790965060209590950135949350505050565b600181811c90821680613d7857607f821691505b602082108103613d9657634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115613de1575f81815260208120601f850160051c81016020861015613dc25750805b601f850160051c820191505b818110156108aa57828155600101613dce565b505050565b6001600160401b03831115613dfd57613dfd613bbc565b613e1183613e0b8354613d64565b83613d9c565b5f601f841160018114613e42575f8515613e2b5750838201355b5f19600387901b1c1916600186901b178355610bb4565b5f83815260209020601f19861690835b82811015613e725786850135825560209485019460019092019101613e52565b5086821015613e8e575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818382375f9101908152919050565b604081525f8351606060408401528051604060a0850152613ed360e0850182613acc565b905060208201519150609f198482030160c0850152613ef28183613acc565b91505060208501516060840152604085015160808401528091505082151560208301529392505050565b81516001600160401b03811115613f3557613f35613bbc565b613f4981613f438454613d64565b84613d9c565b602080601f831160018114613f7c575f8415613f655750858301515b5f19600386901b1c1916600185901b1785556108aa565b5f85815260208120601f198616915b82811015613faa57888601518255948401946001909101908401613f8b565b5085821015613fc757878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181038181111561057d5761057d613feb565b634e487b7160e01b5f52603160045260245ffd5b5f6001820161403757614037613feb565b5060010190565b5f6020828403121561404e575f80fd5b8151611c7081613c86565b604081016140678285613b34565b6001600160c01b039290921660209190910152919050565b5f8251614090818460208701613aaa565b9190910192915050565b8082018082111561057d5761057d613feb565b63ffffffff818116838216019080821115612f2757612f27613feb565b600181815b8085111561410457815f19048211156140ea576140ea613feb565b808516156140f757918102915b93841c93908002906140cf565b509250929050565b5f8261411a5750600161057d565b8161412657505f61057d565b816001811461413c576002811461414657614162565b600191505061057d565b60ff84111561415757614157613feb565b50506001821b61057d565b5060208310610133831016604e8410600b8410161715614185575081810a61057d565b61418f83836140ca565b805f19048211156141a2576141a2613feb565b029392505050565b5f611c70838361410c56fea264697066735822122039c95a91d68381c80f2ab5db07c284d283b59ac4acf1d487784b54be12f040e264736f6c637822302e382e32312d63692e323032342e332e312b636f6d6d69742e31383065353661320053";
    @Override
    public void startup(AbstractBBCContext context) {
        getBBCLogger().info("Bif BBCService startup with context: {}", new String(context.getConfForBlockchainClient()));

        if (ObjectUtil.isNull(context)) {
            throw new RuntimeException("null bbc context");
        }
        if (ObjectUtil.isEmpty(context.getConfForBlockchainClient())) {
            throw new RuntimeException("empty blockchain client conf");
        }

        // 1. Obtain the configuration information
        try {
            config = BifchainConfig.fromJsonString(new String(context.getConfForBlockchainClient()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        if(StrUtil.isEmpty(config.getPrivateKey())){
            throw new RuntimeException("private key is empty");
        }

        try {
            PrivateKeyManager privateKeyManager = new PrivateKeyManager(config.getPrivateKey());
            this.config.setAddress(privateKeyManager.getEncAddress());
        } catch (EncException e) {
            throw new RuntimeException(e);
        }

        if (StrUtil.isEmpty(config.getUrl())) {
            throw new RuntimeException("url is empty");
        }

        // 2. Connect to the bif network
        this.sdk = BIFSDK.getInstance(config.getUrl());
        try {
            BIFBlockGetNumberInfoRequest request = new BIFBlockGetNumberInfoRequest();
            BIFBlockGetNumberResponse response = sdk.getBIFBlockService().getBlockNumber(request);
            if (response.getErrorCode() != 0) {
                throw new RuntimeException(String.format("failed to connect bif (url: %s)", config.getUrl()));
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format("failed to connect bif (url: %s)", config.getUrl()), e);
        }

        this.bbcContext = context;
        if (ObjectUtil.isNull(context.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.config.getAmContractAddressDeployed())) {
            AuthMessageContract authMessageContract = new AuthMessageContract();
            authMessageContract.setContractAddress(this.config.getAmContractAddressDeployed());
            authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setAuthMessageContract(authMessageContract);
        }

        if (ObjectUtil.isNull(context.getSdpContract())
                && StrUtil.isNotEmpty(this.config.getSdpContractAddressDeployed())) {
            SDPContract sdpContract = new SDPContract();
            sdpContract.setContractAddress(this.config.getSdpContractAddressDeployed());
            sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setSdpContract(sdpContract);
        }

        if (ObjectUtil.isNull(context.getPtcContract())
                && StrUtil.isNotEmpty(this.config.getPtcContractAddressDeployed())) {
            PTCContract ptcContract = new PTCContract();
            ptcContract.setContractAddress(this.config.getPtcContractAddressDeployed());
            ptcContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setPtcContract(ptcContract);
        }
    }

    @Override
    public void shutdown() {
        getBBCLogger().info("shut down bif BBCService!");
    }

    @Override
    public AbstractBBCContext getContext() {
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }

        getBBCLogger().debug("BIF BBCService context (amAddress: {}, amStatus: {}, sdpAddress: {}, sdpStatus: {}), ptcAddress: {}, ptcStatus: {})",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getContractAddress() : "",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getStatus() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getContractAddress() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getStatus() : "",
                this.bbcContext.getPtcContract() != null ? this.bbcContext.getPtcContract().getContractAddress() : "",
                this.bbcContext.getPtcContract() != null ? this.bbcContext.getPtcContract().getStatus() : ""
        );
        return this.bbcContext;
    }

    private Boolean queryTxResult(String txHash) {
        BIFTransactionGetInfoRequest bifTransactionGetInfoRequest =new BIFTransactionGetInfoRequest();
        bifTransactionGetInfoRequest.setHash(txHash);
        BIFTransactionGetInfoResponse bifTransactionGetInfoResponse;
        while (true) {
            try {
                bifTransactionGetInfoResponse = sdk.getBIFTransactionService().getTransactionInfo(bifTransactionGetInfoRequest);
                if (ObjectUtil.isNotNull(bifTransactionGetInfoResponse.getResult()) && bifTransactionGetInfoResponse.getResult().getTransactions().length > 0) {
                    break;
                }
                Thread.sleep(1000L);
            } catch (Throwable e) {
                throw new RuntimeException("failed to query tx", e);
            }
        }
        return bifTransactionGetInfoResponse.getResult().getTransactions()[0].getErrorCode() == 0;
    }

    private BIFContractCreateRequest createBIFContractCreateRequest(String contractByteCode) {
        BIFContractCreateRequest request = new BIFContractCreateRequest();
        request.setSenderAddress(this.config.getAddress());
        request.setPrivateKey(this.config.getPrivateKey());
        request.setInitBalance(0L);
        request.setPayload(contractByteCode);
        request.setRemarks("create contract");
        request.setType(1);
        request.setFeeLimit(this.config.getGasLimit());
        request.setGasPrice(this.config.getGasPrice());
        return request;
    }

    private BIFContractInvokeRequest createBIFContractInvokeRequest(String contractAddress, String invokeInput) {
        BIFContractInvokeRequest request = new BIFContractInvokeRequest();
        request.setSenderAddress(this.config.getAddress());
        request.setPrivateKey(this.config.getPrivateKey());
        request.setContractAddress(contractAddress);
        request.setBIFAmount(this.config.getAmount());
        request.setRemarks("contract invoke");
        request.setInput(invokeInput);
        request.setFeeLimit(this.config.getGasLimit());
        request.setGasPrice(this.config.getGasPrice());
        return request;
    }

    @Override
    public void setupAuthMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.bbcContext.getAuthMessageContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            BIFContractCreateRequest request = createBIFContractCreateRequest(AUTH_BYTE_CODE);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy Auth contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy Auth contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                AuthMessageContract authMessageContract = new AuthMessageContract();
                authMessageContract.setContractAddress(address);
                authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setAuthMessageContract(authMessageContract);
                getBBCLogger().info("setup Auth contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get Auth contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get Auth contract address", e);
        }
    }

    @Override
    public void setupSDPMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getSdpContract())
                && StrUtil.isNotEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            BIFContractCreateRequest request = createBIFContractCreateRequest(SDP_BYTE_CODE);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy sdp contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy sdp contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                SDPContract sdpContract = new SDPContract();
                sdpContract.setContractAddress(address);
                sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setSdpContract(sdpContract);
                getBBCLogger().info("setup sdp contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get sdp contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get sdp contract address", e);
        }
    }

    @Override
    public void setupPTCContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getPtcContract())
                && StrUtil.isNotEmpty(this.bbcContext.getPtcContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        String txHash;
        try {
            //todo:check input root cert
            String initInput = StrUtil.format("{\"function\":\"constructor(bytes)\",\"args\":\"'{}'\"}", this.config.getPtcContractInitInput());
            BIFContractCreateRequest request = createBIFContractCreateRequest(PTC_BYTE_CODE);
            request.setInitInput(initInput);
            BIFContractCreateResponse response = sdk.getBIFContractService().contractCreate(request);
            if (response.getErrorCode() == 0) {
                txHash = response.getResult().getHash();
                boolean result = queryTxResult(txHash);
                if (!result) {
                    throw new RuntimeException("transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to deploy ptc contract");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy ptc contract", e);
        }

        // 3. get contract address and set contract to context
        String address;
        try {
            BIFContractGetAddressRequest request = new BIFContractGetAddressRequest();
            request.setHash(txHash);

            BIFContractGetAddressResponse response = sdk.getBIFContractService().getContractAddress(request);
            if (response.getErrorCode() == 0) {
                address = response.getResult().getContractAddressInfos().get(0).getContractAddress();
                PTCContract ptcContract = new PTCContract();
                ptcContract.setContractAddress(address);
                ptcContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
                bbcContext.setPtcContract(ptcContract);
                getBBCLogger().info("setup ptc contract successful: {}", address);
            } else {
                throw new RuntimeException("failed to get ptc contract address");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get ptc contract address", e);
        }
    }

    @Override
    public ConsensusState readConsensusState(BigInteger height) {
        ConsensusState consensusState = new ConsensusState();
        consensusState.setCsVersion(this.getConfig().getCsVersion());
        consensusState.setDomain(new CrossChainDomain(this.getConfig().getDomainName()));
        consensusState.setHeight(height);
        try {
            BIFBlockGetInfoRequest request = new BIFBlockGetInfoRequest();
            request.setBlockNumber(height.longValue());

            BIFBlockGetInfoResponse response = sdk.getBIFBlockService().getBlockInfo(request);
            if (response.getErrorCode() == 0) {
                consensusState.setHash(HexUtil.decodeHex(response.getResult().getHeader().getHash()));
                consensusState.setParentHash(HexUtil.decodeHex(response.getResult().getHeader().getPreviousHash()));
                consensusState.setStateTimestamp(response.getResult().getHeader().getConfirmTime());
                consensusState.setStateData(HexUtil.decodeHex(response.getResult().getHeader().getConsensusValueHash()));
            } else {
                throw new RuntimeException("failed to get block info");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get block info", e);
        }

        try {
            BIFBlockGetValidatorsRequest request = new BIFBlockGetValidatorsRequest();
            request.setBlockNumber(height.longValue());
            BIFBlockGetValidatorsResponse response = sdk.getBIFBlockService().getValidators(request);
            if (response.getErrorCode() == 0) {
                String[] validators = response.getResult().getValidators();
                String joinedString = String.join(",", validators);
                consensusState.setConsensusNodeInfo(joinedString.getBytes());
            } else {
                throw new RuntimeException("failed to get validator info");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get validator info", e);
        }

        try {
            String urlStr = this.config.getUrl() + "/getLedger?with_consvalue=true&seq=" + height.toString();
            Request request = new Request.Builder()
                    .url(urlStr)
                    .build();

            Response response = client.newCall(request).execute();
            String jsonString = response.body().string();
            JsonObject jsonObject = JsonParser.parseString(jsonString).getAsJsonObject();
            if (jsonObject.get("error_code").getAsInt() == 0) {
                JsonObject consensusHeader = jsonObject.getAsJsonObject("result").getAsJsonObject("consensus_value").getAsJsonObject("consensus_header");
                String previousProof = consensusHeader.get("previous_proof").getAsString();
                consensusState.setEndorsements(HexUtil.decodeHex(previousProof));
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to get consensus value", e);
        }
        return consensusState;
    }

    @Override
    public long querySDPMessageSeq(String senderDomain, String senderID, String receiverDomain, String receiverID) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. query sequence
        long seq;
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"querySDPMessageSeq(string,bytes32,string,bytes32)\",\"args\":\"'{}','{}','{}','{}'\"}", senderDomain, senderID.getBytes(), receiverDomain, receiverID.getBytes());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }
                seq = Long.parseLong(res);
                getBBCLogger().info("sdpMsg seq: {} (senderDomain: {}, senderID: {}, receiverDomain: {}, receiverID: {})",
                        seq,
                        senderDomain,
                        senderID,
                        receiverDomain,
                        receiverID
                );
            } else {
                throw new RuntimeException("failed to query sdpMsg seq");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query sdpMsg seq (senderDomain: %s, senderID: %s, receiverDomain: %s, receiverID: %s)",
                    senderDomain,
                    senderID,
                    receiverDomain,
                    receiverID
            ), e);
        }

        return seq;
    }

    @Override
    public void setProtocol(String protocolAddress, String protocolType) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty auth contract in bbc context");
        }

        // 3. set protocol to auth
        try {
            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setProtocol(address,uint32)\",\"args\":\"{},{}\"}", protocolAddress, BigInteger.valueOf(Long.parseLong(protocolType)));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getAuthMessageContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set protocol (address: {}, type: {}) to auth {} by tx {} ",
                            protocolAddress, protocolType,
                            contractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set protocol, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set protocol, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set protocol (address: %s, type: %s) to AM %s",
                            protocolAddress, protocolType, this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setPtcContract(String ptcContractAddress) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }

        // 3. set ptc to am
        try {
            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setPtcContract(address)\",\"args\":\"{}\"}", ptcContractAddress);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getAuthMessageContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set ptc contract (address: {}) to AM {} by tx {}",
                            contractAddress,
                            ptcContractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set ptc contract, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set ptc contract, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set ptc contract (address: %s) to AM %s",
                            ptcContractAddress,
                            this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setAmContract(String amContractAddress) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())){
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 3. set protocol to sdp
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setAmContract(address)\",\"args\":\"{}\"}", amContractAddress);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set am contract (address: {}) to SDP {} by tx {}",
                            contractAddress,
                            amContractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("failed to set protocol, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set protocol, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set auth contract (address: %s) to SDP %s",
                            amContractAddress,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setLocalDomain(String domain) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (StrUtil.isEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            throw new RuntimeException("none sdp contract address");
        }

        // 3. set domain to sdp
        try {
            String contractAddress = this.bbcContext.getSdpContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"setLocalDomain(string)\",\"args\":\"'{}'\"}", domain);
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
                    getBBCLogger().info(
                            "set domain ({}) to SDP {} by tx {}",
                            domain,
                            contractAddress,
                            response.getResult().getHash()
                    );
                } else {
                    throw new RuntimeException("transaction executing failed, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to set domain, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set domain (%s) to SDP %s",
                            domain,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public Long queryLatestHeight() {
        Long l;
        try {
            BIFBlockGetNumberInfoRequest request = new BIFBlockGetNumberInfoRequest();
            BIFBlockGetNumberResponse response = sdk.getBIFBlockService().getBlockNumber(request);
            l = response.getResult().getHeader().getBlockNumber();
            getBBCLogger().debug("latest height: {}", l);
        } catch (Exception e) {
            throw new RuntimeException("failed to query latest height", e);
        }
        return l;
    }

    @Override
    public CrossChainMessageReceipt readCrossChainMessageReceipt(String txHash) {
        CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
        try {

            BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
            request.setHash(txHash);
            BIFTransactionGetInfoResponse response = sdk.getBIFTransactionService().getTransactionInfo(request);
            if (response.getResult().getTransactions()[0].getErrorCode() == 0) {
                crossChainMessageReceipt.setConfirmed(true);
                crossChainMessageReceipt.setSuccessful(true);
                crossChainMessageReceipt.setTxhash(response.getResult().getTransactions()[0].getHash());
                crossChainMessageReceipt.setErrorMsg(response.getResult().getTransactions()[0].getErrorDesc());
            } else {
                crossChainMessageReceipt.setConfirmed(false);
                crossChainMessageReceipt.setSuccessful(false);
                crossChainMessageReceipt.setTxhash("");
                crossChainMessageReceipt.setErrorMsg("");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to read cross chain message receipt (txHash: %s)", txHash
                    ), e
            );
        }
        getBBCLogger().info("cross chain message receipt for txHash {} : {}", txHash, JSON.toJSONString(crossChainMessageReceipt));
        return crossChainMessageReceipt;
    }

    @Override
    public CrossChainMessageReceipt relayAuthMessage(byte[] rawMessage) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }
        getBBCLogger().info("relay AM {} to {} ",
                HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress());

        try {
            // 2. verify PTC sign
            ThirdPartyProof thirdPartyProof = ThirdPartyProof.decode(rawMessage);
            if (!hasTpBta(thirdPartyProof.getTpbtaCrossChainLane(), thirdPartyProof.getTpbtaVersion())) {
                throw new RuntimeException("tb-bta not found");
            }
            ThirdPartyBlockchainTrustAnchor thirdPartyBlockchainTrustAnchor = getTpBta(thirdPartyProof.getTpbtaCrossChainLane(), thirdPartyProof.getTpbtaVersion());

            ObjectIdentity objectIdentity = thirdPartyBlockchainTrustAnchor.getSignerPtcCredentialSubject().getApplicant();
            if (!hasPTCTrustRoot(objectIdentity)) {
                throw new RuntimeException("no ptc trust root found");
            }
            if (!hasPTCVerifyAnchor(objectIdentity, thirdPartyBlockchainTrustAnchor.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("no ptc verify anchor found");
            }

            CommitteeEndorseRoot committeeEndorseRoot = CommitteeEndorseRoot.decode(thirdPartyBlockchainTrustAnchor.getEndorseRoot());
            CommitteeEndorseProof committeeEndorseProof = CommitteeEndorseProof.decode(thirdPartyProof.getRawProof());
            if (committeeEndorseRoot.getCommitteeId().equals(committeeEndorseProof.getCommitteeId())) {
                throw new RuntimeException("committee id in proof not equal with the one in endorse root");
            }

            byte[] encodedToSign = thirdPartyProof.getEncodedToSign();
            int optinalCorrect = 0;
            for (int i = 0; i < committeeEndorseRoot.getEndorsers().size(); i++) {
                NodeEndorseInfo info = committeeEndorseRoot.getEndorsers().get(i);
                boolean res = false;
                for (int j = 0; j < committeeEndorseProof.getSigs().size(); j++) {
                    if (info.getNodeId().equals(committeeEndorseProof.getSigs().get(j).getNodeId())) {
                        res = SignAlgoEnum.getByName(committeeEndorseProof.getSigs().get(j).getSignAlgo().getName())
                                .getSigner()
                                .verify(info.getPublicKey().getPublicKey(), encodedToSign, committeeEndorseProof.getSigs().get(j).getSignature().getBytes());
                        if (res && !info.isRequired()) {
                            optinalCorrect++;
                            break;
                        }
                    }
                }

                if (!res && info.isRequired()) {
                    throw new RuntimeException("ptc sign verify failed");
                }
            }

            if (!committeeEndorseRoot.getPolicy().getThreshold().check(optinalCorrect)) {
                throw new RuntimeException("ptc sign verify failed");
            }

            String contractAddress = this.bbcContext.getAuthMessageContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"recvPkgFromRelayer(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(rawMessage));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    getBBCLogger().info("relay auth message successful tx {}", response.getResult().getHash());
                    crossChainMessageReceipt.setConfirmed(true);
                    crossChainMessageReceipt.setSuccessful(true);
                    crossChainMessageReceipt.setErrorMsg("");
                } else {
                    getBBCLogger().error("relay auth message failed tx {}", response.getResult().getHash());
                    crossChainMessageReceipt.setConfirmed(false);
                    crossChainMessageReceipt.setSuccessful(false);
                    crossChainMessageReceipt.setErrorMsg(response.getErrorDesc());
                }
            } else {
                throw new RuntimeException("failed to relay auth message, transaction sending failed");
            }

            crossChainMessageReceipt.setTxhash(response.getResult().getHash());
            return crossChainMessageReceipt;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to relay AM %s to %s",
                            HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public List<CrossChainMessage> readCrossChainMessagesByHeight(long height) {
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())){
            throw new RuntimeException("empty am contract in bbc context");
        }

        try {
            // 1. get transactions
            BIFBlockGetTransactionsRequest request = new BIFBlockGetTransactionsRequest();
            request.setBlockNumber(height);
            BIFBlockGetTransactionsResponse response = sdk.getBIFBlockService().getTransactions(request);

            //获取区块信息
            BIFBlockGetInfoRequest blockGetInfoRequest = new BIFBlockGetInfoRequest();
            blockGetInfoRequest.setBlockNumber(height);
            BIFBlockGetInfoResponse lockGetInfoResponse = sdk.getBIFBlockService().getBlockInfo(blockGetInfoRequest);

            List<CrossChainMessage> messageList = ListUtil.toList();
            Arrays.stream(response.getResult().getTransactions()).forEach(
                    transaction -> {
                        if (Objects.nonNull(transaction.getContractTxHashes()) && transaction.getContractTxHashes().length > 0) {
                            BIFTransactionGetInfoRequest bifTransactionGetInfoRequest = new BIFTransactionGetInfoRequest();
                            bifTransactionGetInfoRequest.setHash(transaction.getContractTxHashes()[0]);
                            BIFTransactionGetInfoResponse bifTransactionGetInfoResponse = sdk.getBIFTransactionService().getTransactionInfo(bifTransactionGetInfoRequest);
                            String topic = bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getOperations()[0].getLog().getTopic();
                            if (topic.equals("79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c651") && bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getSourceAddress().equals(this.bbcContext.getAuthMessageContract().getContractAddress())) {
                                String json = JsonUtils.toJSONString(bifTransactionGetInfoResponse.getResult().getTransactions()[0].getTransaction().getOperations()[0].getLog());
                                AuthMsg authMsg = new AuthMsg();
                                Log log = authMsg.jsonToLog(json);
                                AuthMsg.SendAuthMessageEventResponse sendAuthMessageEventResponse = AuthMsg.getSendAuthMessageEventFromLog(log);

                                JsonObject jsonObject = new JsonObject();
                                jsonObject.addProperty("url", this.config.getUrl());
                                jsonObject.addProperty("txHash", transaction.getContractTxHashes()[0]);

                                //构建跨链信息
                                CrossChainMessage crossChainMessage = CrossChainMessage.createCrossChainMessage(
                                        CrossChainMessage.CrossChainMessageType.AUTH_MSG,
                                        bifTransactionGetInfoResponse.getResult().getTransactions()[0].getLedgerSeq(),
                                        bifTransactionGetInfoResponse.getResult().getTransactions()[0].getConfirmTime(),
                                        HexUtil.decodeHex(lockGetInfoResponse.getResult().getHeader().getHash()),
                                        sendAuthMessageEventResponse.result.pkg,
                                        jsonObject.toString().getBytes(),
                                        "".getBytes(),
                                        HexUtil.decodeHex(transaction.getHash())
                                );
                                messageList.add(crossChainMessage);
                            }
                        }
                    }
            );
            if (!messageList.isEmpty()) {
                getBBCLogger().info("read cross chain messages (height: {}, msg_size: {})", height, messageList.size());
                getBBCLogger().debug("read cross chain messages (height: {}, msgs: {})",
                        height,
                        messageList.stream().map(JSON::toJSONString).collect(Collectors.joining(","))
                );
            }
            return messageList;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to readCrossChainMessagesByHeight (Height: %d, contractAddr: %s, topic: %s)",
                            height,
                            this.bbcContext.getAuthMessageContract().getContractAddress(),
                            "79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c651"
                    ), e
            );
        }
    }

    @Override
    public void updatePTCTrustRoot(PTCTrustRoot ptcTrustRoot) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        try {
            // 2. check verify ptc trust root
            // 2.1 get bcdns cert
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getBCDNSTrustRoot()\",\"args\":\"\",\"return\":\"returns(bytes)\"}");
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            AbstractCrossChainCertificate bcdnsCert;
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                bcdnsCert = CrossChainCertificateFactory.createCrossChainCertificate(HexUtil.decodeHex(res));
            } else {
                throw new RuntimeException("failed to query bcdns cert");
            }

            // 2.2 check verify ptc cert
            BCDNSTrustRootCredentialSubject bcdnsTrustRootCredentialSubject = BCDNSTrustRootCredentialSubject.decode(bcdnsCert.getCredentialSubject());
            if (!ptcTrustRoot.getPtcCrossChainCert().getIssuer().equals(bcdnsTrustRootCredentialSubject.getBcdnsRootOwner())) {
                throw new RuntimeException("ptc cert is invalid: wrong signer");
            }

            AbstractCrossChainCertificate ptcCert = ptcTrustRoot.getPtcCrossChainCert();
            if (!SignAlgoEnum.getByName(ptcCert.getProof().getSigAlgo().getName())
                    .getSigner()
                    .verify(bcdnsTrustRootCredentialSubject.getSubjectPublicKey(), ptcCert.getEncodedToSign(), ptcCert.getProof().getRawProof())) {
                throw new RuntimeException("ptc cert is invalid: invalid sig");
            }

            // 2.3 check verify ptc trust root sig
            PTCCredentialSubject ptcCredentialSubject = PTCCredentialSubject.decode(ptcCert.getCredentialSubject());
            if (!SignAlgoEnum.getByName(ptcTrustRoot.getSigAlgo().getName())
                    .getSigner()
                    .verify(ptcCredentialSubject.getSubjectPublicKey(), ptcTrustRoot.getEncodedToSign(), ptcTrustRoot.getSig())) {
                throw new RuntimeException("ptc trust root sig invalid");
            }

            // 3. update ptc trust root
            String invokeInput = StrUtil.format("{\"function\":\"updatePTCTrustRoot(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(ptcTrustRoot.encode()));
            BIFContractInvokeRequest bifContractInvokeRequest = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse bifContractInvokeResponse = sdk.getBIFContractService().contractInvoke(bifContractInvokeRequest);
            if (bifContractInvokeResponse.getErrorCode() == 0) {
                if (queryTxResult(bifContractInvokeResponse.getResult().getHash())) {
                    getBBCLogger().info("update ptc root successful tx {}", bifContractInvokeResponse.getResult().getHash());
                } else {
                    throw new RuntimeException("failed to update ptc root, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to update ptc root, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to update ptc trust root %s to PTC %s",
                            HexUtil.encodeHexStr(ptcTrustRoot.encode()), this.bbcContext.getPtcContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public boolean hasPTCTrustRoot(ObjectIdentity ptcOwnerOid) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasPTCTrustRoot(bytes)\",\"args\":\"'{}'\",\"return\":\"returns(bool)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()));
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("PTC trust root is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query PTC trust root");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query PTC trust root: %s", ptcOwnerOid.toHex()
            ), e);
        }
        return result;
    }

    @Override
    public PTCTrustRoot getPTCTrustRoot(ObjectIdentity ptcOwnerOid) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        PTCTrustRoot ptcTrustRoot;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getPTCTrustRoot(bytes)\",\"args\":\"'{}'\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()));
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);
            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                ptcTrustRoot = PTCTrustRoot.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("PTC trust root: {} ", ptcTrustRoot.toString());
                return ptcTrustRoot;
            } else {
                throw new RuntimeException("failed to query PTC trust root");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query PTC trust root: %s", ptcOwnerOid.toHex()
            ), e);
        }
    }

    @Override
    public boolean hasTpBta(CrossChainLane tpbtaLane, int tpBtaVersion) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query trust root
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasTpBta(bytes,uint32)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion);
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("TP-BTA is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query TP-BTA");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query TB-BTA, tpbtaLane(%s), tpBtaVersion(%d)", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion
            ), e);
        }
        return result;
    }

    @Override
    public ThirdPartyBlockchainTrustAnchor getTpBta(CrossChainLane tpbtaLane, int tpBtaVersion) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query third party blockchain trust anchor
        ThirdPartyBlockchainTrustAnchor thirdPartyBlockchainTrustAnchor;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getTpBta(bytes,uint32)\",\"args\":\"'{}',{}\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(tpbtaLane.encode()), tpBtaVersion);
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                thirdPartyBlockchainTrustAnchor = ThirdPartyBlockchainTrustAnchor.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("Third party blockchain trust anchor: {} ", HexUtil.encodeHexStr(thirdPartyBlockchainTrustAnchor.encode()));
            } else {
                throw new RuntimeException("failed to query third party blockchain trust anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query third party blockchain trust anchor, tpbtaLane(%s), tpBtaVersion(%d)",
                    HexUtil.encodeHexStr(tpbtaLane.encode()),
                    tpBtaVersion
            ), e);
        }
        return thirdPartyBlockchainTrustAnchor;
    }

    @Override
    public void addTpBta(ThirdPartyBlockchainTrustAnchor tpbta) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        try {
            //2. check verify tp-bta
            if (!hasPTCTrustRoot(tpbta.getSignerPtcCredentialSubject().getApplicant())) {
                throw new RuntimeException("no ptc trust root found");
            }

            if (!hasPTCVerifyAnchor(tpbta.getSignerPtcCredentialSubject().getApplicant(), tpbta.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("no ptc verify anchor found");
            }
            PTCVerifyAnchor ptcVerifyAnchor = getPTCVerifyAnchor(tpbta.getSignerPtcCredentialSubject().getApplicant(), tpbta.getPtcVerifyAnchorVersion());

            if (!ptcVerifyAnchor.getVersion().equals(tpbta.getPtcVerifyAnchorVersion())) {
                throw new RuntimeException("verify anchor version not equal");
            }

            CommitteeVerifyAnchor committeeVerifyAnchor = CommitteeVerifyAnchor.decode(ptcVerifyAnchor.getAnchor());
            CommitteeEndorseProof committeeEndorseProof = CommitteeEndorseProof.decode(tpbta.getEndorseProof());
            if (committeeVerifyAnchor.getCommitteeId().equals(committeeEndorseProof.getCommitteeId())) {
                throw new RuntimeException("committee id in proof not equal with the one in verify anchor");
            }

            byte[] encodedToSign = tpbta.getEncodedToSign();
            int correct = 0;
            for (int i = 0; i < committeeEndorseProof.getSigs().size(); i++) {
                CommitteeNodeProof info = committeeEndorseProof.getSigs().get(i);
                for (int j = 0; j < committeeVerifyAnchor.getAnchors().size(); j++) {
                    if (info.getNodeId().equals(committeeVerifyAnchor.getAnchors().get(j).getNodeId())) {
                        boolean res = false;
                        for (int k = 0; k < committeeVerifyAnchor.getAnchors().get(j).getNodePublicKeys().size(); k++) {
                            res = SignAlgoEnum.getByName(info.getSignAlgo().getName())
                                    .getSigner()
                                    .verify(committeeVerifyAnchor.getAnchors().get(j).getNodePublicKeys().get(k).getPublicKey(), encodedToSign, info.getSignature().getBytes());
                            if (res) {
                                break;
                            }
                        }
                        if (res) {
                            correct++;
                            break;
                        }
                    }
                }
            }

            if (3*correct <= 2*committeeVerifyAnchor.getAnchors().size()) {
                throw new RuntimeException("the number of signatures is less than 2/3 ");
            }

            //3. update tp-bta
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String invokeInput = StrUtil.format("{\"function\":\"addTpBta(bytes)\",\"args\":\"'{}'\"}", HexUtil.encodeHexStr(tpbta.encode()));
            BIFContractInvokeRequest request = createBIFContractInvokeRequest(contractAddress, invokeInput);
            BIFContractInvokeResponse response = sdk.getBIFContractService().contractInvoke(request);
            if (response.getErrorCode() == 0) {
                if (queryTxResult(response.getResult().getHash())) {
                    getBBCLogger().info("add TB-BTA successful tx {}", response.getResult().getHash());
                } else {
                    throw new RuntimeException("failed to add tp-bta, transaction executing failed");
                }
            } else {
                throw new RuntimeException("failed to add tp-bta, transaction sending failed");
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to add tp-bta: %s", HexUtil.encodeHexStr(tpbta.encode())), e
            );
        }
    }

    @Override
    public Set<PTCTypeEnum> getSupportedPTCType() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc type
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getSupportedPTCType()\",\"args\":\"\"}");
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = res.substring(2,res.length() - 2);
                String[] strArray = res.split(",");
                List<BigInteger> bigIntegerList = new ArrayList<>();
                for (String numStr : strArray) {
                    bigIntegerList.add(new BigInteger(numStr));
                }
                getBBCLogger().info("get support ptc type: {}", bigIntegerList);
                return bigIntegerList.stream().map(x -> PTCTypeEnum.valueOf(x.byteValueExact())).collect(Collectors.toSet());
            } else {
                throw new RuntimeException("failed to query PTC type");
            }
        } catch (Exception e) {
            throw new RuntimeException("failed to query PTC type", e);
        }
    }

    @Override
    public boolean hasPTCVerifyAnchor(ObjectIdentity ptcOwnerOid, BigInteger version) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc verify anchor
        boolean result;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"hasPTCVerifyAnchor(bytes,uint256)\",\"args\":\"'{}'\",\"return\":\"returns(bool)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()), version.longValue());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();

                result = res.equals("true");
                getBBCLogger().info("PTC verify anchor is existed: {}", result);
            } else {
                throw new RuntimeException("failed to query PTC verify anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "query ptc verify anchor, ptcOwnerOid(%s), version(%d)",
                    HexUtil.encodeHexStr(ptcOwnerOid.encode()),
                    version
            ), e);
        }
        return result;
    }

    @Override
    public PTCVerifyAnchor getPTCVerifyAnchor(ObjectIdentity ptcOwnerOid, BigInteger version) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)){
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getPtcContract())){
            throw new RuntimeException("empty ptc contract in bbc context");
        }

        // 2. query ptc verify anchor
        PTCVerifyAnchor ptcVerifyAnchor;
        try {
            String contractAddress = this.bbcContext.getPtcContract().getContractAddress();
            String callInput = StrUtil.format("{\"function\":\"getPTCVerifyAnchor(bytes,uint256)\",\"args\":\"'{}',{}\",\"return\":\"returns(bytes)\"}", HexUtil.encodeHexStr(ptcOwnerOid.encode()), version.intValue());
            BIFContractCallRequest request = new BIFContractCallRequest();
            request.setContractAddress(contractAddress);
            request.setInput(callInput);
            request.setFeeLimit(50000000L);

            BIFContractCallResponse response = sdk.getBIFContractService().contractQuery(request);
            if (response.getErrorCode() == 0) {
                Map<String, Map<String, String>> resMap = (Map<String, Map<String, String>>) (response.getResult().getQueryRets().get(0));
                String res = resMap.get("result").get("data").trim();
                res = StrUtil.removeSuffix(
                        StrUtil.removePrefix(res, "[").trim(),
                        "]"
                ).trim();
                if (HexUtil.isHexNumber(res)) {
                    res = StrUtil.removePrefix(res.trim(), "0x");
                }

                ptcVerifyAnchor = PTCVerifyAnchor.decode(HexUtil.decodeHex(res));
                getBBCLogger().info("query ptc verify anchor: {} ", HexUtil.encodeHexStr(ptcVerifyAnchor.encode()));
            } else {
                throw new RuntimeException("failed to query ptc verify anchor");
            }
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "query ptc verify anchor, ptcOwnerOid(%s), version(%d)",
                    HexUtil.encodeHexStr(ptcOwnerOid.encode()),
                    version
            ), e);
        }
        return ptcVerifyAnchor;
    }

}