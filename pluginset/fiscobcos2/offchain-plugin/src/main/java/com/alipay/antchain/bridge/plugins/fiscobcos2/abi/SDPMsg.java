package com.alipay.antchain.bridge.plugins.fiscobcos2.abi;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class SDPMsg extends Contract {
    public static final String[] BINARY_ARRAY = {"","6101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610f4f6151b2565b610fbe88888080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508786868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612542565b61012060405190810160405280600263ffffffff168152602001600060010260001916815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020018760001916815260200186611034576000611037565b60015b60ff16815260200167ffffffffffffffff8016815260200161108c8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050338a612547565b63ffffffff16815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152602001602060405190810160405280600081525081525090506110fa60025482611d6390919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e41fb5173361114284612040565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111df5780820151818401526020810190506111c4565b50505050905090810190601f16801561120c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b5050505061124c6125e7565b80602001519150509695505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5344504d73673a206e6f742076616c696420616d20636f6e747261637400000081525060200191505060405180910390fd5b6113ba86868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506125e9565b6113f583838080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506125ee565b905060018163ffffffff16141561147a5761147586868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506126b6565b61156c565b60028163ffffffff1614156114fd576114f886868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061285e565b61156b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f756e737570706f7274207364702076657273696f6e000000000000000000000081525060200191505060405180910390fd5b5b611574612ac0565b505050505050565b61158461521e565b6115f386868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611cbe565b60806040519081016040528087878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020018560001916815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200163ffffffff80168152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e41fb517336116cd84612ac2565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561176a57808201518184015260208101905061174f565b50505050905090810190601f1680156117975780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156117b757600080fd5b505af11580156117cb573d6000803e3d6000fd5b505050506117d76123b5565b505050505050565b6117e761253a565b73ffffffffffffffffffffffffffffffffffffffff16611805610f1c565b73ffffffffffffffffffffffffffffffffffffffff16141515611890576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561195b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611a2161521e565b6060611a9287878080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612542565b60806040519081016040528088888080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020018660001916815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152602001611b5589898080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050503389612547565b63ffffffff168152509150611b6982612ac2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e41fb51733836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c48578082015181840152602081019050611c2d565b50505050905090810190601f168015611c755780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611c9557600080fd5b505af1158015611ca9573d6000803e3d6000fd5b50505050611cb56125e7565b50505050505050565b505050565b6000806000611cd3868686612bac565b915060056000836000191660001916815260200190815260200160002060009054906101000a900463ffffffff169050600560008360001916600019168152602001908152602001600020600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b60006060600060606002866000015163ffffffff16141515611ded576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f656e636f64655344504d6573736167653a2077726f6e672076657273696f6e0081525060200191505060405180910390fd5b63ffffffff8660e001515111151515611e94576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f656e636f64655344504d6573736167653a20626f6479206c656e677468206f7681526020017f65726c696d69740000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8560e0015151866040015151607901019350836040519080825280601f01601f191660200182016040528015611ed95781602001602082028038833980820191505090505b509250839150611efa8263ff00000088600001510163ffffffff1685612d3c565b611f046020612d46565b8203915085604001519050611f1a828285612f75565b80516004018203915061","","","","0190601f168015614f495780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1915050925082829550955050505050935093915050565b6000614f81826060015161514a565b9050919050565b6000614f9386614f72565b9050848660400181905250838660600190600019169081600019168152505082614fbe576003614fc1565b60025b866080019060ff16908160ff168152505082614fdd5781614fef565b60206040519081016040528060008152505b866101000181905250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e41fb5178261504089612040565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156150dd5780820151818401526020810190506150c2565b50505050905090810190601f16801561510a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561512a57600080fd5b505af115801561513e573d6000803e3d6000fd5b50505050505050505050565b6000606060206040519080825280601f01601f1916602001820160405280156151825781602001602082028038833980820191505090505b5090506151916020848361309e565b61519c6020826151a4565b915050919050565b600082820151905092915050565b61012060405190810160405280600063ffffffff168152602001600080191681526020016060815260200160008019168152602001600060ff168152602001600067ffffffffffffffff168152602001600063ffffffff16815260200160608152602001606081525090565b608060405190810160405280606081526020016000801916815260200160608152602001600063ffffffff16815250905600a165627a7a7230582063e4c441166af89c01273a7882ce7bf6b75d09da83f78bb66ea6997a6e03f50d0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","39578082015181840152602081019050612f1e565b50505050905090810190601f168015612f665780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612f8857600080fd5b505af1158015612f9c573d6000803e3d6000fd5b50505050505050565b60008060606000612fbb87878760200151614711565b93508363ffffffff16856060015163ffffffff16141515613044576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5344504d73673a2073657175656e6365206e6f7420657175616c00000000000081525060200191505060405180910390fd5b60009250613051856146fb565b90508073ffffffffffffffffffffffffffffffffffffffff16606060405190810160405280602181526020017f726563764d65737361676528737472696e672c627974657333322c627974657381526020017f2900000000000000000000000000000000000000000000000000000000000000815250888888604001516040516024018080602001846000191660001916815260200180602001838103835286818151815260200191508051906020019080838360005b83811015613123578082015181840152602081019050613108565b50505050905090810190601f1680156131505780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561318957808201518184015260208101905061316e565b50505050905090810190601f1680156131b65780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906040518082805190602001908083835b60208310151561320357805182526020820191506020810190506020830392506131de565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405180828051906020019080838360005b838110156132aa57808201518184015260208101905061328f565b50505050905090810190601f1680156132d75780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af191505092507fa7b67603ab1ccc49bd49f413615eec42635893f21e8a6ecf8bd542465fa536e7878783878787604051808060200187600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1663ffffffff1681526020018415151515815260200180602001838103835289818151815260200191508051906020019080838360005b838110156133b557808201518184015260208101905061339a565b50505050905090810190601f1680156133e25780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561341b578082015181840152602081019050613400565b50505050905090810190601f1680156134485780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a150505050505050565b600060608251915061347583611dbc565b846000019063ffffffff16908163ffffffff16815250506134966020612cc5565b820391506134a482846146ed565b846020019060001916908160001916815250506134bf612ca5565b60ff16820391506134d082846147b1565b90508084604001819052508051600401820391506134ee82846146ed565b84606001906000191690816000191681525050613509612ca5565b60ff168203915061351a82846148ea565b846080019060ff16908160ff168152505060018203915061353b82846148f8565b8460a0019067ffffffffffffffff16908167ffffffffffffffff168152505060088203915061356a828461468d565b8460c0019063ffffffff16908163ffffffff168152505060048203915061359182846147b1565b8460e001819052508360e001515160040182039150600260ff16846080015160ff1611156135cd576135c382846147b1565b8461010001819052505b50505050565b6000606063ffffffff80168360c0015163ffffffff1614156136c6576135fa858585614906565b8092508193505050600060ff16836080015160ff1614156136c15781819015156136bf576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613684578082015181840152602081019050613669565b50505050905090810190601f1680156136b15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b6136da565b6136d1858585614bc5565b80925081935050505b7fe5b48da3ec5c2477fc166b4d1382803ec27d0bd0a8e507b7b5919a94dbee8c1d83602001518686866040015161371088614f24565b8860c001518960a001518a608001518a8a604051808b60001916600019168152602001806020018a60001916600019168152602001806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018863ffffffff1663ffffffff1681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018660ff1660ff168152602001851515151581526020018060200184810384528d818151815260200191508051906020019080838360005b838110156137f95780820151818401526020810190506137de565b50505050905090810190601f1680156138265780820380516001836020036101000a031916815260200191505b5084810383528b818151815260200191508051906020019080838360005b8381101561385f578082015181840152602081019050613844565b50505050905090810190601f16801561388c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156138c55780820151818401526020810190506138aa565b50505050905090810190601f1680156138f25780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a1600160ff16836080015160ff16141561392b5761392a8386868585614f3a565b5b5050505050565b61393b81614f24565b73ffffffffffffffffffffffffffffffffffffffff1663fbec4563826020015185858560c001518660a001518760e001516040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018087600019166000191681526020018060200186600019166000191681526020018563ffffffff1663ffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff16815260200180602001838103835288818151815260200191508051906020019080838360005b83811015613a23578082015181840152602081019050613a08565b50505050905090810190601f168015613a505780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015613a89578082015181840152602081019050613a6e565b50505050905090810190601f168015613ab65780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b158015613adb57600080fd5b505af1158015613aef573d6000803e3d6000fd5b505050507fe5b48da3ec5c2477fc166b4d1382803ec27d0bd0a8e507b7b5919a94dbee8c1d816020015184848460400151613b2986614f24565b8660c001518760a0015188608001516001604051808a60001916600019168152602001806020018960001916600019168152602001806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff1681526020018560ff1660ff168152602001841515151581526020018060200184810384528c818151815260200191508051906020019080838360005b83811015613c12578082015181840152602081019050613bf7565b50505050905090810190601f168015613c3f5780820380516001836020036101000a031916815260200191505b5084810383528a818151815260200191508051906020019080838360005b83811015613c78578082015181840152602081019050613c5d565b50505050905090810190601f168015613ca55780820380516001836020036101000a031916815260200191505b50848103825260078152602001807f73756363657373000000000000000000000000000000000000000000000000008152506020019c5050505050505050505050505060405180910390a1505050565b613cfe81614f24565b73ffffffffffffffffffffffffffffffffffffffff1663d417dd18826020015185858560c001518660a001518760e001518861010001516040518863ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018088600019166000191681526020018060200187600019166000191681526020018663ffffffff1663ffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff168152602001806020018060200184810384528a818151815260200191508051906020019080838360005b83811015613df0578082015181840152602081019050613dd5565b50505050905090810190601f168015613e1d5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015613e56578082015181840152602081019050613e3b565b50505050905090810190601f168015613e835780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015613ebc578082015181840152602081019050613ea1565b50505050905090810190601f168015613ee95780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087803b158015613f1057600080fd5b505af1158015613f24573d6000803e3d6000fd5b","","6000614f33826060015161514a565b9050919050565b6000614f4586614f24565b9050848660400181905250838660600190600019169081600019168152505082614f70576003614f73565b60025b866080019060ff16908160ff168152505082614f8f5781614fa1565b60206040519081016040528060008152505b866101000181905250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663317c40ab82614ff289612612565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561508f578082015181840152602081019050615074565b50505050905090810190601f1680156150bc5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156150dc57600080fd5b505af11580156150f0573d6000803e3d6000fd5b50505050505050505050565b6000606060206040519080825280601f01601f1916602001820160405280156151345781602001602082028038833980820191505090505b5090508260208201526020810151915050919050565b6000606060206040519080825280601f01601f1916602001820160405280156151825781602001602082028038833980820191505090505b50905061519160208483612c9b565b61519c6020826151a4565b915050919050565b600082820151905092915050565b608060405190810160405280606081526020016000801916815260200160608152602001600063ffffffff1681525090565b61012060405190810160405280600063ffffffff168152602001600080191681526020016060815260200160008019168152602001600060ff168152602001600067ffffffffffffffff168152602001600063ffffffff168152602001606081526020016060815250905600a165627a7a723058206ef49b7f4d7312077c14d17ec5aa07b63436bdef41aadf76fc596ab8c5229a120029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"receiverDomain\",\"type\":\"string\"},{\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"name\":\"atomic\",\"type\":\"bool\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendUnorderedMessageV2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"senderDomain\",\"type\":\"string\"},{\"name\":\"senderID\",\"type\":\"bytes32\"},{\"name\":\"receiverDomain\",\"type\":\"string\"},{\"name\":\"receiverID\",\"type\":\"bytes32\"}],\"name\":\"querySDPMessageSeq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLocalDomain\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localDomainHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmContract\",\"type\":\"address\"}],\"name\":\"setAmContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"setLocalDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverDomain\",\"type\":\"string\"},{\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"name\":\"atomic\",\"type\":\"bool\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessageV2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"senderDomain\",\"type\":\"string\"},{\"name\":\"senderID\",\"type\":\"bytes32\"},{\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"recvMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverDomain\",\"type\":\"string\"},{\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendUnorderedMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiverDomain\",\"type\":\"string\"},{\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"senderDomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"senderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"receiverID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sequence\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"receiveMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"senderDomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"senderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"receiverDomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"receiverID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sequence\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"atomicFlag\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"ReceiveMessageV2\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SENDUNORDEREDMESSAGEV2 = "sendUnorderedMessageV2";

    public static final String FUNC_QUERYSDPMESSAGESEQ = "querySDPMessageSeq";

    public static final String FUNC_GETLOCALDOMAIN = "getLocalDomain";

    public static final String FUNC_LOCALDOMAINHASH = "localDomainHash";

    public static final String FUNC_SETAMCONTRACT = "setAmContract";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_GETAMADDRESS = "getAmAddress";

    public static final String FUNC_SETLOCALDOMAIN = "setLocalDomain";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SENDMESSAGEV2 = "sendMessageV2";

    public static final String FUNC_AMADDRESS = "amAddress";

    public static final String FUNC_RECVMESSAGE = "recvMessage";

    public static final String FUNC_SENDUNORDEREDMESSAGE = "sendUnorderedMessage";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SENDMESSAGE = "sendMessage";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECEIVEMESSAGE_EVENT = new Event("receiveMessage", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event RECEIVEMESSAGEV2_EVENT = new Event("ReceiveMessageV2", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected SDPMsg(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt sendUnorderedMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendUnorderedMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendUnorderedMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, byte[], Boolean, byte[]> getSendUnorderedMessageV2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDUNORDEREDMESSAGEV2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, byte[], Boolean, byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getSendUnorderedMessageV2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SENDUNORDEREDMESSAGEV2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt querySDPMessageSeq(String senderDomain, byte[] senderID, String receiverDomain, byte[] receiverID) {
        final Function function = new Function(
                FUNC_QUERYSDPMESSAGESEQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] querySDPMessageSeq(String senderDomain, byte[] senderID, String receiverDomain, byte[] receiverID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYSDPMESSAGESEQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQuerySDPMessageSeq(String senderDomain, byte[] senderID, String receiverDomain, byte[] receiverID) {
        final Function function = new Function(
                FUNC_QUERYSDPMESSAGESEQ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, byte[], String, byte[]> getQuerySDPMessageSeqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYSDPMESSAGESEQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, byte[], String, byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getQuerySDPMessageSeqOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYSDPMESSAGESEQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public byte[] getLocalDomain() throws ContractException {
        final Function function = new Function(FUNC_GETLOCALDOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] localDomainHash() throws ContractException {
        final Function function = new Function(FUNC_LOCALDOMAINHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setAmContract(String newAmContract) {
        final Function function = new Function(
                FUNC_SETAMCONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAmContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAmContract(String newAmContract, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAMCONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAmContract)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAmContract(String newAmContract) {
        final Function function = new Function(
                FUNC_SETAMCONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newAmContract)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAmContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAMCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] renounceOwnership(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRenounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAmAddress() throws ContractException {
        final Function function = new Function(FUNC_GETAMADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setLocalDomain(String domain) {
        final Function function = new Function(
                FUNC_SETLOCALDOMAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(domain)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setLocalDomain(String domain, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLOCALDOMAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(domain)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLocalDomain(String domain) {
        final Function function = new Function(
                FUNC_SETLOCALDOMAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(domain)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetLocalDomainInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLOCALDOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt sendMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final Function function = new Function(
                FUNC_SENDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendMessageV2(String receiverDomain, byte[] receiverID, Boolean atomic, byte[] message) {
        final Function function = new Function(
                FUNC_SENDMESSAGEV2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(atomic), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, byte[], Boolean, byte[]> getSendMessageV2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDMESSAGEV2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, byte[], Boolean, byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getSendMessageV2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SENDMESSAGEV2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String amAddress() throws ContractException {
        final Function function = new Function(FUNC_AMADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt recvMessage(String senderDomain, byte[] senderID, byte[] pkg) {
        final Function function = new Function(
                FUNC_RECVMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] recvMessage(String senderDomain, byte[] senderID, byte[] pkg, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECVMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRecvMessage(String senderDomain, byte[] senderID, byte[] pkg) {
        final Function function = new Function(
                FUNC_RECVMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(senderDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(senderID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pkg)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], byte[]> getRecvMessageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECVMESSAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public TransactionReceipt sendUnorderedMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendUnorderedMessage(String receiverDomain, byte[] receiverID, byte[] message, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendUnorderedMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final Function function = new Function(
                FUNC_SENDUNORDEREDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], byte[]> getSendUnorderedMessageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDUNORDEREDMESSAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public TransactionReceipt transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferOwnership(String newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt sendMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final Function function = new Function(
                FUNC_SENDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] sendMessage(String receiverDomain, byte[] receiverID, byte[] message, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SENDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendMessage(String receiverDomain, byte[] receiverID, byte[] message) {
        final Function function = new Function(
                FUNC_SENDMESSAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiverDomain), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiverID), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(message)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], byte[]> getSendMessageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDMESSAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnershipTransferredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnershipTransferredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ReceiveMessageEventResponse> getReceiveMessageEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEMESSAGE_EVENT, transactionReceipt);
        ArrayList<ReceiveMessageEventResponse> responses = new ArrayList<ReceiveMessageEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceiveMessageEventResponse typedResponse = new ReceiveMessageEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeReceiveMessageEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RECEIVEMESSAGE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeReceiveMessageEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RECEIVEMESSAGE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ReceiveMessageV2EventResponse> getReceiveMessageV2Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEMESSAGEV2_EVENT, transactionReceipt);
        ArrayList<ReceiveMessageV2EventResponse> responses = new ArrayList<ReceiveMessageV2EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceiveMessageV2EventResponse typedResponse = new ReceiveMessageV2EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.messageId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.senderDomain = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.senderID = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.receiverDomain = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.receiverID = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.atomicFlag = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.errMsg = (String) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeReceiveMessageV2Event(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RECEIVEMESSAGEV2_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeReceiveMessageV2Event(EventCallback callback) {
        String topic0 = eventEncoder.encode(RECEIVEMESSAGEV2_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static SDPMsg load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new SDPMsg(contractAddress, client, credential);
    }

    public static SDPMsg deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(SDPMsg.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class OwnershipTransferredEventResponse {
        public TransactionReceipt.Logs log;

        public String previousOwner;

        public String newOwner;
    }

    public static class ReceiveMessageEventResponse {
        public TransactionReceipt.Logs log;

        public String senderDomain;

        public byte[] senderID;

        public String receiverID;

        public BigInteger sequence;

        public Boolean result;

        public String errMsg;
    }

    public static class ReceiveMessageV2EventResponse {
        public TransactionReceipt.Logs log;

        public byte[] messageId;

        public String senderDomain;

        public byte[] senderID;

        public String receiverDomain;

        public String receiverID;

        public BigInteger sequence;

        public BigInteger nonce;

        public BigInteger atomicFlag;

        public Boolean result;

        public String errMsg;
    }
}
