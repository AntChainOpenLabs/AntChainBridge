/*
 * Copyright 2023 Ant Group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alipay.antchain.bridge.plugins.fiscobcos;

import java.io.IOException;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Future;
import java.util.stream.Collectors;

import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.thread.ThreadUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSON;
import com.alipay.antchain.bridge.commons.bbc.AbstractBBCContext;
import com.alipay.antchain.bridge.commons.bbc.syscontract.AuthMessageContract;
import com.alipay.antchain.bridge.commons.bbc.syscontract.ContractStatusEnum;
import com.alipay.antchain.bridge.commons.bbc.syscontract.SDPContract;
import com.alipay.antchain.bridge.commons.core.base.CrossChainMessage;
import com.alipay.antchain.bridge.commons.core.base.CrossChainMessageReceipt;
import com.alipay.antchain.bridge.plugins.lib.BBCService;
import com.alipay.antchain.bridge.plugins.spi.bbc.AbstractBBCService;
import com.webank.wedpr.crypto.NativeInterface;
import lombok.Getter;
import lombok.SneakyThrows;
import org.fisco.bcos.sdk.v3.BcosSDK;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.client.protocol.response.BcosBlock;
import org.fisco.bcos.sdk.v3.codec.ContractCodecException;
import org.fisco.bcos.sdk.v3.config.ConfigOption;
import org.fisco.bcos.sdk.v3.config.model.*;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import com.alipay.antchain.bridge.plugins.fiscobcos.abi.AuthMsg;
import com.alipay.antchain.bridge.plugins.fiscobcos.abi.SDPMsg;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.codec.decode.TransactionDecoderInterface;
import org.fisco.bcos.sdk.v3.transaction.codec.decode.TransactionDecoderService;
import org.fisco.bcos.sdk.v3.transaction.manager.AssembleTransactionProcessor;
import org.fisco.bcos.sdk.v3.transaction.manager.TransactionProcessorFactory;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.transaction.tools.ContractLoader;

import static com.alipay.antchain.bridge.plugins.fiscobcos.abi.AuthMsg.SENDAUTHMESSAGE_EVENT;

@BBCService(products = "fiscobcos", pluginId = "plugin-fiscobcos")
@Getter
public class FISCOBCOSBBCService extends AbstractBBCService {
    private FISCOBCOSConfig config;

    private BcosSDK sdk;
    private Client client;
    private CryptoKeyPair keyPair;
    private AssembleTransactionProcessor transactionProcessorAM;
    private AssembleTransactionProcessor transactionProcessorSDP;

    private AbstractBBCContext bbcContext;

    public static final String abiAM = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"SendAuthMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"name\":\"SubProtocolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recvDomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rawMsg\",\"type\":\"bytes\"}],\"name\":\"recvAuthMessage\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[412748309,3327353421],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2376452955,1351213768],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"protocolRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[1885099820,1084072689],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":2,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"recvFromProtocol\",\"outputs\":[],\"selector\":[3827283223,830226603],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"recvPkgFromRelayer\",\"outputs\":[],\"selector\":[2807459447,447136906],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2215035001,3915807437],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"selector\":[1901074598,3631098338],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"}],\"name\":\"setProtocol\",\"outputs\":[],\"selector\":[3898471927,535779719],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"selector\":[1699277244,2048863722],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":2,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subProtocols\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"protocolType\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"selector\":[1954316285,1312174190],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"selector\":[4076725131,382390570],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
    public static final String binAM = "608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03191633179055612166806100736000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638406c079116100715780638406c0791461018f5780638da5cb5b146101a2578063a7566e77146101b3578063e41fb517146101c6578063e85df5f7146101d9578063f2fde38b146101ec57600080fd5b8063189a0a15146100ae5780636548e9bc146100fa578063705c572c1461010f578063715018a614610138578063747c7ffd14610140575b600080fd5b6100dd6100bc366004611cb0565b63ffffffff166000908152600360205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61010d610108366004611ce2565b6101ff565b005b6100dd61011d366004611cb0565b6003602052600090815260409020546001600160a01b031681565b61010d610254565b61017361014e366004611ce2565b60026020526000908152604090205463ffffffff811690640100000000900460ff1682565b6040805163ffffffff90931683529015156020830152016100f1565b6001546100dd906001600160a01b031681565b6000546001600160a01b03166100dd565b61010d6101c1366004611da0565b6102c8565b61010d6101d4366004611dd5565b61038a565b61010d6101e7366004611e23565b61048d565b61010d6101fa366004611ce2565b6105ab565b6000546001600160a01b031633146102325760405162461bcd60e51b815260040161022990611e56565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260040161022990611e56565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001546001600160a01b0316331461032c5760405162461bcd60e51b815260206004820152602160248201527f417574684d73673a2073656e646572206e6f742076616c69642072656c6179656044820152603960f91b6064820152608401610229565b60008061033883610695565b915091507f2b41cea8d63514764033a161efa4273751d3f20eda0ecd3c514fa43b99f38bb0828260405161036d929190611ed8565b60405180910390a1610385610382838361076e565b50565b505050565b33600090815260026020526040902054640100000000900460ff166104005760405162461bcd60e51b815260206004820152602660248201527f417574684d73673a2073656e646572206e6f742076616c6964207375622d70726044820152651bdd1bd8dbdb60d21b6064820152608401610229565b60006040518060800160405280600163ffffffff1681526020016104238561089a565b8152336000908152600260209081526040918290205463ffffffff16908301520183905290507f79b7516b1b7a6a39fb4b7b22e8667cd3744e5c27425292f8a9f49d1042c0c651610473826108ad565b6040516104809190611efd565b60405180910390a1505050565b6000546001600160a01b031633146104b75760405162461bcd60e51b815260040161022990611e56565b6001600160a01b03821660009081526002602052604090208054640100000000900460ff16156105295760405162461bcd60e51b815260206004820152601860248201527f417574684d73673a2070726f746f636f6c2065786973747300000000000000006044820152606401610229565b805463ffffffff831664ffffffffff19909116811764010000000017825560008181526003602090815260409182902080546001600160a01b0388166001600160a01b0319909116811790915591519182527f1d5c04c569492046e8119073d290445582589ec4f52031b868ed74b2b7f7bfa8910160405180910390a2505050565b6000546001600160a01b031633146105d55760405162461bcd60e51b815260040161022990611e56565b6001600160a01b03811661063a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610229565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806000806106a782866004610941565b90506106b4600483611f26565b915060006106c3600483015190565b905060006106d884888463ffffffff16610941565b90506106ea63ffffffff831685611f26565b935060006106fa85896004610941565b9050610707600486611f26565b94506000610716600483015190565b9050600061072b878b8463ffffffff16610941565b905061073d63ffffffff831688611f26565b604080518082019091528581526020810183905290975061075d82610956565b995099505050505050505050915091565b604080516080810182526000808252602082018190529181018290526060808201529061079a83610986565b60408082015163ffffffff166000908152600360205220549091506001600160a01b031661080a5760405162461bcd60e51b815260206004820152601a60248201527f417574684d73673a206e6f2070726f746f636f6c2065786973740000000000006044820152606401610229565b60408082015163ffffffff166000908152600360209081529082902054908301516060840151925163c09b261b60e01b81526001600160a01b039092169263c09b261b9261085e9289929091600401611f3e565b600060405180830381600087803b15801561087857600080fd5b505af115801561088c573d6000803e3d6000fd5b509293505050505b92915050565b6000806108a683610a3e565b9392505050565b6060816000015163ffffffff16600114156108cb5761089482610a6c565b816000015163ffffffff16600214156108e75761089482610bdc565b60405162461bcd60e51b815260206004820152602960248201527f656e636f6465417574684d6573736167653a20616d2076657273696f6e206e6f6044820152681d081cdd5c1c1bdc9d60ba1b6064820152608401610229565b606061094e848484610da4565b949350505050565b606080600061096484610e13565b905060006109758260200151610fb3565b608090920151959194509092505050565b60408051608081018252600080825260208201819052918101829052606080820152906109b2836110a8565b90508063ffffffff16600114156109cc576108a6836110b5565b8063ffffffff16600214156109e4576108a6836111d3565b60405162461bcd60e51b815260206004820152602960248201527f6465636f6465417574684d6573736167653a20616d2076657273696f6e206e6f6044820152681d081cdd5c1c1bdc9d60ba1b6064820152608401610229565b6040805160208082528183019092526000918291906020820181803683375050506020018390525090919050565b6060816000015163ffffffff16600114610ad35760405162461bcd60e51b815260206004820152602260248201527f656e636f6465417574684d65737361676556313a2077726f6e6720766572736960448201526137b760f11b6064820152608401610229565b6000610ae2836060015161128e565b610aed906004611f26565b610af8906020611f26565b610b03906004611f26565b905060008167ffffffffffffffff811115610b2057610b20611cfd565b6040519080825280601f01601f191660200182016040528015610b4a576020820181803683370190505b50845163ffffffff1683820152905081610b6460206112da565b610b6e9082611f73565b60208681015182850152909150610b859082611f73565b604086015163ffffffff16838201529050610ba060206112da565b610baa9082611f73565b9050610bbb81866060015184611509565b610bc8856060015161128e565b610bd29082611f73565b5090949350505050565b6060816000015163ffffffff16600214610c435760405162461bcd60e51b815260206004820152602260248201527f656e636f6465417574684d65737361676556323a2077726f6e6720766572736960448201526137b760f11b6064820152608401610229565b63ffffffff8260600151511115610caf5760405162461bcd60e51b815260206004820152602a60248201527f656e636f6465417574684d65737361676556323a20626f6479206c656e677468604482015269081bdd995c9b1a5b5a5d60b21b6064820152608401610229565b60008260600151516004610cc39190611f26565b610cce906004611f26565b610cd9906020611f26565b610ce4906004611f26565b905060008167ffffffffffffffff811115610d0157610d01611cfd565b6040519080825280601f01601f191660200182016040528015610d2b576020820181803683370190505b50845163ffffffff1683820152905081610d4560206112da565b610d4f9082611f73565b60208681015182850152909150610d669082611f73565b604086015163ffffffff16838201529050610d8160206112da565b610d8b9082611f73565b9050610d9c8186606001518461156e565b509392505050565b60608082158015610dc057604051915060208201604052610e0a565b6040519150601f8416801560200281840101858101888315602002848a0101015b81831015610df9578051835260209283019201610de1565b5050858452601f01601f1916604052505b50949350505050565b6040805161010081018252606060c0820181815260e083018290528252602082018190526000928201839052808201819052608082015260a08101919091526040805161010081018252606060c0820181815260e083018290528252602082018190526000928201839052808201819052608082015260a081019190915260065b8351811015610fac5760408051606080820183526000808352602083015291810191909152610ec3858361165c565b815190935090915061ffff1660041415610eeb57610ee481604001516117b3565b8352610fa6565b805161ffff1660051415610f085760408101516020840152610fa6565b805161ffff1660071415610f3d57610f2d610f288260400151600061184c565b611876565b63ffffffff166040840152610fa6565b805161ffff1660081415610f5a5760408101516060840152610fa6565b805161ffff1660091415610f775760408101516080840152610fa6565b805161ffff16600a1415610fa657610f9c610f9782604001516000611979565b6119a1565b61ffff1660a08401525b50610e94565b5092915050565b6060600c8251116110065760405162461bcd60e51b815260206004820152601b60248201527f696c6c6567616c206c656e677468206f662075646167207265737000000000006044820152606401610229565b6000611016610f2884600861184c565b905061102381600c611f8a565b63ffffffff16835110156110965760405162461bcd60e51b815260206004820152603460248201527f6c656e677468206f6620756461672072657370206c657373207468616e20746860448201527365206c656e677468206f66206d736720626f647960601b6064820152608401610229565b6108a6600c848363ffffffff16610da4565b6000610894825183015190565b604080516080810182526000808252602082018190529181019190915260608082015260006110e460206112da565b83516110f09190611f73565b905060006110fe8285015190565b905061110b602083611f73565b915060006111198386015190565b905061112560206112da565b61112f9084611f73565b9250600061113d8487611a39565b67ffffffffffffffff81111561115557611155611cfd565b6040519080825280601f01601f19166020018201604052801561117f576020820181803683370190505b50905061118d848783611a5b565b6111968161128e565b6111a09085611f73565b506040805160808101825260018152602081019490945263ffffffff929092169183019190915260608201529392505050565b6040805160808101825260008082526020820181905291810191909152606080820152600061120260206112da565b835161120e9190611f73565b9050600061121c8285015190565b9050611229602083611f73565b915060006112378386015190565b905061124360206112da565b61124d9084611f73565b9250600061125b8487611aa2565b6040805160808101825260028152602081019590955263ffffffff93909316928401929092525060608201529392505050565b60006020825161129e9190611fc8565b9050602082516112ae9190611fdc565b156112c157806112bd81611ff0565b9150505b806112cb81611ff0565b9150610894905060208261200b565b600081600881146113e757601081146113f057601881146113f95760208114611402576028811461140b5760308114611414576038811461141d5760408114611426576048811461142f57605081146114385760588114611441576060811461144a5760688114611453576070811461145c5760788114611465576080811461146e5760888114611477576090811461148057609881146114895760a081146114925760a8811461149b5760b081146114a45760b881146114ad5760c081146114b65760c881146114bf5760d081146114c85760d881146114d15760e081146114da5760e881146114e35760f081146114ec5760f881146114f55761010081146114fe5760209150611503565b60019150611503565b60029150611503565b60039150611503565b60049150611503565b60059150611503565b60069150611503565b60079150611503565b60089150611503565b60099150611503565b600a9150611503565b600b9150611503565b600c9150611503565b600d9150611503565b600e9150611503565b600f9150611503565b60109150611503565b60119150611503565b60129150611503565b60139150611503565b60149150611503565b60159150611503565b60169150611503565b60179150611503565b60189150611503565b60199150611503565b601a9150611503565b601b9150611503565b601c9150611503565b601d9150611503565b601e9150611503565b601f9150611503565b602091505b50919050565b6000602083516115199190611fc8565b905060006020845161152b9190611fdc565b111561153f578061153b81611ff0565b9150505b60010160005b81811015611567576020810284015183860152601f1990940193600101611545565b5050505050565b815163ffffffff811682850152611586600485611f73565b93508063ffffffff168410156115f95760405162461bcd60e51b815260206004820152603260248201527f7661724279746573546f42797465733a206f6666736574206c657373207468616044820152710dc40e8d0ca40d2dce0eae840d8cadccee8d60731b6064820152608401610229565b61160963ffffffff821685611f73565b93508015801561161857611567565b8483018051601f84168015602002818801018581018215602002838601015b8183101561164f578251815260209283019201611637565b5050509152505050505050565b604080516060808201835260008083526020830152918101919091526000828451116116d65760405162461bcd60e51b815260206004820152602360248201527f6c656e677468206f66207261772064617461206c657373207468616e206f66666044820152621cd95d60ea1b6064820152608401610229565b60068310156117185760405162461bcd60e51b815260206004820152600e60248201526d1a5b1b1959d85b081bd9999cd95d60921b6044820152606401610229565b60408051606080820183526000808352602083015291810191909152611741610f978686611979565b61ffff168152611752600285611f26565b9350611761610f28868661184c565b63ffffffff166020820152611777600485611f26565b935061178e8585836020015163ffffffff16611ba4565b604082015260208101516117a89063ffffffff1685611f26565b909590945092505050565b6040805180820190915260608082526020820152604080518082019091526060808252602082015260065b8351811015610fac576040805160608082018352600080835260208301529181019190915261180d858361165c565b815190935090915061ffff166001141561182d5760408101518352611846565b805161ffff166002141561184657604081015160208401525b506117de565b815160009061185c836004611f26565b111561186757600080fd5b50016004015163ffffffff1690565b60408051600480825281830190925260009160e084901b9183916020820181803683370190505090508160031a60f81b816000815181106118b9576118b961202a565b60200101906001600160f81b031916908160001a9053508160021a60f81b816001815181106118ea576118ea61202a565b60200101906001600160f81b031916908160001a9053508160011a60f81b8160028151811061191b5761191b61202a565b60200101906001600160f81b031916908160001a9053508160001a60f81b8160038151811061194c5761194c61202a565b60200101906001600160f81b031916908160001a905350600061197082600061184c565b95945050505050565b8151600090611989836002611f26565b111561199457600080fd5b50016002015161ffff1690565b60408051600280825281830190925260009160f084901b9183916020820181803683370190505090508160011a60f81b816000815181106119e4576119e461202a565b60200101906001600160f81b031916908160001a9053508160001a60f81b81600181518110611a1557611a1561202a565b60200101906001600160f81b031916908160001a9053506000611970826000611979565b8082015160208104600101601f821615611a51576001015b6020029392505050565b81830151600060208204600101601f831615611a75576001015b5b80821015611a9a578585015160208302850152602086039550600182019150611a76565b505050505050565b60606000611ab38484015160e01c90565b9050611ac0600485611f73565b935083811115611b2b5760405162461bcd60e51b815260206004820152603060248201527f6279746573546f56617242797465733a206f6666736574206c6573732074686160448201526f6e206c656e677468206f6620626f647960801b6064820152608401610229565b611b358185611f73565b9350606081158015611b5257604051915060208201604052610e0a565b6040519150601f8316801560200281840101848101888315602002848a0101015b81831015611b8b578051835260209283019201611b73565b5050848452601f01601f19166040525050949350505050565b8251606090611bb38385611f26565b1115611bbe57600080fd5b60008267ffffffffffffffff811115611bd957611bd9611cfd565b6040519080825280601f01601f191660200182016040528015611c03576020820181803683370190505b50905060208082019086860101611c1b828287611c26565b509095945050505050565b60208110611c5e5781518352611c3d602084611f26565b9250611c4a602083611f26565b9150611c57602082611f73565b9050611c26565b60006001611c6d836020611f73565b611c7990610100612124565b611c839190611f73565b925184518416931916929092179092525050565b803563ffffffff81168114611cab57600080fd5b919050565b600060208284031215611cc257600080fd5b6108a682611c97565b80356001600160a01b0381168114611cab57600080fd5b600060208284031215611cf457600080fd5b6108a682611ccb565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611d2457600080fd5b813567ffffffffffffffff80821115611d3f57611d3f611cfd565b604051601f8301601f19908116603f01168101908282118183101715611d6757611d67611cfd565b81604052838152866020858801011115611d8057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611db257600080fd5b813567ffffffffffffffff811115611dc957600080fd5b61094e84828501611d13565b60008060408385031215611de857600080fd5b611df183611ccb565b9150602083013567ffffffffffffffff811115611e0d57600080fd5b611e1985828601611d13565b9150509250929050565b60008060408385031215611e3657600080fd5b611e3f83611ccb565b9150611e4d60208401611c97565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000815180845260005b81811015611eb157602081850181015186830182015201611e95565b81811115611ec3576000602083870101525b50601f01601f19169290920160200192915050565b604081526000611eeb6040830185611e8b565b82810360208401526119708185611e8b565b6020815260006108a66020830184611e8b565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f3957611f39611f10565b500190565b606081526000611f516060830186611e8b565b8460208401528281036040840152611f698185611e8b565b9695505050505050565b600082821015611f8557611f85611f10565b500390565b600063ffffffff808316818516808303821115611fa957611fa9611f10565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b600082611fd757611fd7611fb2565b500490565b600082611feb57611feb611fb2565b500690565b600060001982141561200457612004611f10565b5060010190565b600081600019048311821515161561202557612025611f10565b500290565b634e487b7160e01b600052603260045260246000fd5b600181815b8085111561207b57816000190482111561206157612061611f10565b8085161561206e57918102915b93841c9390800290612045565b509250929050565b60008261209257506001610894565b8161209f57506000610894565b81600181146120b557600281146120bf576120db565b6001915050610894565b60ff8411156120d0576120d0611f10565b50506001821b610894565b5060208310610133831016604e8410600b84101617156120fe575081810a610894565b6121088383612040565b806000190482111561211c5761211c611f10565b029392505050565b60006108a6838361208356fea2646970667358221220601dd5f70e7619920da00a5dff3d9fb45365246fa79c4a405afc9bc31488eccf64736f6c634300080b0033";
    public static final String abiSDP = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"senderDomain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"senderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sequence\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"receiveMessage\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"amAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2849399471,2491381297],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"getAmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2151142494,3037766546],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"getLocalDomain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[986111921,1151516793],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"localDomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[1456155906,1669792957],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2376452955,1351213768],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"senderDomain\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"senderID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"receiverDomain\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"receiverID\",\"type\":\"bytes32\"}],\"name\":\"querySDPMessageSeq\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"selector\":[228256229,4042977559],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"senderDomain\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"senderID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"pkg\",\"type\":\"bytes\"}],\"name\":\"recvMessage\",\"outputs\":[],\"selector\":[3231393307,672986598],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"selector\":[1901074598,3631098338],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiverDomain\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"selector\":[4151275579,1701420429],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiverDomain\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"receiverID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendUnorderedMessage\",\"outputs\":[],\"selector\":[3251555418,33876930],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAmContract\",\"type\":\"address\"}],\"name\":\"setAmContract\",\"outputs\":[],\"selector\":[1625864649,1896231387],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"setLocalDomain\",\"outputs\":[],\"selector\":[2206863404,2246684180],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"selector\":[4076725131,382390570],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
    public static final String binSDP = "608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061182d806100616000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063838a102c1161008c578063c09b261b11610066578063c09b261b14610195578063c1cecc5a146101a8578063f2fde38b146101bb578063f76f703b146101ce57600080fd5b8063838a102c1461015e5780638da5cb5b14610171578063a9d662af1461018257600080fd5b80630d9ae9e5146100d45780633ac6dfb11461010157806356cb2d021461011357806360e8b9c91461011c578063715018a6146101315780638037d45e14610139575b600080fd5b6100e76100e23660046112a0565b6101e1565b60405163ffffffff90911681526020015b60405180910390f35b6002545b6040519081526020016100f8565b61010560025481565b61012f61012a366004611322565b6102c7565b005b61012f610369565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b61012f61016c36600461138e565b6103dd565b6000546001600160a01b0316610146565b600154610146906001600160a01b031681565b61012f6101a3366004611427565b610436565b61012f6101b6366004611427565b610586565b61012f6101c9366004611322565b61068e565b61012f6101dc366004611427565b610778565b600060025484846040516020016101f99291906114a1565b60405160208183030381529060405280519060200120146102615760405162461bcd60e51b815260206004820152601e60248201527f5344504d73673a2077726f6e6720726563656976696e6720646f6d61696e000060448201526064015b60405180910390fd5b60006102a688888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92508791506108529050565b60009081526004602052604090205463ffffffff1698975050505050505050565b6000546001600160a01b031633146102f15760405162461bcd60e51b8152600401610258906114b1565b6001600160a01b0381166103475760405162461bcd60e51b815260206004820152601b60248201527f5344504d73673a20696e76616c696420616d20636f6e747261637400000000006044820152606401610258565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103935760405162461bcd60e51b8152600401610258906114b1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104075760405162461bcd60e51b8152600401610258906114b1565b806040516020016104189190611516565b60408051601f19818403018152919052805160209091012060025550565b6001546001600160a01b031633146104905760405162461bcd60e51b815260206004820152601d60248201527f5344504d73673a206e6f742076616c696420616d20636f6e74726163740000006044820152606401610258565b60006104d183838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108b692505050565b905060025481600001516040516020016104eb9190611516565b604051602081830303815290604052805190602001201461054e5760405162461bcd60e51b815260206004820152601e60248201527f5344504d73673a2077726f6e6720726563656976696e6720646f6d61696e00006044820152606401610258565b606081015163ffffffff90811614156105725761056d86868684610a58565b61057e565b61057e86868684610ad2565b505050505050565b6040805160a06020601f88018190040282018101909252608081018681526000928291908990899081908501838280828437600092019190915250505090825250602080820187905260408051601f870183900483028101830182528681529201919086908690819084018382808284376000920182905250938552505063ffffffff602090930192909252919250610620905082610cad565b60015460405163e41fb51760e01b81529192506001600160a01b03169063e41fb51790610653903390859060040161155e565b600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b031633146106b85760405162461bcd60e51b8152600401610258906114b1565b6001600160a01b03811661071d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610258565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160a06020601f88018190040282018101909252608081018681526000928291908990899081908501838280828437600092019190915250505090825250602080820187905260408051601f87018390048302810183018252868152920191908690869081908401838280828437600092019190915250505090825250604080516020601f8a018190048102820181019092528881529181019161083d918a908a90819084018382808284376000920191909152503392508a9150610dc99050565b63ffffffff1690529050600061062082610cad565b6000836040516020016108659190611516565b60408051601f198184030181528282528051602091820120908301528101849052606081018390526080016040516020818303038152906040528051906020012090509392505050565b5050505050565b604080516080810182526060808252600060208301819052928201819052810191909152815160006108e88285015190565b6108f39060206115a0565b905060008163ffffffff1667ffffffffffffffff8111156109165761091661134b565b6040519080825280601f01601f191660200182016040528015610940576020820181803683370190505b50905061094e838683610e29565b61095781610e68565b61096190846115c8565b9250600061096f8487015190565b905061097c6020856115c8565b9350600061098a8588015190565b90506109966020610eba565b6109a090866115c8565b945060006109ae8689015190565b6109b99060206115a0565b905060008163ffffffff1667ffffffffffffffff8111156109dc576109dc61134b565b6040519080825280601f01601f191660200182016040528015610a06576020820181803683370190505b509050610a14878a83610e29565b610a1d81610e68565b610a2790886115c8565b506040805160808101825295865260208601949094529284019290925263ffffffff16606083015250949350505050565b610a6581602001516110e9565b6001600160a01b031663ff098be785858585604001516040518563ffffffff1660e01b8152600401610a9a9493929190611608565b600060405180830381600087803b158015610ab457600080fd5b505af1158015610ac8573d6000803e3d6000fd5b5050505050505050565b6000610b1985858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050602085015186915061111c565b90508063ffffffff16826060015163ffffffff1614610b7a5760405162461bcd60e51b815260206004820152601a60248201527f5344504d73673a2073657175656e6365206e6f7420657175616c0000000000006044820152606401610258565b600060606000610b8d85602001516110e9565b9050806001600160a01b031663c09b261b89898989604001516040518563ffffffff1660e01b8152600401610bc59493929190611608565b600060405180830381600087803b158015610bdf57600080fd5b505af1925050508015610bf0575060015b610c5b57610bfc61163f565b806308c379a01415610c235750610c1161165b565b80610c1c5750610c25565b9150610c60565b505b3d808015610c4f576040519150601f19603f3d011682016040523d82523d6000602084013e610c54565b606091505b5050610c60565b600192505b7f5c739d2e6f1ca8bbfc6b71f12b702b9c87e02646edd83b3600d624abb67fab0488888884888888604051610c9b97969594939291906116e5565b60405180910390a15050505050505050565b60606000610cbe8360000151610e68565b610ccb8460400151610e68565b610cd6906004611743565b610ce1906020611743565b610ceb9190611743565b905060008167ffffffffffffffff811115610d0857610d0861134b565b6040519080825280601f01601f191660200182016040528015610d32576020820181803683370190505b5084519091508290610d4690829084611151565b8451610d5190610e68565b610d5b90826115c8565b60208681015182850152909150610d7290826115c8565b606086015163ffffffff16838201529050610d8d60206111af565b610d9790826115c8565b9050610da881866040015184611151565b610db58560400151610e68565b610dbf90826115c8565b5090949350505050565b600080610dd78585856111ba565b6000818152600360205260408120805492935063ffffffff909216918291610dfe8361175b565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080925050509392505050565b81830151600060208204600101601f831615610e43576001015b5b8082101561057e578585015160208302850152602086039550600182019150610e44565b600060208251610e789190611795565b905060208251610e8891906117a9565b15610e9b5780610e97816117bd565b9150505b80610ea5816117bd565b9150610eb490506020826117d8565b92915050565b60008160088114610fc75760108114610fd05760188114610fd95760208114610fe25760288114610feb5760308114610ff45760388114610ffd5760408114611006576048811461100f57605081146110185760588114611021576060811461102a5760688114611033576070811461103c5760788114611045576080811461104e5760888114611057576090811461106057609881146110695760a081146110725760a8811461107b5760b081146110845760b8811461108d5760c081146110965760c8811461109f5760d081146110a85760d881146110b15760e081146110ba5760e881146110c35760f081146110cc5760f881146110d55761010081146110de57602091506110e3565b600191506110e3565b600291506110e3565b600391506110e3565b600491506110e3565b600591506110e3565b600691506110e3565b600791506110e3565b600891506110e3565b600991506110e3565b600a91506110e3565b600b91506110e3565b600c91506110e3565b600d91506110e3565b600e91506110e3565b600f91506110e3565b601091506110e3565b601191506110e3565b601291506110e3565b601391506110e3565b601491506110e3565b601591506110e3565b601691506110e3565b601791506110e3565b601891506110e3565b601991506110e3565b601a91506110e3565b601b91506110e3565b601c91506110e3565b601d91506110e3565b601e91506110e3565b601f91506110e3565b602091505b50919050565b604080516020808252818301909252600091829190602082018180368337505050602081018490529050825b9392505050565b60008061112a858585610852565b6000818152600460205260408120805492935063ffffffff909216918291610dfe8361175b565b6000602083516111619190611795565b905060006020845161117391906117a9565b11156111875780611183816117bd565b9150505b60010160005b818110156108af576020810284015183860152601f199094019360010161118d565b6000610eb482610eba565b6000806111c684611229565b905080856040516020016111da9190611516565b60408051601f1981840301815282825280516020918201209083019390935281019190915260608101849052608001604051602081830303815290604052805190602001209150509392505050565b6040805160208082528183019092526000918291906020820181803683375050506020018390525090919050565b60008083601f84011261126957600080fd5b50813567ffffffffffffffff81111561128157600080fd5b60208301915083602082850101111561129957600080fd5b9250929050565b600080600080600080608087890312156112b957600080fd5b863567ffffffffffffffff808211156112d157600080fd5b6112dd8a838b01611257565b90985096506020890135955060408901359150808211156112fd57600080fd5b5061130a89828a01611257565b979a9699509497949695606090950135949350505050565b60006020828403121561133457600080fd5b81356001600160a01b038116811461111557600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156113875761138761134b565b6040525050565b600060208083850312156113a157600080fd5b823567ffffffffffffffff808211156113b957600080fd5b818501915085601f8301126113cd57600080fd5b8135818111156113df576113df61134b565b60405191506113f7601f8201601f1916850183611361565b808252868482850101111561140b57600080fd5b8084840185840137600090820190930192909252509392505050565b60008060008060006060868803121561143f57600080fd5b853567ffffffffffffffff8082111561145757600080fd5b61146389838a01611257565b909750955060208801359450604088013591508082111561148357600080fd5b5061149088828901611257565b969995985093965092949392505050565b8183823760009101908152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b838110156115015781810151838201526020016114e9565b83811115611510576000848401525b50505050565b600082516115288184602087016114e6565b9190910192915050565b6000815180845261154a8160208601602086016114e6565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061158290830184611532565b949350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156115bf576115bf61158a565b01949350505050565b6000828210156115da576115da61158a565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061161c6060830186886115df565b84602084015282810360408401526116348185611532565b979650505050505050565b600060033d11156116585760046000803e5060005160e01c5b90565b600060443d10156116695790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561169957505050505090565b82850191508151818111156116b15750505050505090565b843d87010160208285010111156116cb5750505050505090565b6116da60208286010187611361565b509095945050505050565b60c0815260006116f960c08301898b6115df565b602083018890526001600160a01b038716604084015263ffffffff86166060840152841515608084015282810360a08401526117358185611532565b9a9950505050505050505050565b600082198211156117565761175661158a565b500190565b600063ffffffff808316818114156117755761177561158a565b6001019392505050565b634e487b7160e01b600052601260045260246000fd5b6000826117a4576117a461177f565b500490565b6000826117b8576117b861177f565b500690565b60006000198214156117d1576117d161158a565b5060010190565b60008160001904831182151516156117f2576117f261158a565b50029056fea2646970667358221220eb720168c8ff67daadc3bf00f97a698e1b5215b03fedb2d04037526b07f17aab64736f6c634300080b0033";

    public void start() {

    }

    @Override
    @SneakyThrows
    public void startup(AbstractBBCContext abstractBBCContext) {
        getBBCLogger().info("FISCO-BCOS BBCService startup with context: {}", new String(abstractBBCContext.getConfForBlockchainClient()));

        Future<?> future = ThreadUtil.execAsync(() -> {
            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
            NativeInterface.secp256k1GenKeyPair();
        });
        future.get();

        if (ObjectUtil.isNull(abstractBBCContext)) {
            throw new RuntimeException("null bbc context");
        }
        if (ObjectUtil.isEmpty(abstractBBCContext.getConfForBlockchainClient())) {
            throw new RuntimeException("empty blockchain client conf");
        }

        // 1. obtain the configuration information
        try {
            config = FISCOBCOSConfig.fromJsonString(new String(abstractBBCContext.getConfForBlockchainClient()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        if (StrUtil.isEmpty(config.getCaCert())) {
            throw new RuntimeException("CA certification is empty");
        }

        if (StrUtil.isEmpty(config.getSslCert())) {
            throw new RuntimeException("SSL certification is empty");
        }

        if (StrUtil.isEmpty(config.getSslKey())) {
            throw new RuntimeException("SSL key is empty");
        }

        if (StrUtil.isEmpty(config.getConnectPeer())) {
            throw new RuntimeException("Address of peer to connect is empty");
        }

        if (StrUtil.isEmpty(config.getGroupID())) {
            throw new RuntimeException("groupID to which the connected node belongs is empty");
        }

        // 2. connect to the FISCO-BCOS network
        try {
            ConfigProperty configProperty = new ConfigProperty();

            // 实例化 cryptoMaterial
            Map<String, Object> cryptoMaterial = new HashMap<>();
            cryptoMaterial.put("useSMCrypto", config.getUseSMCrypto());
            cryptoMaterial.put("disableSsl", config.getDisableSsl());
            configProperty.cryptoMaterial = cryptoMaterial;

            // 实例化 network
            Map<String, Object> network = new HashMap<>();
            network.put("messageTimeout", config.getMessageTimeout());
            network.put("defaultGroup", config.getDefaultGroup());
            network.put("peers", new ArrayList<>(Collections.singletonList(config.getConnectPeer())));
            configProperty.network = network;

            // 实例化 account
            Map<String, Object> account = new HashMap<>();
            account.put("keyStoreDir", config.getKeyStoreDir());
            account.put("accountFileFormat", config.getAccountFileFormat());
            configProperty.account = account;

            // 实例化 threadPool
            Map<String, Object> threadPool = new HashMap<>();
            configProperty.threadPool = threadPool;

            // 实例化 amop
            List<AmopTopic> amop = new ArrayList<>();
            configProperty.amop = amop;

            ConfigOption configOption = new ConfigOption();

            CryptoMaterialConfig cryptoMaterialConfig = new CryptoMaterialConfig();
            cryptoMaterialConfig.setCaCert(config.getCaCert());
            cryptoMaterialConfig.setSdkCert(config.getSslCert());
            cryptoMaterialConfig.setSdkPrivateKey(config.getSslKey());
            configOption.setCryptoMaterialConfig(cryptoMaterialConfig);

            configOption.setAccountConfig(new AccountConfig(configProperty));
            configOption.setAmopConfig(new AmopConfig(configProperty));
            configOption.setNetworkConfig(new NetworkConfig(configProperty));
            configOption.setThreadPoolConfig(new ThreadPoolConfig(configProperty));

            configOption.setJniConfig(configOption.generateJniConfig());
            configOption.setConfigProperty(configProperty);

            // Initialize BcosSDK
            sdk = new BcosSDK(configOption);
            // Initialize the client for the group
            client = sdk.getClient(config.getGroupID());

        } catch (Exception e) {
            throw new RuntimeException(String.format("failed to connect fisco-bcos to peer:%s, group:%s", config.getConnectPeer(), config.getGroupID()), e);
        }

        // 3. initialize keypair and create transaction processor
        this.keyPair = client.getCryptoSuite().getCryptoKeyPair();
        this.transactionProcessorAM = TransactionProcessorFactory.createAssembleTransactionProcessor(
                client,
                keyPair,
                "AuthMsg",
                abiAM,
                binAM
        );
        this.transactionProcessorSDP = TransactionProcessorFactory.createAssembleTransactionProcessor(
                client,
                keyPair,
                "SDPMsg",
                abiSDP,
                binSDP
        );

        // 4. set context
        this.bbcContext = abstractBBCContext;

        // 5. set the pre-deployed contracts into context
        if (ObjectUtil.isNull(abstractBBCContext.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.config.getAmContractAddressDeployed())) {
            AuthMessageContract authMessageContract = new AuthMessageContract();
            authMessageContract.setContractAddress(this.config.getAmContractAddressDeployed());
            authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setAuthMessageContract(authMessageContract);
        }

        if (ObjectUtil.isNull(abstractBBCContext.getSdpContract())
                && StrUtil.isNotEmpty(this.config.getSdpContractAddressDeployed())) {
            SDPContract sdpContract = new SDPContract();
            sdpContract.setContractAddress(this.config.getSdpContractAddressDeployed());
            sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            this.bbcContext.setSdpContract(sdpContract);
        }
    }

    @Override
    public void shutdown() {
        getBBCLogger().info("shut down FISCO-BCOS BBCService!");
        this.client.stop();

    }

    @Override
    public AbstractBBCContext getContext() {
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }

        getBBCLogger().debug("FISCO-BCOS BBCService context (amAddr: {}, amStatus: {}, sdpAddr: {}, sdpStatus: {})",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getContractAddress() : "",
                this.bbcContext.getAuthMessageContract() != null ? this.bbcContext.getAuthMessageContract().getStatus() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getContractAddress() : "",
                this.bbcContext.getSdpContract() != null ? this.bbcContext.getSdpContract().getStatus() : ""
        );

        return this.bbcContext;
    }

    @Override
    public CrossChainMessageReceipt readCrossChainMessageReceipt(String txHash) {
        // 1. Obtain FISCO-BCOS receipt according to transaction hash
        TransactionReceipt transactionReceipt;

        try {
            transactionReceipt = client.getTransactionReceipt(txHash, false).getTransactionReceipt();
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to read cross chain message receipt (txHash: %s)", txHash
                    ), e
            );
        }

        // 2. Construct cross-chain message receipt
        CrossChainMessageReceipt crossChainMessageReceipt = getCrossChainMessageReceipt(transactionReceipt);
        getBBCLogger().info("cross chain message receipt for txhash {} : {}", txHash, JSON.toJSONString(crossChainMessageReceipt));

        return crossChainMessageReceipt;
    }

    private CrossChainMessageReceipt getCrossChainMessageReceipt(TransactionReceipt transactionReceipt) {
        CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
        if (transactionReceipt == null) {
            // If the transaction is not packaged, the return receipt is empty
            crossChainMessageReceipt.setConfirmed(false);
            crossChainMessageReceipt.setSuccessful(false);
            crossChainMessageReceipt.setTxhash("");
            crossChainMessageReceipt.setErrorMsg("");
            return crossChainMessageReceipt;
        }

        SDPMsg sdpMsg = SDPMsg.load(config.getSdpContractAddressDeployed(), client, keyPair);
        List<SDPMsg.ReceiveMessageEventResponse> receiveMessageEventResponses = sdpMsg.getReceiveMessageEvents(transactionReceipt);
        if (ObjectUtil.isNotEmpty(receiveMessageEventResponses)) {
            SDPMsg.ReceiveMessageEventResponse response = receiveMessageEventResponses.get(0);
            crossChainMessageReceipt.setConfirmed(true);
            crossChainMessageReceipt.setSuccessful(transactionReceipt.isStatusOK() && response.result);
            crossChainMessageReceipt.setTxhash(transactionReceipt.getTransactionHash());
            crossChainMessageReceipt.setErrorMsg(
                    transactionReceipt.isStatusOK() ? StrUtil.format(
                            "SDP calls biz contract: {}", response.result ? "SUCCESS" : response.errMsg
                    ) : StrUtil.emptyToDefault(transactionReceipt.getMessage(), "")
            );
            getBBCLogger().info(
                    "event receiveMessage from SDP contract is found in tx {} of block {} : " +
                            "( send_domain: {}, sender: {}, receiver: {}, biz_call: {}, err_msg: {} )",
                    transactionReceipt.getTransactionHash(), transactionReceipt.getBlockNumber(),
                    response.senderDomain, HexUtil.encodeHexStr(response.senderID), response.receiverID, response.result.toString(),
                    response.errMsg
            );
            return crossChainMessageReceipt;
        }

        crossChainMessageReceipt.setConfirmed(true);
        crossChainMessageReceipt.setSuccessful(transactionReceipt.isStatusOK());
        crossChainMessageReceipt.setTxhash(transactionReceipt.getTransactionHash());
        crossChainMessageReceipt.setErrorMsg(StrUtil.emptyToDefault(transactionReceipt.getMessage(), ""));

        return crossChainMessageReceipt;
    }

    @Override
    public List<CrossChainMessage> readCrossChainMessagesByHeight(long height) {
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }

        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())) {
            throw new RuntimeException("empty am contract in bbc context");
        }

        List<CrossChainMessage> messageList = ListUtil.toList();
        try {

            // 1. get block
            BcosBlock.Block block = client.getBlockByNumber(BigInteger.valueOf(height), false, true).getBlock();
            TransactionDecoderInterface decoder =
                    new TransactionDecoderService(client.getCryptoSuite(), false);
            ContractLoader contractLoader = new ContractLoader("AuthMsg", abiAM, binAM);

            // 2. get crosschain msgs
            messageList.addAll(
                    // 2.1 get txHashes in block
                    block.getTransactionHashes().stream()
                            .map(txHash -> {
                                // 2.2 get transaction receipt
                                TransactionReceipt receipt = client.getTransactionReceipt(txHash.get(), false).getTransactionReceipt();
                                // 2.3 decode events from transaction receipt
                                Map<String, List<List<Object>>> events = null;
                                try {
                                    events = decoder.decodeEvents(abiAM, receipt.getLogEntries());
                                } catch (ContractCodecException e) {
                                    throw new RuntimeException(e);
                                }
                                return events.getOrDefault("SendAuthMessage", Collections.emptyList()).stream()
                                        .map(event -> {
                                            // 2.4 create crosschain msg
                                            return CrossChainMessage.createCrossChainMessage(
                                                    CrossChainMessage.CrossChainMessageType.AUTH_MSG,
                                                    receipt.getBlockNumber().longValue(),
                                                    block.getTimestamp(),
                                                    HexUtil.decodeHex(StrUtil.removePrefix(block.getHash().trim(), "0x")),
                                                    (byte[]) event.get(0),
                                                    // todo: put ledger data, for SPV or other attestations
                                                    // this time we need no verify. it's ok to set it with empty bytes
                                                    "".getBytes(),
                                                    // todo: put ledger data, for SPV or other attestations
                                                    // this time we need no verify. it's ok to set it with empty bytes
                                                    "".getBytes(),
                                                    HexUtil.decodeHex(txHash.get().replaceFirst("^0x", ""))
                                            );
                                        }).collect(Collectors.toList());
                            })
                            .flatMap(List::stream) // flatten from List<List<CrossChainMessage>> to List<CrossChainMessage>
                            .collect(Collectors.toList())
            );

            if (!messageList.isEmpty()) {
                getBBCLogger().info("read cross chain messages (height: {}, msg_size: {})", height, messageList.size());
                getBBCLogger().debug("read cross chain messages (height: {}, msgs: {})",
                        height,
                        messageList.stream().map(JSON::toJSONString).collect(Collectors.joining(","))
                );
            }

            return messageList;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to readCrossChainMessagesByHeight (Height: %d, contractAddr: %s, topic: %s)",
                            height,
                            this.bbcContext.getAuthMessageContract().getContractAddress(),
                            SENDAUTHMESSAGE_EVENT
                    ), e
            );
        }
    }

    @Override
    public Long queryLatestHeight() {
        Long l;
        try {
            l = client.getBlockNumber().getBlockNumber().longValue();
        } catch (Exception e) {
            throw new RuntimeException("failed to query latest height", e);
        }
        getBBCLogger().debug("latest height: {}", l);
        return l;
    }

    @Override
    public long querySDPMessageSeq(String senderDomain, String senderID, String receiverDomain, String receiverID) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())) {
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. load sdpMsg
        SDPMsg sdpMsg = SDPMsg.load(
                bbcContext.getSdpContract().getContractAddress(),
                this.client,
                this.keyPair
        );

        // 3. query sequence
        long seq;
        try {
            seq = sdpMsg.querySDPMessageSeq(
                    senderDomain,
                    HexUtil.decodeHex(senderID),
                    receiverDomain,
                    HexUtil.decodeHex(receiverID)
            ).longValue();

            getBBCLogger().info("sdpMsg seq: {} (senderDomain: {}, senderID: {}, receiverDomain: {}, receiverID: {})",
                    seq,
                    senderDomain,
                    senderID,
                    receiverDomain,
                    receiverID
            );
        } catch (Exception e) {
            throw new RuntimeException(String.format(
                    "failed to query sdpMsg seq (senderDomain: %s, senderID: %s, receiverDomain: %s, receiverID: %s)",
                    senderDomain,
                    senderID,
                    receiverDomain,
                    receiverID
            ), e);
        }

        return seq;
    }

    @Override
    public void setProtocol(String protocolAddress, String protocolType) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())) {
            throw new RuntimeException("empty am contract in bbc context");
        }

        // 2. load am contract
        AuthMsg am = AuthMsg.load(
                this.bbcContext.getAuthMessageContract().getContractAddress(),
                this.client,
                this.keyPair
        );

        // 3. set protocol to am
        try {
            TransactionReceipt receipt = am.setProtocol(protocolAddress, BigInteger.valueOf(Long.parseLong(protocolType)));
            if (receipt.getStatus() == 0) {
                getBBCLogger().info(
                        "set protocol (address: {}, type: {}) to AM {} by tx {} ",
                        protocolAddress, protocolType,
                        this.bbcContext.getAuthMessageContract().getContractAddress(),
                        receipt.getTransactionHash()
                );
            } else {
                getBBCLogger().info(
                        "set protocol failed, receipt status code: {}",
                        receipt.getStatus()
                );
            }

        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set protocol (address: %s, type: %s) to AM %s",
                            protocolAddress, protocolType, this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }

        // 4. update am contract status
        try {
            if (!StrUtil.isEmpty(am.getProtocol(BigInteger.ZERO))) {
                this.bbcContext.getAuthMessageContract().setStatus(ContractStatusEnum.CONTRACT_READY);
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to update am contract status (address: %s)",
                            this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e);
        }
    }

    @Override
    public CrossChainMessageReceipt relayAuthMessage(byte[] rawMessage) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getAuthMessageContract())) {
            throw new RuntimeException("empty am contract in bbc context");
        }

        getBBCLogger().info("relay AM {} to {} ",
                HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress());

        // 2. creat Transaction
        CrossChainMessageReceipt crossChainMessageReceipt = new CrossChainMessageReceipt();
        try {
            // 2.1 async send tx
            transactionProcessorAM.sendTransactionAndGetReceiptByContractLoaderAsync(
                    "AuthMsg", // contract name
                    this.bbcContext.getAuthMessageContract().getContractAddress(),  // contract address
                    AuthMsg.FUNC_RECVPKGFROMRELAYER, // function name
                    Collections.singletonList(new DynamicBytes(rawMessage)), // input
                    new TransactionCallback() { // callback
                        @Override
                        public void onResponse(TransactionReceipt receipt) {
                            // set `confirmed` to false and `successful` to true if succeeded
                            crossChainMessageReceipt.setConfirmed(false);
                            crossChainMessageReceipt.setSuccessful(true);
                            crossChainMessageReceipt.setTxhash(receipt.getTransactionHash());
                            crossChainMessageReceipt.setErrorMsg("");

                            getBBCLogger().info("relay tx {}", receipt.getTransactionHash());
                        }
                    });
            // 2.2 return crossChainMessageReceipt
            return crossChainMessageReceipt;
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format("failed to relay AM %s to %s",
                            HexUtil.encodeHexStr(rawMessage), this.bbcContext.getAuthMessageContract().getContractAddress()
                    ), e
            );
        }
    }

    @Override
    public void setupAuthMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getAuthMessageContract())
                && StrUtil.isNotEmpty(this.bbcContext.getAuthMessageContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        AuthMsg authMsg;
        try {
            authMsg = AuthMsg.deploy(client, keyPair);
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy authMsg", e);
        }

        // 3. get tx receipt
        TransactionReceipt transactionReceipt = authMsg.getDeployReceipt();

        // 4. check whether the deployment is successful
        if (!ObjectUtil.isNull(transactionReceipt) && transactionReceipt.getStatus() == 0) {
            AuthMessageContract authMessageContract = new AuthMessageContract();
            authMessageContract.setContractAddress(authMsg.getContractAddress());
            authMessageContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            bbcContext.setAuthMessageContract(authMessageContract);
            getBBCLogger().info("setup am contract successful: {}", authMsg.getContractAddress());
        } else {
            throw new RuntimeException("failed to get deploy authMsg tx receipt");
        }
    }

    @Override
    public void setupSDPMessageContract() {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNotNull(this.bbcContext.getSdpContract())
                && StrUtil.isNotEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            // If the contract has been pre-deployed and the contract address is configured in the configuration file,
            // there is no need to redeploy.
            return;
        }

        // 2. deploy contract
        SDPMsg sdpMsg;
        try {
            sdpMsg = SDPMsg.deploy(client, keyPair);
        } catch (Exception e) {
            throw new RuntimeException("failed to deploy sdpMsg", e);
        }

        // 3. get tx receipt
        TransactionReceipt transactionReceipt = sdpMsg.getDeployReceipt();

        // 4. check whether the deployment is successful
        if (!ObjectUtil.isNull(transactionReceipt) && transactionReceipt.getStatus() == 0) {
            SDPContract sdpContract = new SDPContract();
            sdpContract.setContractAddress(sdpMsg.getContractAddress());
            sdpContract.setStatus(ContractStatusEnum.CONTRACT_DEPLOYED);
            bbcContext.setSdpContract(sdpContract);
            getBBCLogger().info("setup sdp contract successful: {}", sdpMsg.getContractAddress());
        } else {
            throw new RuntimeException("failed to get deploy sdpMsg tx receipt");
        }
    }

    @Override
    public void setAmContract(String contractAddress) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (ObjectUtil.isNull(this.bbcContext.getSdpContract())) {
            throw new RuntimeException("empty sdp contract in bbc context");
        }

        // 2. load sdp contract
        SDPMsg sdp = SDPMsg.load(
                this.bbcContext.getSdpContract().getContractAddress(),
                this.client,
                this.keyPair
        );

        // 3. set am to sdp
        try {
            TransactionReceipt receipt = sdp.setAmContract(contractAddress);
            if (receipt.getStatus() == 0) {
                getBBCLogger().info(
                        "set am contract (address: {}) to SDP {} by tx {}",
                        contractAddress,
                        this.bbcContext.getSdpContract().getContractAddress(),
                        receipt.getTransactionHash()
                );
            } else {
                getBBCLogger().info(
                        "set am contract failed, receipt status code: {}",
                        receipt.getStatus()
                );
            }

        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set am contract (address: %s) to SDP %s",
                            contractAddress,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }

        // 4. update sdp contract status
        try {
            if (!StrUtil.isEmpty(sdp.getAmAddress()) && !isByteArrayZero(sdp.getLocalDomain())) {
                this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to update sdp contract status (address: %s)",
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e);
        }
    }

    private boolean isByteArrayZero(byte[] bytes) {
        for (byte b : bytes) {
            if (b != 0x00) {
                return false;
            }
        }
        return true;
    }

    @Override
    public void setLocalDomain(String domain) {
        // 1. check context
        if (ObjectUtil.isNull(this.bbcContext)) {
            throw new RuntimeException("empty bbc context");
        }
        if (StrUtil.isEmpty(this.bbcContext.getSdpContract().getContractAddress())) {
            throw new RuntimeException("none sdp contract address");
        }

        // 2. load sdp contract
        SDPMsg sdp = SDPMsg.load(
                this.bbcContext.getSdpContract().getContractAddress(),
                this.client,
                this.keyPair
        );

        // 3. set domain to sdp
        try {
            TransactionReceipt receipt = sdp.setLocalDomain(domain);
            if (receipt.getStatus() == 0) {
                getBBCLogger().info(
                        "set domain ({}) to SDP {} by tx {}",
                        domain,
                        this.bbcContext.getSdpContract().getContractAddress(),
                        receipt.getTransactionHash()
                );
            } else {
                getBBCLogger().info(
                        "set domain failed, receipt status code: {}",
                        receipt.getStatus()
                );
            }

        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to set domain (%s) to SDP %s",
                            domain,
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e
            );
        }

        // 4. update sdp contract status
        try {
            if (!StrUtil.isEmpty(sdp.getAmAddress()) && !ObjectUtil.isEmpty(sdp.getLocalDomain())) {
                this.bbcContext.getSdpContract().setStatus(ContractStatusEnum.CONTRACT_READY);
            }
        } catch (Exception e) {
            throw new RuntimeException(
                    String.format(
                            "failed to update sdp contract status (address: %s)",
                            this.bbcContext.getSdpContract().getContractAddress()
                    ), e);
        }
    }
}